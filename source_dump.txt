# ==================================================
# Path: /home/tommy/Documents/charity/frontend
# Detected tech: docker, javascript, python, react, typescript, vue
# ==================================================

## DIRECTORY STRUCTURE
```
frontend/
├── .git/
├── .github/
├── .vscode/
├── node_modules/
├── public/
│   ├── icons/
│   │   ├── chainlink.svg
│   │   ├── dai.svg
│   │   ├── eth.svg
│   │   ├── usdc.svg
│   │   └── usdt.svg
│   ├── images/
│   │   └── heart.png
│   ├── sounds/
│   │   └── notification-sound.mp3
│   ├── Profiles_HP_Sm.png
│   ├── auth-bg.jpg
│   ├── charity.png
│   ├── desktop.jpg
│   ├── discover.png
│   ├── hero-animals-2.png
│   ├── hero-business-1.png
│   ├── hero-business-4.png
│   ├── hero-education-1.png
│   ├── hero-education-2.png
│   ├── hero-education-3.png
│   ├── hero-medical-1.png
│   ├── logo.png
│   ├── logo.svg
│   ├── metamask.png
│   ├── og_image.png
│   ├── photo-category-animals@2x.jpg
│   ├── someone-else.png
│   ├── step-3.png
│   ├── undraw_back-home_3dun.svg
│   ├── vite copy.svg
│   ├── vite.svg
│   └── you-self.png
├── src/
│   ├── apis/
│   ├── common/
│   │   └── NotFound.jsx
│   ├── components/
│   │   ├── AnalysisResult/
│   │   │   └── index.jsx
│   │   ├── AnalyzeButton/
│   │   │   └── index.jsx
│   │   ├── CampaignList/
│   │   │   └── CampaignList.jsx
│   │   ├── CampaignSkeleton/
│   │   │   └── index.jsx
│   │   ├── Card/
│   │   │   └── Card.jsx
│   │   ├── CircleProgress/
│   │   │   └── CircleProgress.jsx
│   │   ├── CreateCampaign/
│   │   │   └── CreateCampaign.jsx
│   │   ├── DonationChart/
│   │   │   └── index.jsx
│   │   ├── FilterCampaign/
│   │   │   └── index.jsx
│   │   ├── Footer/
│   │   │   └── Footer.jsx
│   │   ├── FundSkeleton/
│   │   │   └── index.jsx
│   │   ├── Icons/
│   │   │   ├── FacebookSvg.jsx
│   │   │   ├── GoogleIconSvg.jsx
│   │   │   ├── HeartDonateSvg.jsx
│   │   │   └── ZaloSvg.jsx
│   │   ├── ListCampaign/
│   │   │   └── index.jsx
│   │   ├── LoadingPage/
│   │   │   └── index.jsx
│   │   ├── NotificationList/
│   │   │   └── index.jsx
│   │   ├── NotificationProvider/
│   │   │   └── index.jsx
│   │   ├── ProgressBar/
│   │   │   └── ProgressBar.jsx
│   │   ├── ReadMore/
│   │   │   └── ReadMore.jsx
│   │   ├── RemoteSVG/
│   │   │   └── RemoteSVG.jsx
│   │   ├── ShareModal/
│   │   │   └── ShareModal.jsx
│   │   ├── TextSplit/
│   │   │   └── TextSplit.jsx
│   │   ├── Topic/
│   │   │   └── TopicCard.jsx
│   │   ├── VideoPlayer/
│   │   │   └── VideoPlayer.jsx
│   │   ├── ui/
│   │   │   ├── accordion.jsx
│   │   │   ├── alert-dialog.jsx
│   │   │   ├── alert.jsx
│   │   │   ├── aspect-ratio.jsx
│   │   │   ├── avatar.jsx
│   │   │   ├── badge.jsx
│   │   │   ├── breadcrumb.jsx
│   │   │   ├── button.jsx
│   │   │   ├── calendar.jsx
│   │   │   ├── card.jsx
│   │   │   ├── carousel.jsx
│   │   │   ├── chart.jsx
│   │   │   ├── checkbox.jsx
│   │   │   ├── collapsible.jsx
│   │   │   ├── command.jsx
│   │   │   ├── context-menu.jsx
│   │   │   ├── dialog.jsx
│   │   │   ├── drawer.jsx
│   │   │   ├── dropdown-menu.jsx
│   │   │   ├── form.jsx
│   │   │   ├── hover-card.jsx
│   │   │   ├── input-otp.jsx
│   │   │   ├── input.jsx
│   │   │   ├── label.jsx
│   │   │   ├── loading.jsx
│   │   │   ├── menubar.jsx
│   │   │   ├── navigation-menu.jsx
│   │   │   ├── pagination.jsx
│   │   │   ├── popover.jsx
│   │   │   ├── progress.jsx
│   │   │   ├── radio-group.jsx
│   │   │   ├── resizable.jsx
│   │   │   ├── scroll-area.jsx
│   │   │   ├── select.jsx
│   │   │   ├── separator.jsx
│   │   │   ├── sheet.jsx
│   │   │   ├── sidebar.jsx
│   │   │   ├── skeleton.jsx
│   │   │   ├── slider.jsx
│   │   │   ├── sonner.jsx
│   │   │   ├── switch.jsx
│   │   │   ├── table.jsx
│   │   │   ├── tabs.jsx
│   │   │   ├── textarea.jsx
│   │   │   ├── toggle-group.jsx
│   │   │   ├── toggle.jsx
│   │   │   └── tooltip.jsx
│   │   ├── CongratulationModal.jsx
│   │   ├── DocumentUpload.jsx
│   │   ├── DonateDialog.jsx
│   │   ├── GenerateAudioButton.jsx
│   │   ├── ImageUpload.jsx
│   │   ├── LoadingSpinner.jsx
│   │   ├── ReportCampaignButton.jsx
│   │   └── ScrollAnimation.jsx
│   ├── constants/
│   │   ├── nft/
│   │   │   └── index.js
│   │   ├── enums.js
│   │   ├── index.js
│   │   ├── linkApis.js
│   │   ├── status.js
│   │   └── tokens.js
│   ├── contracts/
│   │   └── abi/
│   │       ├── CharityDonation.json
│   │       ├── CharityHearts.json
│   │       └── IERC20.json
│   ├── hooks/
│   │   ├── use-mobile.jsx
│   │   ├── useAuth.js
│   │   ├── useCampaign.js
│   │   ├── useCategory.js
│   │   ├── useCharityDonation.js
│   │   ├── useCountry.js
│   │   ├── useCreateStep.js
│   │   ├── useDonate.js
│   │   ├── useFundraiseType.js
│   │   ├── useNFTContract.js
│   │   ├── useNFTLeaderboard.js
│   │   ├── useNotificationSound.js
│   │   ├── usePost.js
│   │   ├── useSocket.js
│   │   ├── useTopic.js
│   │   ├── useUserStore.js
│   │   └── useWallet.js
│   ├── lib/
│   ├── module/
│   │   ├── admin/
│   │   └── user/
│   │       ├── components/
│   │       │   ├── Fund/
│   │       │   │   ├── Box/
│   │       │   │   │   ├── FundBox.jsx
│   │       │   │   │   ├── FundBoxActions.jsx
│   │       │   │   │   ├── FundBoxDonateDialog.jsx
│   │       │   │   │   ├── FundBoxDonorList.jsx
│   │       │   │   │   ├── FundBoxHeader.jsx
│   │       │   │   │   └── FundBoxProgress.jsx
│   │       │   │   ├── FundCreator.jsx
│   │       │   │   ├── FundGallery.jsx
│   │       │   │   ├── FundHeader.jsx
│   │       │   │   └── FundMedia.jsx
│   │       │   ├── Profile/
│   │       │   │   ├── NFTGallery.jsx
│   │       │   │   ├── ProfileHeader.jsx
│   │       │   │   └── ProfileInfo.jsx
│   │       │   ├── AudioPlayer.jsx
│   │       │   ├── Banner.jsx
│   │       │   ├── BehindTheBanner.jsx
│   │       │   ├── BehindTheBanner2.jsx
│   │       │   ├── Brand.jsx
│   │       │   ├── CampaignCard.jsx
│   │       │   ├── CommentBox.jsx
│   │       │   ├── CommentForm.jsx
│   │       │   ├── ConfirmMintModal.jsx
│   │       │   ├── CreateProgressDialog.jsx
│   │       │   ├── Discover.jsx
│   │       │   ├── EditProfileForm.jsx
│   │       │   ├── Forbidden.jsx
│   │       │   ├── FundBox.jsx
│   │       │   ├── FundCampaignStatus.jsx
│   │       │   ├── Guide.jsx
│   │       │   ├── Header.jsx
│   │       │   ├── HowWork.jsx
│   │       │   ├── KeyFeature.jsx
│   │       │   ├── MetaMaskAccount.jsx
│   │       │   ├── MintNFTModal.jsx
│   │       │   ├── NFTLeaderboard.jsx
│   │       │   ├── ProgressList.jsx
│   │       │   ├── ShareModal.jsx
│   │       │   ├── TokenSelectModal.jsx
│   │       │   ├── TopDonorsModal.jsx
│   │       │   ├── Topic.jsx
│   │       │   ├── TopicTab.jsx
│   │       │   └── guide.cms.js
│   │       ├── hooks/
│   │       │   ├── useImageUpload.js
│   │       │   └── useNFTs.js
│   │       ├── layouts/
│   │       │   ├── Auth.jsx
│   │       │   ├── AuthLayout.jsx
│   │       │   ├── CreateLayout.jsx
│   │       │   └── MainLayout.jsx
│   │       └── pages/
│   │           ├── Fundraiser/
│   │           │   ├── Category.jsx
│   │           │   ├── Description.jsx
│   │           │   ├── Finish.jsx
│   │           │   ├── Goal.jsx
│   │           │   ├── Media.jsx
│   │           │   ├── Type.jsx
│   │           │   └── editor.css
│   │           ├── About.jsx
│   │           ├── Discover.jsx
│   │           ├── DiscoverBrowse.jsx
│   │           ├── Fund.jsx
│   │           ├── Home.jsx
│   │           ├── Logout.jsx
│   │           ├── MyCampaigns.jsx
│   │           ├── NFTs.jsx
│   │           ├── NotFound.jsx
│   │           ├── Post.jsx
│   │           ├── Profile.jsx
│   │           ├── Search.jsx
│   │           ├── Setting.jsx
│   │           ├── SignIn.jsx
│   │           ├── SignUp.jsx
│   │           └── VerifyEmail.jsx
│   ├── services/
│   │   ├── aiService.js
│   │   ├── authService.js
│   │   ├── axiosInstance.js
│   │   ├── campaignService.js
│   │   ├── categoryService.js
│   │   ├── commentService.js
│   │   ├── countryService.js
│   │   ├── coverService.js
│   │   ├── donationService.js
│   │   ├── fundraiseTypeService.js
│   │   ├── notificationService.js
│   │   ├── postService.js
│   │   ├── reportService.js
│   │   ├── topicService.js
│   │   ├── uploadService.js
│   │   └── userService.js
│   ├── storage/
│   │   └── upload-metadata.js
│   ├── styles/
│   │   ├── globals.css
│   │   └── post.css
│   ├── utils/
│   │   ├── helper.js
│   │   ├── ipfs.js
│   │   ├── metamask.js
│   │   └── nft.js
│   ├── App.jsx
│   ├── index.css
│   ├── main.jsx
│   └── router.jsx
├── .env
├── .gitignore
├── Dockerfile
├── README.md
├── components.json
├── eslint.config.js
├── index.html
├── jsconfig.json
├── nginx.conf
├── package-lock.json
├── package.json
├── postcss.config.js
├── tailwind.config.js
└── vite.config.js
```

## FILE CONTENTS

### vite.config.js
```js
import { defineConfig } from "vite";
import react from "@vitejs/plugin-react-swc";
import path from "path";

// https://vite.dev/config/
export default defineConfig({
  plugins: [react()],
  resolve: {
    alias: {
      "@": path.resolve(
        path.dirname(new URL(import.meta.url).pathname),
        "./src"
      ),
    },
  },
  server: {
    host: true, // Listen on all addresses
    port: 5173,
    strictPort: true,
  },
});

```

### eslint.config.js
```js
import js from '@eslint/js'
import globals from 'globals'
import reactHooks from 'eslint-plugin-react-hooks'
import reactRefresh from 'eslint-plugin-react-refresh'

export default [
  { ignores: ['dist'] },
  {
    files: ['**/*.{js,jsx}'],
    languageOptions: {
      ecmaVersion: 2020,
      globals: globals.browser,
      parserOptions: {
        ecmaVersion: 'latest',
        ecmaFeatures: { jsx: true },
        sourceType: 'module',
      },
    },
    plugins: {
      'react-hooks': reactHooks,
      'react-refresh': reactRefresh,
    },
    rules: {
      ...js.configs.recommended.rules,
      ...reactHooks.configs.recommended.rules,
      'no-unused-vars': ['error', { varsIgnorePattern: '^[A-Z_]' }],
      'react-refresh/only-export-components': [
        'warn',
        { allowConstantExport: true },
      ],
    },
  },
]

```

### postcss.config.js
```js
export default {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}

```

### tailwind.config.js
```js
import { randomizePosition } from "./src/utils/helper";

/** @type {import('tailwindcss').Config} */
export default {
  darkMode: ["class"],
  content: ["./index.html", "./src/**/*.{js,ts,jsx,tsx}"],
  theme: {
    extend: {
      container: {
        center: true,
        padding: "2rem",
        screens: {
          "2xl": "1300px",
        },
      },
      borderRadius: {
        lg: "var(--radius)",
        md: "calc(var(--radius) - 2px)",
        sm: "calc(var(--radius) - 4px)",
      },
      colors: {
        background: "hsl(var(--background))",
        foreground: "hsl(var(--foreground))",
        card: {
          DEFAULT: "hsl(var(--card))",
          foreground: "hsl(var(--card-foreground))",
        },
        popover: {
          DEFAULT: "hsl(var(--popover))",
          foreground: "hsl(var(--popover-foreground))",
        },
        primary: {
          DEFAULT: "hsl(var(--primary))",
          foreground: "hsl(var(--primary-foreground))",
        },
        secondary: {
          DEFAULT: "hsl(var(--secondary))",
          foreground: "hsl(var(--secondary-foreground))",
        },
        muted: {
          DEFAULT: "hsl(var(--muted))",
          foreground: "hsl(var(--muted-foreground))",
        },
        accent: {
          DEFAULT: "hsl(var(--accent))",
          foreground: "hsl(var(--accent-foreground))",
        },
        destructive: {
          DEFAULT: "hsl(var(--destructive))",
          foreground: "hsl(var(--destructive-foreground))",
        },
        border: "hsl(var(--border))",
        input: "hsl(var(--input))",
        ring: "hsl(var(--ring))",
        chart: {
          1: "hsl(var(--chart-1))",
          2: "hsl(var(--chart-2))",
          3: "hsl(var(--chart-3))",
          4: "hsl(var(--chart-4))",
          5: "hsl(var(--chart-5))",
        },
        sidebar: {
          DEFAULT: "hsl(var(--sidebar-background))",
          foreground: "hsl(var(--sidebar-foreground))",
          primary: "hsl(var(--sidebar-primary))",
          "primary-foreground": "hsl(var(--sidebar-primary-foreground))",
          accent: "hsl(var(--sidebar-accent))",
          "accent-foreground": "hsl(var(--sidebar-accent-foreground))",
          border: "hsl(var(--sidebar-border))",
          ring: "hsl(var(--sidebar-ring))",
        },
      },
      keyframes: {
        "accordion-down": {
          from: {
            height: "0",
          },
          to: {
            height: "var(--radix-accordion-content-height)",
          },
        },
        "accordion-up": {
          from: {
            height: "var(--radix-accordion-content-height)",
          },
          to: {
            height: "0",
          },
        },
        gentleFloat: {
          "0%, 100%": {
            transform: `translateY(${randomizePosition(
              -10,
              10
            )}px) translateX(${randomizePosition(-10, 10)}px)`,
          },
          "25%": {
            transform: `translateY(${randomizePosition(
              -20,
              20
            )}px) translateX(${randomizePosition(-20, 20)}px)`,
          },
          "50%": {
            transform: `translateY(${randomizePosition(
              -10,
              10
            )}px) translateX(${randomizePosition(-10, 10)}px)`,
          },
          "75%": {
            transform: `translateY(${randomizePosition(
              -20,
              20
            )}px) translateX(${randomizePosition(-20, 20)}px)`,
          },
        },
        gentleFloat2: {
          "0%, 100%": {
            transform: `translateY(${randomizePosition(
              -10,
              10
            )}px) translateX(${randomizePosition(-10, 10)}px)`,
          },
          "25%": {
            transform: `translateY(${randomizePosition(
              -20,
              20
            )}px) translateX(${randomizePosition(-20, 20)}px)`,
          },
          "50%": {
            transform: `translateY(${randomizePosition(
              -10,
              10
            )}px) translateX(${randomizePosition(-10, 10)}px)`,
          },
          "75%": {
            transform: `translateY(${randomizePosition(
              -20,
              20
            )}px) translateX(${randomizePosition(-20, 20)}px)`,
          },
        },
        gentleFloat3: {
          "0%, 100%": {
            transform: `translateY(${randomizePosition(
              -10,
              10
            )}px) translateX(${randomizePosition(-10, 10)}px)`,
          },
          "25%": {
            transform: `translateY(${randomizePosition(
              -20,
              20
            )}px) translateX(${randomizePosition(-20, 20)}px)`,
          },
          "50%": {
            transform: `translateY(${randomizePosition(
              -10,
              10
            )}px) translateX(${randomizePosition(-10, 10)}px)`,
          },
          "75%": {
            transform: `translateY(${randomizePosition(
              -20,
              20
            )}px) translateX(${randomizePosition(-20, 20)}px)`,
          },
        },
        "bell-shake": {
          "0%, 100%": { transform: "rotate(0deg)" },
          "20%, 60%": { transform: "rotate(8deg)" },
          "40%, 80%": { transform: "rotate(-8deg)" },
        },
      },
      animation: {
        "accordion-down": "accordion-down 0.2s ease-out",
        "accordion-up": "accordion-up 0.2s ease-out",
        gentleFloat1: "gentleFloat 7s ease-in-out infinite",
        gentleFloat2: "gentleFloat2 7s ease-in-out infinite",
        gentleFloat3: "gentleFloat2 7s ease-in-out infinite",
        "bell-shake": "bell-shake 1s infinite",
      },
      fontFamily: {
        sans: ["Space Grotesk", "sans-serif"],
        heading: ["Plus Jakarta Sans", "sans-serif"],
        mono: ["JetBrains Mono", "monospace"],
      },
    },
  },
  // eslint-disable-next-line no-undef
  plugins: [require("tailwindcss-animate"), require("@tailwindcss/typography")],
};

```

### src/main.jsx
```jsx
import { createRoot } from "react-dom/client";
import "./index.css";
import "./styles/globals.css";
import "./styles/post.css";
import router from "./router";
import { RouterProvider } from "react-router-dom";
import { Toaster } from "sonner";
import { QueryClient, QueryClientProvider } from "@tanstack/react-query";
import { ReactQueryDevtools } from "@tanstack/react-query-devtools";
import { HelmetProvider } from "react-helmet-async";
import { NotificationProvider } from "./components/NotificationProvider";
import { WagmiConfig } from "wagmi";
import { wagmiConfig } from "./lib/web3modal";
// import { ThirdwebProvider } from "@thirdweb-dev/react";

const queryClient = new QueryClient();

createRoot(document.getElementById("root")).render(
  // <ThirdwebProvider activeChain="sepolia">
  <HelmetProvider>
    <WagmiConfig config={wagmiConfig}>
      <NotificationProvider>
        <QueryClientProvider client={queryClient}>
          <Toaster position="top-center" />
          <RouterProvider router={router} />
          <ReactQueryDevtools initialIsOpen={false} />
        </QueryClientProvider>
      </NotificationProvider>
    </WagmiConfig>
  </HelmetProvider>
  // </ThirdwebProvider>
);

```

### src/router.jsx
```jsx
import { createBrowserRouter, useLocation } from "react-router-dom";
import { lazy, Suspense, useEffect } from "react";
import NotFound from "./common/NotFound";
import MainLayout from "./module/user/layouts/MainLayout";
import LoadingPage from "./components/LoadingPage";

// Lazy load components
const Home = lazy(() => import("./module/user/pages/Home"));
const About = lazy(() => import("./module/user/pages/About"));
const Search = lazy(() => import("./module/user/pages/Search"));
const VerifyEmail = lazy(() => import("./module/user/pages/VerifyEmail"));
const SignInPage = lazy(() => import("./module/user/pages/SignIn"));
const Post = lazy(() => import("./module/user/pages/Post"));
const Logout = lazy(() => import("./module/user/pages/Logout"));
const SignUpPage = lazy(() => import("./module/user/pages/SignUp"));
const CreateLayout = lazy(() => import("./module/user/layouts/CreateLayout"));
const Category = lazy(() => import("./module/user/pages/Fundraiser/Category"));
const Goal = lazy(() => import("./module/user/pages/Fundraiser/Goal"));
const Type = lazy(() => import("./module/user/pages/Fundraiser/Type"));
const Fund = lazy(() => import("./module/user/pages/Fund"));
const Description = lazy(() =>
  import("./module/user/pages/Fundraiser/Description")
);
const Media = lazy(() => import("./module/user/pages/Fundraiser/Media"));
const Finish = lazy(() => import("./module/user/pages/Fundraiser/Finish"));
const MyCampaigns = lazy(() => import("./module/user/pages/MyCampaigns"));
const Profile = lazy(() => import("./module/user/pages/Profile"));
const Discover = lazy(() => import("./module/user/pages/Discover"));
const Setting = lazy(() => import("./module/user/pages/Setting"));
const NFTs = lazy(() => import("./module/user/pages/NFTs"));
const DiscoverBrowse = lazy(() => import("./module/user/pages/DiscoverBrowse"));

// Loading component

// Wrap component with Suspense
// eslint-disable-next-line no-unused-vars
const withSuspense = (Component) => (
  <Suspense fallback={<LoadingPage />}>
    <Component />
  </Suspense>
);

function ScrollToTop() {
  const { pathname } = useLocation();

  useEffect(() => {
    window.scrollTo({
      top: 0,
      behavior: "smooth",
    });
  }, [pathname]);

  return null;
}

const router = createBrowserRouter([
  {
    path: "/",
    element: (
      <>
        <ScrollToTop />
        <MainLayout />
      </>
    ),
    children: [
      { index: true, element: withSuspense(Home) },
      { path: "about", element: withSuspense(About) },
      { path: "search", element: withSuspense(Search) },
      { path: "profile", element: withSuspense(Profile) },
      { path: "logout", element: withSuspense(Logout) },
      { path: "discover", element: withSuspense(Discover) },
      { path: "settings", element: withSuspense(Setting) },
      { path: "nfts", element: withSuspense(NFTs) },
      { path: "discover/:id", element: withSuspense(DiscoverBrowse) },
      { path: "my-campaigns", element: withSuspense(MyCampaigns) },
      { path: "post/:slug", element: withSuspense(Post) },
      { path: "fund/:id", element: withSuspense(Fund) },
      { path: "*", element: <NotFound /> },
    ],
  },
  {
    path: "/sign-in",
    element: withSuspense(SignInPage),
  },
  {
    path: "/verify-email",
    element: withSuspense(VerifyEmail),
  },
  {
    path: "/sign-up",
    element: withSuspense(SignUpPage),
  },
  {
    path: "/create/fundraiser",
    element: withSuspense(CreateLayout),
    children: [
      {
        path: "category",
        element: withSuspense(Category),
      },
      {
        path: "goal",
        element: withSuspense(Goal),
      },
      {
        path: "types",
        element: withSuspense(Type),
      },
      {
        path: "description",
        element: withSuspense(Description),
      },
      {
        path: "media",
        element: withSuspense(Media),
      },
      {
        path: "finish",
        element: withSuspense(Finish),
      },
    ],
  },
]);

export default router;

```

### src/App.jsx
```jsx
import { WagmiConfig } from "wagmi";
import { wagmiConfig } from "./lib/web3modal";

function App() {
  return (
    <WagmiConfig config={wagmiConfig}>{/* ...rest of your app */}</WagmiConfig>
  );
}

```

### src/constants/status.js
```js
export const CampaignStatus = {
  DRAFT: "DRAFT",
  PENDING: "PENDING",
  APPROVED: "APPROVED",
  REJECTED: "REJECTED",
  ACTIVE: "ACTIVE",
  FINISHED: "FINISHED",
  CANCELLED: "CANCELLED",
};

export const CampaignStatusLabel = {
  DRAFT: "Bản nháp", // Draft
  PENDING: "Chờ duyệt", // Pending approval
  APPROVED: "Đã duyệt", // Approved
  REJECTED: "Từ chối", // Rejected
  ACTIVE: "Đang hoạt động", // Active
  FINISHED: "Đã kết thúc", // Finished
  CANCELLED: "Đã hủy", // Cancelled
};

export const CampaignStatusColors = {
  DRAFT: "#9CA3AF", // Gray
  PENDING: "#F59E0B", // Amber
  APPROVED: "#10B981", // Green
  REJECTED: "#EF4444", // Red
  ACTIVE: "#3B82F6", // Blue
  FINISHED: "#6366F1", // Indigo
  CANCELLED: "#DC2626", // Red
};

```

### src/constants/index.js
```js
export const ADDRESS_ZERO = "0x0000000000000000000000000000000000000000";

export const NotificationType = {
  DONATION: "DONATION",
  COMMENT_REPLY: "COMMENT_REPLY",
  COMMENT: "COMMENT",
  CAMPAIGN_UPDATE: "CAMPAIGN_UPDATE",
  CAMPAIGN_STATUS: "CAMPAIGN_STATUS",
};

```

### src/constants/linkApis.js
```js
export const AuthV1 = {
  LOGIN: "/auth/login",
  REGISTER: "/auth/register",
  GET_PROFILE: "/auth/profile",
  LOGOUT: "/auth/logout",
  VERIFY_EMAIL: "/auth/verify-email",
  RESEND_VERIFICATION_EMAIL: "/auth/resend-otp",
  WEB3_LOGIN: "/auth/web3-login",
};

export const CategoryV1 = {
  GET_CATEGORIES: "/categories",
  GET_CATEGORY: "/categories",
  CREATE_CATEGORY: "/categories",
  UPDATE_CATEGORY: "/categories",
  DELETE_CATEGORY: "/categories",
};

export const CountryV1 = {
  GET_COUNTRIES: "/countries",
  GET_COUNTRY: "/countries",
  CREATE_COUNTRY: "/countries",
  UPDATE_COUNTRY: "/countries",
  DELETE_COUNTRY: "/countries",
};

export const FundraiseTypeV1 = {
  GET_FUNDRAISE_TYPES: "/fundraise-types",
  GET_FUNDRAISE_TYPE: "/fundraise-types",
  CREATE_FUNDRAISE_TYPE: "/fundraise-types",
  UPDATE_FUNDRAISE_TYPE: "/fundraise-types",
  DELETE_FUNDRAISE_TYPE: "/fundraise-types",
};

export const UploadV1 = {
  UPLOADS: "/uploads",
};
export const CoverV1 = {
  CREATE_COVER: "/covers",
};

export const CampaignV1 = {
  GET_CAMPAIGNS: "/campaigns",
  GET_CAMPAIGNS_VALID: "/campaigns/valid",
  GET_CAMPAIGN: "/campaigns",
  CREATE_CAMPAIGN: "/campaigns",
  UPDATE_CAMPAIGN: "/campaigns",
  DELETE_CAMPAIGN: "/campaigns",
  GET_MY_CAMPAIGNS: "/campaigns/my-campaigns",
  GET_CALCULATE_ETH_GOAL: "/campaigns/calculate-eth-goal",
  GET_CALCULATE_GOAL: "/campaigns/calculate-goal",
  CREATE_CAMPAIGN_PROGRESS: "/campaigns/",
  GET_CAMPAIGN_PROGRESS: "/campaigns/",
};

export const DonationV1 = {
  GET_DONATIONS: "/donations",
  GET_DONATION: "/donations",
  CREATE_DONATION: "/donations",
  UPDATE_DONATION: "/donations",
  DELETE_DONATION: "/donations",
};

export const CommentV1 = {
  GET_COMMENTS: "/comments",
  GET_COMMENT: "/comments",
  CREATE_COMMENT: "/comments",
  UPDATE_COMMENT: "/comments",
  DELETE_COMMENT: "/comments",
  GET_COMMENT_BY_CAMPAIGN: "/comments/campaign",
  LIKE_COMMENT: "/comments/",
};

export const UserV1 = {
  GET_USERS: "/users",
  GET_USER: "/users",
  CREATE_USER: "/users",
  UPDATE_USER: "/users",
  DELETE_USER: "/users",
};

export const AiV1 = {
  AI_ANALYZE_CAMPAIGN: "/ai/analyze-campaign-gemini",
  AI_OPTIMIZE_CAMPAIGN: "/ai/optimize-campaign",
  AI_RECOMMENDATIONS: "/ai/recommendations",
  AI_CAMPAIGN_AUDIO: "/ai/campaigns/",
};

export const NotificationV1 = {
  GET_NOTIFICATIONS: "/notifications",
  GET_NOTIFICATION: "/notifications",
  CREATE_NOTIFICATION: "/notifications",
  UPDATE_NOTIFICATION: "/notifications",
  DELETE_NOTIFICATION: "/notifications",
  READ_NOTIFICATION: "/notifications",
  MARK_ALL_AS_READ: "/notifications/mark-all-read",
  UNREAD_COUNT: "/notifications/unread-count",
};

export const TopicV1 = {
  GET_TOPICS: "/topics",
  GET_TOPIC: "/topics",
  CREATE_TOPIC: "/topics",
  UPDATE_TOPIC: "/topics",
  DELETE_TOPIC: "/topics",
};

export const PostV1 = {
  GET_POSTS: "/posts",
  GET_POST: "/posts",
  CREATE_POST: "/posts",
  UPDATE_POST: "/posts",
  DELETE_POST: "/posts",
  GET_POST_BY_SLUG: "/posts/slug",
};

export const ReportV1 = {
  GET_REPORTS: "/reports",
  GET_REPORT: "/reports",
  CREATE_REPORT: "/reports",
};

```

### src/constants/enums.js
```js
export const ReportType = {
  SPAM: "SPAM",
  ILLEGAL: "ILLEGAL",
};

```

### src/constants/tokens.js
```js
// export const TOKENS = {
//   USDC: {
//     address: "0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48",
//     decimals: 6,
//     symbol: "USDC",
//   },
//   USDT: {
//     address: "0xdAC17F958D2ee523a2206206994597C13D831ec7",
//     decimals: 6,
//     symbol: "USDT",
//   },
// };

```

### src/constants/nft/index.js
```js
export const NFT_RARITY = Object.freeze({
  COMMON: {
    id: 0,
    color: "#B0B0B0",
    label: "Phổ biến",
    chance: "50%",
    images: [
      "https://bafybeickqeu74vm5oc6627xhuabecmdwu5b77ctutkltvyjgqwxr2es5mm.ipfs.w3s.link",
    ],
  },
  UNCOMMON: {
    id: 1,
    color: "#50C878",
    label: "Không phổ biến",
    chance: "30%",
    images: [
      "https://bafybeib73t4bs5sa3f3g3djsstzx7nfzgxag2yskhndqq264q4lsmgaj5u.ipfs.w3s.link",
    ],
  },
  RARE: {
    id: 2,
    color: "#4169E1",
    label: "Hiếm",
    chance: "15%",
    images: [
      "https://bafybeibzhqkke6vb6zrqepjovkpvceen4zl7tyiw4z2knvaf6rhpphup4q.ipfs.w3s.link",
    ],
  },
  EPIC: {
    id: 3,
    color: "#9400D3",
    label: "Cực hiếm",
    chance: "4.95%",
    images: [
      "https://bafybeidvtrq62zynneguic3sqggbtkuip5fsvwmowkri236r4ujnzwdyue.ipfs.w3s.link",
    ],
  },
  LEGENDARY: {
    id: 4,
    color: "#FFD700",
    label: "Huyền thoại",
    chance: "0.05%",
    images: [
      "https://bafybeietxpzwec6loebrxfqd2wbymgimlscjftbnydgbb5ghygfy2yntta.ipfs.w3s.link",
    ],
  },
});

```

### src/common/NotFound.jsx
```jsx
import React from "react";
import { Button } from "@/components/ui/button";
import { Link } from "react-router-dom";
import { Home } from "lucide-react";

const NotFound = () => {
  return (
    <div className="h-screen w-screen flex items-center justify-center flex-col bg-gray-50">
      <div className="text-center space-y-6">
        <img
          src="/undraw_back-home_3dun.svg"
          alt="404 illustration"
          className="w-80 h-8w-80 mx-auto"
        />

        <h1 className="text-4xl font-bold text-gray-900">
          Oops! Trang không tồn tại
        </h1>

        <p className="text-gray-600 max-w-md mx-auto pb-6">
          Trang bạn đang tìm kiếm có thể đã bị xóa, đổi tên hoặc tạm thời không
          khả dụng.
        </p>

        <Link to="/">
          <Button variant="default" className="gap-2" size="lg">
            <Home className="w-4 h-4" />
            Trở về trang chủ
          </Button>
        </Link>
      </div>
    </div>
  );
};

export default NotFound;

```

### src/storage/upload-metadata.js
```js
import axios from "axios";

const PINATA_API_KEY = import.meta.env.VITE_PINATA_API_KEY;
const PINATA_SECRET_KEY = import.meta.env.VITE_PINATA_SECRET_KEY;

export async function uploadMetadata(metadata) {
  try {
    const response = await axios.post(
      "https://api.pinata.cloud/pinning/pinJSONToIPFS",
      metadata,
      {
        headers: {
          "Content-Type": "application/json",
          pinata_api_key: PINATA_API_KEY,
          pinata_secret_api_key: PINATA_SECRET_KEY,
        },
      }
    );

    return `ipfs://${response.data.IpfsHash}`;
  } catch (error) {
    console.error("Error uploading to Pinata:", error);
    throw error;
  }
}

```

### src/hooks/useNotificationSound.js
```js
export const useNotificationSound = () => {
  const playNotificationSound = () => {
    const audio = new Audio("/sounds/notification-sound.mp3");
    audio.volume = 0.5;

    const playPromise = audio.play();
    if (playPromise !== undefined) {
      playPromise.catch((error) => {
        console.error("Error playing sound:", error);
      });
    }
  };

  return { playNotificationSound };
};

```

### src/hooks/useWallet.js
```js
import { useAccount, useSignMessage, useDisconnect, useChainId } from "wagmi";
import { useWeb3Modal } from "@web3modal/wagmi/react";
import { loginWithWeb3 } from "@/services/authService";
import { toast } from "sonner";
import { useNavigate } from "react-router-dom";

// 1. Ký message
export function useWallet() {
  const { open } = useWeb3Modal();
  const { address, isConnected } = useAccount();
  const { disconnect: disconnectWallet } = useDisconnect();
  const chainId = useChainId();
  const { signMessage, signMessageAsync } = useSignMessage();
  const navigate = useNavigate();

  const connect = async () => {
    try {
      await open();
      return true;
    } catch (error) {
      console.error("Failed to connect:", error);
      return false;
    }
  };

  const disconnect = async () => {
    try {
      await disconnectWallet();
    } catch (error) {
      console.error("Failed to disconnect:", error);
    }
  };

  const handleWeb3Login = async () => {
    try {
      if (!isConnected) {
        const connected = await connect();
        if (!connected) {
          toast.error("Không thể kết nối ví");
          return;
        }
      }

      if (!address) {
        toast.error("Không tìm thấy địa chỉ ví");
        return;
      }

      const message = `Chain4Good login: ${address}`;
      const signature = await signMessageAsync({ message });
      const res = await loginWithWeb3(address, signature);

      if (res.data) {
        toast.success("Đăng nhập thành công");
        navigate("/");
        return res.data;
      }
    } catch (error) {
      console.error("Web3 login failed:", error);
      if (error.code === "ACTION_REJECTED") {
        toast.error("Bạn đã từ chối ký tin nhắn");
      } else {
        toast.error("Đăng nhập thất bại: " + error.message);
      }
    }
  };

  return {
    address,
    isConnected,
    chainId,
    connect,
    disconnect,
    signMessage,
    handleWeb3Login,
  };
}

```

### src/hooks/useCharityDonation.js
```js
import { useMemo, useCallback } from "react";
import { ethers } from "ethers";
import CharityDonationABI from "../contracts/abi/CharityDonation.json";
import { updateCampaign } from "@/services/campaignService";

const CONTRACT_ADDRESS = "0xa0A6fB7ef8A68E24e6D0C400e5b731D80BAD97bD";

// Constants for better maintainability
const GAS_LIMIT_MULTIPLIER = 1.2; // 20% buffer
const DEFAULT_GAS_LIMIT = 300000;

export const TOKEN = {
  USDC: {
    address: "0x94a9D9AC8a22534E3FaCa9F4e7F2E2cf85d5E4C8",
    decimals: 6,
    symbol: "USDC",
    icon: "/icons/usdc.svg",
    tokenName: "usd-coin",
    description: "Đồng stablecoin được neo với USD",
    name: "USD Coin",
  },
  ETH: {
    address: ethers.ZeroAddress,
    decimals: 18,
    symbol: "ETH",
    icon: "/icons/eth.svg",
    tokenName: "ethereum",
    description: "Token gốc của mạng lưới Ethereum",
    name: "Ethereum",
  },
  USDT: {
    address: "0xaA8E23Fb1079EA71e0a56F48a2aA51851D8433D0",
    decimals: 6,
    symbol: "USDT",
    tokenName: "tether",
    icon: "/icons/usdt.svg",
    description: "Đồng stablecoin được neo với USD",
    name: "Tether USD",
  },
  DAI: {
    address: "0xFF34B3d4Aee8ddCd6F9AFFFB6Fe49bD371b8a357",
    decimals: 18,
    symbol: "DAI",
    tokenName: "dai",
    icon: "/icons/dai.svg",
    description: "Đồng stablecoin phi tập trung được neo với USD",
    name: "DAI Stablecoin",
  },
  LINK: {
    address: "0xf8Fb3713D459D7C1018BD0A49D19b4C44290EBE5",
    decimals: 18,
    symbol: "LINK",
    tokenName: "chainlink",
    icon: "/icons/chainlink.svg",
    description: "Token của mạng lưới Oracle phi tập trung",
    name: "Chainlink",
  },
};

// Error messages for better maintainability
const ERROR_MESSAGES = {
  NO_METAMASK: "MetaMask chưa được cài đặt",
  USER_REJECTED: "Người dùng từ chối kết nối ví",
  WALLET_NOT_CONNECTED: "Vui lòng kết nối ví MetaMask trước",
  INSUFFICIENT_FUNDS: "Không đủ ETH để thực hiện giao dịch (bao gồm phí gas)",
  TRANSACTION_REJECTED: "Người dùng từ chối giao dịch",
  INSUFFICIENT_TOKEN: "Số dư token không đủ",
  APPROVAL_FAILED: "Token approval thất bại",
  NEED_APPROVAL: "Cần phê duyệt token - vui lòng thử lại",
};

export const useCharityDonation = () => {
  // Memoized contract getter with better error handling
  const getContract = useCallback(async () => {
    if (!window.ethereum) {
      throw new Error(ERROR_MESSAGES.NO_METAMASK);
    }

    try {
      await window.ethereum.request({
        method: "eth_requestAccounts",
      });

      const provider = new ethers.BrowserProvider(window.ethereum);
      const signer = await provider.getSigner();

      return new ethers.Contract(
        CONTRACT_ADDRESS,
        CharityDonationABI.abi,
        signer
      );
    } catch (error) {
      if (error.code === 4001) {
        throw new Error(ERROR_MESSAGES.USER_REJECTED);
      }
      if (error.code === 4100) {
        throw new Error(ERROR_MESSAGES.WALLET_NOT_CONNECTED);
      }
      throw error;
    }
  }, []);

  // Helper function for gas estimation
  const estimateGasWithBuffer = useCallback(
    async (contract, method, params, overrides = {}) => {
      try {
        const gasEstimate = await contract[method].estimateGas(
          ...params,
          overrides
        );
        return (
          (gasEstimate * BigInt(Math.floor(GAS_LIMIT_MULTIPLIER * 10))) /
          BigInt(10)
        );
      } catch (error) {
        console.warn("Gas estimation failed, using default:", error);
        return BigInt(DEFAULT_GAS_LIMIT);
      }
    },
    []
  );

  // Helper function to handle BigInt serialization
  const sanitizeErrorMessage = useCallback((message) => {
    return message.replace(/BigInt\((.*?)\)/g, "$1");
  }, []);

  // Optimized campaign creation
  const createCampaign = useCallback(
    async (title, tokenAddress, goal, duration, isNoLimit) => {
      try {
        const contract = await getContract();

        const goalBigNumber = ethers.getBigInt(goal.toString());
        const durationNumber = Number(duration);

        const gasLimit = await estimateGasWithBuffer(
          contract,
          "createCampaign",
          [title, tokenAddress, goalBigNumber, durationNumber, isNoLimit]
        );

        const tx = await contract.createCampaign(
          title,
          tokenAddress,
          goalBigNumber,
          durationNumber,
          isNoLimit,
          { gasLimit }
        );

        await tx.wait();
        const count = await contract.campaignCount();

        return {
          chainCampaignId: Number(count) - 1,
          txHash: tx.hash,
        };
      } catch (error) {
        console.error("Create campaign error:", error);
        const errorMessage = sanitizeErrorMessage(error.message);
        throw new Error(errorMessage);
      }
    },
    [getContract, estimateGasWithBuffer, sanitizeErrorMessage]
  );

  // Optimized ETH donation
  const donateETH = useCallback(
    async (campaignId, amountInEther) => {
      try {
        const contract = await getContract();
        const provider = new ethers.BrowserProvider(window.ethereum);
        const signer = await provider.getSigner();
        const userAddress = await signer.getAddress();

        const balance = await provider.getBalance(userAddress);
        const amountInWei = ethers.parseEther(amountInEther);

        // Estimate gas costs
        const feeData = await provider.getFeeData();
        const gasPrice = feeData.gasPrice;
        const gasLimit = await estimateGasWithBuffer(
          contract,
          "donate",
          [campaignId, amountInWei],
          { value: amountInWei }
        );

        const gasCost = gasLimit * gasPrice;
        const totalCost = amountInWei + gasCost;

        if (balance < totalCost) {
          const requiredETH = ethers.formatEther(totalCost);
          const userETH = ethers.formatEther(balance);
          throw new Error(
            `Không đủ ETH. Cần: ${requiredETH} ETH (bao gồm phí gas), Có: ${userETH} ETH`
          );
        }

        const tx = await contract.donate(campaignId, amountInWei, {
          value: amountInWei,
          gasLimit,
          gasPrice,
        });

        const receipt = await tx.wait();

        return {
          txHash: tx.hash,
          receipt,
        };
      } catch (error) {
        console.error("Donation error:", error);

        if (error.code === "INSUFFICIENT_FUNDS") {
          throw new Error(ERROR_MESSAGES.INSUFFICIENT_FUNDS);
        }

        throw error;
      }
    },
    [getContract, estimateGasWithBuffer]
  );

  // Optimized token donation with better error handling
  const donateToken = useCallback(
    async (campaignId, tokenAddress, amount, decimals = 18) => {
      try {
        const provider = new ethers.BrowserProvider(window.ethereum);
        const signer = await provider.getSigner();
        const userAddress = await signer.getAddress();

        // Token contract interface
        const tokenABI = [
          "function approve(address spender, uint256 amount) public returns (bool)",
          "function allowance(address owner, address spender) public view returns (uint256)",
          "function balanceOf(address account) public view returns (uint256)",
          "function decimals() public view returns (uint8)",
        ];

        const tokenContract = new ethers.Contract(
          tokenAddress,
          tokenABI,
          signer
        );

        // Verify and get actual decimals
        const actualDecimals = await tokenContract.decimals();
        if (actualDecimals !== decimals) {
          console.warn(
            `Token decimals mismatch. Expected: ${decimals}, Actual: ${actualDecimals}`
          );
          decimals = actualDecimals;
        }

        const parsedAmount = ethers.parseUnits(amount.toString(), decimals);

        // Check token balance
        const balance = await tokenContract.balanceOf(userAddress);
        if (balance < parsedAmount) {
          throw new Error(
            `Không đủ token. Có: ${ethers.formatUnits(
              balance,
              decimals
            )}, Cần: ${amount}`
          );
        }

        // Check and handle allowance
        const currentAllowance = await tokenContract.allowance(
          userAddress,
          CONTRACT_ADDRESS
        );

        if (currentAllowance < parsedAmount) {
          const approveTx = await tokenContract.approve(
            CONTRACT_ADDRESS,
            parsedAmount
          );
          const approveReceipt = await approveTx.wait();

          if (!approveReceipt.status) {
            throw new Error(ERROR_MESSAGES.APPROVAL_FAILED);
          }

          // Verify approval
          const newAllowance = await tokenContract.allowance(
            userAddress,
            CONTRACT_ADDRESS
          );
          if (newAllowance < parsedAmount) {
            throw new Error(ERROR_MESSAGES.APPROVAL_FAILED);
          }
        }

        // Execute donation
        const contract = await getContract();
        const gasLimit = await estimateGasWithBuffer(contract, "donate", [
          campaignId,
          parsedAmount,
        ]);

        const tx = await contract.donate(campaignId, parsedAmount, {
          gasLimit,
        });
        const receipt = await tx.wait();

        if (!receipt.status) {
          throw new Error("Giao dịch quyên góp thất bại");
        }

        return {
          txHash: tx.hash,
          receipt,
        };
      } catch (error) {
        console.error("Token donation error:", error);

        if (error.code === "ACTION_REJECTED") {
          throw new Error(ERROR_MESSAGES.TRANSACTION_REJECTED);
        }

        if (error.message.includes("allowance")) {
          throw new Error(ERROR_MESSAGES.NEED_APPROVAL);
        }

        if (error.message.includes("insufficient")) {
          throw new Error(ERROR_MESSAGES.INSUFFICIENT_TOKEN);
        }

        throw new Error(error.message || "Quyên góp token thất bại");
      }
    },
    [getContract, estimateGasWithBuffer]
  );

  // Event listener helper with cleanup
  const createEventListener = useCallback(
    (eventName, callback) => {
      return async (campaignId, dbCampaignId) => {
        const contract = await getContract();

        const eventHandler = async (...args) => {
          console.log(`${eventName} event:`, args);
          try {
            await callback(dbCampaignId, ...args);
          } catch (error) {
            console.error(`Error handling ${eventName} event:`, error);
          }
        };

        contract.on(eventName, eventHandler);

        return () => {
          contract.off(eventName, eventHandler);
        };
      };
    },
    [getContract]
  );

  // Optimized contract read operations
  const getContractData = useCallback(
    async (method, ...args) => {
      try {
        const contract = await getContract();
        return await contract[method](...args);
      } catch (error) {
        console.error(`Error calling ${method}:`, error);
        throw error;
      }
    },
    [getContract]
  );

  return useMemo(
    () => ({
      // Campaign operations
      createCampaign,

      // Donation operations
      donateETH,
      donateToken,

      // Contract read operations
      getDonors: (campaignId) => getContractData("getDonors", campaignId),
      getCampaignStatus: (campaignId) =>
        getContractData("getCampaignStatus", campaignId),
      getCampaign: (campaignId) => getContractData("campaigns", campaignId),
      getCampaignCount: () => getContractData("campaignCount"),

      // Campaign management
      refund: async (campaignId) => {
        const contract = await getContract();
        const tx = await contract.refund(campaignId);
        await tx.wait();
      },

      closeCampaign: async (campaignId) => {
        try {
          const contract = await getContract();
          const gasLimit = await estimateGasWithBuffer(
            contract,
            "closeCampaign",
            [campaignId]
          );
          const tx = await contract.closeCampaign(campaignId, { gasLimit });
          const receipt = await tx.wait();

          return {
            txHash: tx.hash,
            receipt,
          };
        } catch (error) {
          console.error("Close campaign error:", error);
          if (error.code === "ACTION_REJECTED") {
            throw new Error(ERROR_MESSAGES.TRANSACTION_REJECTED);
          }
          throw error;
        }
      },

      // Advanced queries
      getCampaignCloseHistory: async (campaignId) => {
        try {
          const accounts = await window.ethereum.request({
            method: "eth_accounts",
          });
          if (!accounts || accounts.length === 0) {
            throw new Error("Vui lòng kết nối ví để xem thông tin này");
          }

          const history = await getContractData(
            "getCampaignCloseHistory",
            campaignId
          );
          return {
            isClosed: history[0],
            closeReason: history[1],
            goalReached: history[2],
            totalRaised: history[3],
          };
        } catch (error) {
          console.error("Get campaign close history error:", error);
          throw error;
        }
      },

      getDonorInfo: async (campaignId, donorAddress) => {
        try {
          const info = await getContractData(
            "getDonorInfo",
            campaignId,
            donorAddress
          );
          return {
            totalAmount: info[0],
            donationCount: info[1],
            lastDonationTime: info[2],
          };
        } catch (error) {
          console.error("Get donor info error:", error);
          throw error;
        }
      },

      // Event listeners
      listenToFundsWithdrawn: createEventListener(
        "FundsWithdrawn",
        async (dbCampaignId) => {
          await updateCampaign(dbCampaignId, { status: "FINISHED" });
        }
      ),

      listenToCampaignClosed: createEventListener(
        "CampaignClosed",
        async (dbCampaignId, _campaignId, reachedGoal) => {
          await updateCampaign(dbCampaignId, {
            status: reachedGoal ? "FINISHED" : "CANCELLED",
          });
        }
      ),

      listenToDonationMade: async (campaignId, callback) => {
        const contract = await getContract();

        const donationHandler = async (_campaignId, donor, amount) => {
          console.log("DonationMade event:", {
            campaignId: Number(_campaignId),
            donor,
            amount: amount.toString(),
          });

          if (Number(_campaignId) === Number(campaignId) && callback) {
            callback();
          }
        };

        contract.on("DonationMade", donationHandler);

        return () => {
          contract.off("DonationMade", donationHandler);
        };
      },
    }),
    [
      createCampaign,
      donateETH,
      donateToken,
      getContractData,
      estimateGasWithBuffer,
      createEventListener,
      getContract,
    ]
  );
};

```

### src/hooks/useNFTLeaderboard.js
```js
import { useState, useEffect, useCallback } from "react";
import { ethers } from "ethers";
import CharityHeartsABI from "../contracts/abi/CharityHearts.json";

const contractAddress = "0x80c5FCa4E56bF2e48C0CA40b2b30E8C719cdf19C";

export const useNFTLeaderboard = () => {
  const [leaderboard, setLeaderboard] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  // Lấy tất cả events NFTMinted
  const fetchMintEvents = useCallback(async () => {
    try {
      const provider = new ethers.BrowserProvider(window.ethereum);
      const contract = new ethers.Contract(
        contractAddress,
        CharityHeartsABI.abi,
        provider
      );

      // 1. Kiểm tra events
      const currentBlock = await provider.getBlockNumber();
      console.log("Current block:", currentBlock);

      const fromBlock = Math.max(0, currentBlock - 5000);
      console.log("Fetching events from block:", fromBlock);

      const events = await contract.queryFilter(
        contract.filters.NFTMinted(),
        fromBlock,
        "latest"
      );
      console.log("Found events:", events);

      // 2. Kiểm tra event args
      const mintCounts = events.reduce((acc, event) => {
        console.log("Event:", event);
        console.log("Event args:", event.args);
        const address = event.args[0]; // Thử lấy argument đầu tiên thay vì .to
        if (address) {
          acc[address] = (acc[address] || 0) + 1;
        }
        return acc;
      }, {});
      console.log("Mint counts:", mintCounts);

      // 3. Chuyển đổi thành array
      const leaderboardArray = Object.entries(mintCounts)
        .map(([address, count]) => ({
          address,
          count,
          // Thêm shortAddress để hiển thị
          shortAddress: `${address.slice(0, 6)}...${address.slice(-4)}`,
        }))
        .sort((a, b) => b.count - a.count);

      console.log("Final leaderboard:", leaderboardArray);

      setLeaderboard(leaderboardArray);
      setLoading(false);
    } catch (err) {
      console.error("Error fetching events:", err);
      setError(err.message);
      setLoading(false);
    }
  }, []);

  // Fetch data khi component mount
  useEffect(() => {
    fetchMintEvents();

    // Lắng nghe event mới
    const provider = new ethers.BrowserProvider(window.ethereum);
    const contract = new ethers.Contract(
      contractAddress,
      CharityHeartsABI.abi,
      provider
    );

    const handleNewMint = (to, tokenId, uri) => {
      fetchMintEvents(); // Refresh leaderboard
    };

    contract.on("NFTMinted", handleNewMint);

    return () => {
      contract.off("NFTMinted", handleNewMint);
    };
  }, [fetchMintEvents]);

  return { leaderboard, loading, error };
};

```

### src/hooks/useAuth.js
```js
import { getProfile } from "@/services/authService";
import { useQuery } from "@tanstack/react-query";

export const useProfile = () => {
  return useQuery({
    queryKey: ["profile"],
    queryFn: () => getProfile(),
  });
};

```

### src/hooks/useFundraiseType.js
```js
import { getFundraiseTypes } from "@/services/fundraiseTypeService";
import { useQuery } from "@tanstack/react-query";

export const useFundraiseType = () => {
  return useQuery({
    queryKey: ["fundraiseTypes"],
    queryFn: () => getFundraiseTypes(),
  });
};

```

### src/hooks/useNFTContract.js
```js
const CONTRACT_ADDRESS = "0x80c5FCa4E56bF2e48C0CA40b2b30E8C719cdf19C";

import { useState, useEffect, useCallback } from "react";
import { ethers } from "ethers";
import CharityHeartsABI from "../contracts/abi/CharityHearts.json";
import { uploadMetadata } from "@/storage/upload-metadata";

const mintPrice = ethers.parseEther("0.000001");

export const useCharityHearts = () => {
  const [contract, setContract] = useState(null);
  const [account, setAccount] = useState(null);
  const [error, setError] = useState(null);
  const [isLoading, setIsLoading] = useState(false);

  const initContract = useCallback(async () => {
    if (typeof window.ethereum === "undefined") {
      setError("Please install MetaMask!");
      return;
    }

    try {
      const [selectedAccount] = await window.ethereum.request({
        method: "eth_requestAccounts",
      });

      // Thay đổi từ providers.Web3Provider sang BrowserProvider
      const provider = new ethers.BrowserProvider(window.ethereum);
      const signer = await provider.getSigner(); // Thêm await vì getSigner() giờ là async

      const charityHearts = new ethers.Contract(
        CONTRACT_ADDRESS,
        CharityHeartsABI.abi,
        signer
      );

      setContract(charityHearts);
      setAccount(selectedAccount);
      setError(null);
    } catch (err) {
      setError(err.message);
      setContract(null);
      setAccount(null);
    }
  }, []);

  useEffect(() => {
    initContract();

    const handleAccountsChanged = (accounts) => {
      if (accounts.length === 0) {
        setAccount(null);
        setContract(null);
      } else {
        setAccount(accounts[0]);
        initContract();
      }
    };

    const handleChainChanged = () => {
      window.location.reload();
    };

    // Subscribe to events
    if (window.ethereum) {
      window.ethereum.on("accountsChanged", handleAccountsChanged);
      window.ethereum.on("chainChanged", handleChainChanged);
    }

    // Cleanup function
    return () => {
      if (window.ethereum) {
        window.ethereum.removeListener(
          "accountsChanged",
          handleAccountsChanged
        );
        window.ethereum.removeListener("chainChanged", handleChainChanged);
      }
    };
  }, [initContract]);

  const mintNFT = useCallback(
    async (metadata) => {
      if (!contract) return;
      if (!metadata || !metadata.image || !metadata.name) {
        setError("Metadata must include image and name.");
        return;
      }

      setIsLoading(true);
      try {
        const data = await uploadMetadata(metadata);
        if (!data) {
          setError("Failed to upload metadata.");
          return;
        }
        const tx = await contract.publicMint(data, {
          value: mintPrice,
        });
        await tx.wait();
        return tx;
      } catch (err) {
        setError(err.message);
      } finally {
        setIsLoading(false);
      }
    },
    [contract]
  );

  const getUserNFTs = useCallback(async () => {
    if (!contract || !account) return [];
    try {
      const tokens = await contract.tokensOfOwner(account);
      const nfts = await Promise.all(
        tokens.map(async (tokenId) => {
          const [tokenURI, owner] = await Promise.all([
            contract.tokenURI(tokenId),
            contract.ownerOf(tokenId),
          ]);

          return {
            tokenId: tokenId.toString(),
            tokenURI,
          };
        })
      );
      return nfts;
    } catch (err) {
      setError(err.message);
      return [];
    }
  }, [contract, account]);

  // Thêm hàm getNFTLeaderboard
  const getNFTLeaderboard = useCallback(async () => {
    if (!contract) return [];
    try {
      // Lấy các event trong 10000 block gần nhất
      const provider = new ethers.BrowserProvider(window.ethereum);
      const currentBlock = await provider.getBlockNumber();
      const fromBlock = Math.max(0, currentBlock - 10000);

      const events = await contract.queryFilter(
        contract.filters.Transfer(),
        fromBlock,
        "latest"
      );

      const nftCounts = events.reduce((acc, event) => {
        const to = event.args[1];
        if (to && to !== ethers.ZeroAddress) {
          acc[to] = (acc[to] || 0) + 1;
        }
        return acc;
      }, {});
      console.log("NFT Counts:", nftCounts);

      const leaderboard = await Promise.all(
        Object.entries(nftCounts).map(async ([address, count]) => {
          const nfts = await contract.tokensOfOwner(address);
          return {
            address,
            count: nfts.length,
            totalMinted: count,
            shortAddress: `${address.slice(0, 6)}...${address.slice(-4)}`,
          };
        })
      );

      return leaderboard.sort((a, b) => b.count - a.count);
    } catch (err) {
      console.error("Error fetching leaderboard:", err);
      setError(err.message);
      return [];
    }
  }, [contract]);

  const getContractInfo = useCallback(async () => {
    if (!contract) return null;
    try {
      const [maxSupply, totalSupply, maxMintPerAddress, mintedByUser] =
        await Promise.all([
          contract.maxSupply(),
          contract.totalSupply(),
          contract.maxMintPerAddress(),
          contract.mintedByAddress(account),
        ]);

      return {
        maxSupply: maxSupply.toString(),
        totalSupply: totalSupply.toString(),
        maxMintPerAddress: maxMintPerAddress.toString(),
        mintedByUser: mintedByUser.toString(),
      };
    } catch (err) {
      setError(err.message);
      return null;
    }
  }, [contract, account]);

  return {
    contract,
    account,
    error,
    isLoading,
    mintNFT,
    getUserNFTs,
    getContractInfo,
    getNFTLeaderboard, // Thêm hàm mới vào đây
  };
};

```

### src/hooks/useUserStore.js
```js
import { create } from "zustand";

const useUserStore = create((set) => ({
  user: null,
  isAuthenticated: false,
  accessToken: null,
  userData: null,
  setUserData: (userData) =>
    set({
      userData: userData,
    }),

  setUser: (userData) =>
    set({
      user: userData,
      isAuthenticated: true,
    }),

  setAccessToken: (token) =>
    set({
      accessToken: token,
    }),

  logout: () =>
    set({
      user: null,
      isAuthenticated: false,
      accessToken: null,
    }),

  updateUser: (userData) =>
    set((state) => ({
      user: {
        ...state.user,
        ...userData,
      },
    })),
}));

export default useUserStore;

```

### src/hooks/useCreateStep.js
```js
import { create } from "zustand";

const useCreateStep = create((set, get) => ({
  steps: [
    {
      title: "Danh mục",
      description: "Chọn danh mục gây quỹ phù hợp với chiến dịch của bạn",
      slug: "/create/fundraiser/category",
    },
    {
      title: "Mục tiêu",
      description: "Thiết lập mục tiêu gây quỹ và thời hạn chiến dịch",
      slug: "/create/fundraiser/goal",
    },
    {
      title: "Hình thức",
      description: "Lựa chọn hình thức gây quỹ (cá nhân, tổ chức, dự án...)",
      slug: "/create/fundraiser/types",
    },
    {
      title: "Nội dung",
      description:
        "Mô tả chi tiết về chiến dịch, mục đích và kế hoạch sử dụng quỹ",
      slug: "/create/fundraiser/description",
    },
    {
      title: "Hình ảnh/Video",
      description: "Thêm hình ảnh, video để minh họa cho chiến dịch của bạn",
      slug: "/create/fundraiser/media",
    },
    {
      title: "Hoàn tất",
      description: "Xem lại và hoàn tất thiết lập chiến dịch gây quỹ",
      slug: "/create/fundraiser/finish",
    },
  ],
  currentStep: 0,

  // Đặt bước hiện tại
  setStep: (stepIndex) => {
    if (stepIndex >= 0 && stepIndex < get().steps.length) {
      set({ currentStep: stepIndex });
    }
  },

  // Chuyển đến bước tiếp theo
  nextStep: () => {
    const { currentStep, steps } = get();
    if (currentStep < steps.length - 1) {
      set({ currentStep: currentStep + 1 });
    }
  },

  // Quay lại bước trước
  prevStep: () => {
    const { currentStep } = get();
    if (currentStep > 0) {
      set({ currentStep: currentStep - 1 });
    }
  },

  // Kiểm tra có thể đi tiếp
  canGoNext: () => {
    const { currentStep, steps } = get();
    return currentStep < steps.length - 1;
  },

  // Kiểm tra có thể quay lại
  canGoPrev: () => {
    const { currentStep } = get();
    return currentStep > 0;
  },
}));

export default useCreateStep;

```

### src/hooks/use-mobile.jsx
```jsx
import * as React from "react"

const MOBILE_BREAKPOINT = 768

export function useIsMobile() {
  const [isMobile, setIsMobile] = React.useState(undefined)

  React.useEffect(() => {
    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)
    const onChange = () => {
      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)
    }
    mql.addEventListener("change", onChange)
    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)
    return () => mql.removeEventListener("change", onChange);
  }, [])

  return !!isMobile
}

```

### src/hooks/useCountry.js
```js
import { getCountries } from "@/services/countryService";
import { useQuery } from "@tanstack/react-query";

export const useCountry = () => {
  return useQuery({
    queryKey: ["countries"],
    queryFn: () => getCountries(),
  });
};

```

### src/hooks/usePost.js
```js
import { getPosts } from "@/services/postService";
import { useQuery } from "@tanstack/react-query";

export const usePost = (filters) => {
  return useQuery({
    queryKey: ["posts", filters],
    queryFn: () => getPosts(filters),
  });
};

```

### src/hooks/useDonate.js
```js
import { useState } from "react";
import { useCharityDonation } from "./useCharityDonation";
import { generateNFTMetadata } from "@/utils/nft";
import { createDonation } from "@/services/donationService";
import { TOKEN } from "./useCharityDonation";

export const useDonate = () => {
  const [isLoading, setIsLoading] = useState(false);
  const { donateETH, donateToken } = useCharityDonation();

  const donate = async (params) => {
    const { campaign, amount, selectedToken, user } = params;

    if (!amount || Number(amount) <= 0) {
      throw new Error("Vui lòng nhập số tiền hợp lệ");
    }

    if (!user) {
      throw new Error("Vui lòng đăng nhập để sử dụng chức năng");
    }

    try {
      setIsLoading(true);
      let txHash;

      if (selectedToken === "ETH") {
        const result = await donateETH(
          campaign.chainCampaignId,
          amount.toString()
        );
        txHash = result.txHash;

        await createDonation({
          campaignId: campaign.id,
          amount: Number(amount),
          txHash: txHash,
          token: "ETH",
          tokenName: "ethereum",
        });
      } else {
        const token = TOKEN[selectedToken];
        const result = await donateToken(
          campaign.chainCampaignId,
          token.address,
          amount.toString(),
          token.decimals
        );
        txHash = result.txHash;

        await createDonation({
          campaignId: campaign.id,
          amount: Number(amount),
          txHash: txHash,
          token: selectedToken,
          tokenName: token.tokenName,
        });
      }

      const metadata = generateNFTMetadata(user?.name || user?.email, amount);
      return { txHash, metadata };
    } finally {
      setIsLoading(false);
    }
  };

  return {
    donate,
    isLoading,
  };
};

```

### src/hooks/useSocket.js
```js
import { useEffect, useState } from "react";
import { io } from "socket.io-client";
import { toast } from "sonner";
import useUserStore from "./useUserStore";

const SOCKET_URL =
  import.meta.env.VITE_APP_BACKEND_URL || "https://api.chain4good.io.vn";

export const useSocket = () => {
  const [socket, setSocket] = useState(null);
  const [notifications, setNotifications] = useState([]);
  const { user } = useUserStore();

  useEffect(() => {
    const socketInstance = io(SOCKET_URL, {
      withCredentials: true,
      transports: ["websocket"],
    });

    socketInstance.on("connect", () => {
      if (user?.id) {
        socketInstance.emit("join", user.id);
      }
    });

    socketInstance.on("notification", (notification) => {
      setNotifications((prev) => [notification, ...prev]);
      toast.info(notification.content);
    });

    socketInstance.on("disconnect", () => {
      // console.log("Disconnected from socket server");
    });

    setSocket(socketInstance);

    return () => {
      socketInstance.disconnect();
    };
  }, [user]);

  return { socket, notifications, setNotifications };
};

```

### src/hooks/useCategory.js
```js
import { getCategories } from "@/services/categoryService";
import { useQuery } from "@tanstack/react-query";

export const useCategory = () => {
  return useQuery({
    queryKey: ["categories"],
    queryFn: () => getCategories(),
  });
};

```

### src/hooks/useTopic.js
```js
import { getTopics } from "@/services/topicService";
import { useQuery } from "@tanstack/react-query";

export const useTopic = () => {
  return useQuery({
    queryKey: ["topics"],
    queryFn: () => getTopics(),
  });
};

```

### src/hooks/useCampaign.js
```js
import { create } from "zustand";

const useCampaign = create((set, get) => ({
  newCampaign: {
    title: "",
    description: "",
    goal: null,
    deadline: null,
    isClosed: false,
    isNoLimit: false,
    status: "PENDING",
    categoryId: null,
    countryId: null,
    fundraiseTypeId: null,
    coverId: null,
    images: [],
  },
  setNewCampaign: (data) => {
    set({ newCampaign: data });
  },

  changeCampaignValue: (key, value) => {
    set({
      newCampaign: {
        ...get().newCampaign,
        [key]: value,
      },
    });
  },

  resetNewCampaign: () => {
    set({
      newCampaign: {
        title: "",
        description: "",
        goal: null,
        deadline: null,
        totalDonated: null,
        isClosed: false,
        isNoLimit: false,
        status: "PENDING",
        userId: null,
        categoryId: null,
        countryId: null,
        fundraiseTypeId: null,
        coverId: null,
        images: [],
      },
    });
  },

  addImage: (image) => {
    set({
      newCampaign: {
        ...get().newCampaign,
        images: [...get().newCampaign.images, image],
      },
    });
  },

  removeImage: (index) => {
    set({
      newCampaign: {
        ...get().newCampaign,
        images: get().newCampaign.images.filter((_, i) => i !== index),
      },
    });
  },

  clearImages: () => {
    set({
      newCampaign: {
        ...get().newCampaign,
        images: [],
      },
    });
  },
}));

export default useCampaign;

```

### src/module/user/pages/Home.jsx
```jsx
import { Helmet } from "react-helmet-async";
import Banner from "../components/Banner";
import Discover from "../components/Discover";
import Guide from "../components/Guide";
import KeyFeature from "../components/KeyFeature";
import Topic from "../components/Topic";
import { usePost } from "@/hooks/usePost";
import { useState } from "react";
import { useQuery } from "@tanstack/react-query";
import { recommendations } from "@/services/aiService";
import HowWork from "../components/HowWork";
import { NFTLeaderboard } from "../components/NFTLeaderboard";
import BehindTheBanner from "../components/BehindTheBanner";
import BehindTheBanner2 from "../components/BehindTheBanner2";
import { getCampaigns } from "@/services/campaignService";

export default function Home() {
  const [filters, setFilters] = useState({
    page: 1,
    limit: 4,
  });
  const { data: posts, isLoading } = usePost(filters);
  // const { data: recommendationsData } = useQuery({
  //   queryKey: ["recommendations"],
  //   queryFn: () => recommendations(),
  //   enabled: true,
  // });

  const { data: campaigns } = useQuery({
    queryKey: ["campaigns"],
    queryFn: () =>
      getCampaigns({
        page: 1,
        limit: 6,
      }),
  });
  return (
    <>
      <Helmet>
        <title>Trang chủ | Chain4Good</title>
        <meta
          name="description"
          content="Nền tảng gây quỹ từ thiện phi tập trung. Quyên góp và giúp đỡ người khác một cách minh bạch."
        />
        <meta property="og:title" content="Trang chủ | Chain4Good" />
        <meta
          property="og:description"
          content="Nền tảng gây quỹ từ thiện phi tập trung. Quyên góp và giúp đỡ người khác một cách minh bạch."
        />
        <meta property="og:type" content="website" />
      </Helmet>
      <main className="relative min-h-screen">
        <section className="relative w-full">
          <div className="relative z-10">
            <Banner />
          </div>
          <BehindTheBanner />
          <BehindTheBanner2 campaigns={campaigns} />
        </section>
        <KeyFeature />
        <Guide />
        {/* <NFTLeaderboard /> */}
        <div className="container mx-auto px-4 py-8">
          <Discover campaigns={campaigns} />
        </div>
        <Topic posts={posts} />
        <HowWork />
      </main>
    </>
  );
}

```

### src/module/user/pages/SignIn.jsx
```jsx
import React, { useState } from "react";
import { useForm } from "react-hook-form";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import { Label } from "@/components/ui/label";
import { zodResolver } from "@hookform/resolvers/zod";
import * as z from "zod";
import { Separator } from "@/components/ui/separator";
import FacebookSvg from "@/components/Icons/FacebookSvg";
import GoogleIconSvg from "@/components/Icons/GoogleIconSvg";
import { Link, useNavigate } from "react-router-dom";
import { useMutation } from "@tanstack/react-query";
import { signin } from "@/services/authService";
import { toast } from "sonner";
import {
  Loader2,
  Wallet,
  Eye,
  EyeOff,
  Mail,
  Lock,
  ArrowRight,
  Shield,
  Sparkles,
  Star,
} from "lucide-react";

import { useWallet } from "@/hooks/useWallet";
import { motion } from "framer-motion";

const formSchema = z.object({
  email: z.string().email({ message: "Email không hợp lệ" }),
  password: z.string().min(6, { message: "Mật khẩu ít nhất 6 ký tự" }),
});

const SignInPage = () => {
  const navigate = useNavigate();
  const { handleWeb3Login, isConnected } = useWallet();
  const [showPassword, setShowPassword] = useState(false);

  const {
    register,
    handleSubmit,
    formState: { errors, isSubmitting },
  } = useForm({
    resolver: zodResolver(formSchema),
  });

  const mutation = useMutation({
    mutationFn: (data) => signin(data),
    onSuccess: () => {
      toast.success("Đăng nhập thành công!");
      navigate("/");
    },
    onError: (error) => {
      console.log(error);
      toast.error(error.message?.message || "Đăng nhập không thành công!");
    },
  });

  const onSubmit = async (data) => {
    mutation.mutate(data);
  };

  const handleLoginWithGoogle = () => {
    window.location.href = "http://localhost:3000/auth/google";
  };

  const container = {
    hidden: { opacity: 0, y: 30 },
    show: {
      opacity: 1,
      y: 0,
      transition: {
        duration: 0.8,
        ease: "easeOut",
        staggerChildren: 0.1,
        delayChildren: 0.2,
      },
    },
  };

  const item = {
    hidden: { opacity: 0, y: 20 },
    show: { opacity: 1, y: 0 },
  };

  return (
    <div
      className="relative flex w-screen h-screen items-center justify-center overflow-hidden"
      style={{ backgroundImage: "url(/desktop.jpg)" }}
    >
      {/* Background overlay with blur effect */}
      <div className="absolute inset-0 bg-black/20 backdrop-blur-[1px]" />

      {/* Floating decorative elements */}
      <div className="absolute inset-0 overflow-hidden pointer-events-none">
        {[...Array(8)].map((_, i) => (
          <motion.div
            key={i}
            className="absolute"
            initial={{
              x: Math.random() * window.innerWidth,
              y: Math.random() * window.innerHeight,
              opacity: 0,
            }}
            animate={{
              y: [0, -30, 0],
              opacity: [0.1, 0.3, 0.1],
              rotate: [0, 360],
            }}
            transition={{
              duration: 15 + i * 2,
              repeat: Infinity,
              ease: "easeInOut",
              delay: i * 2,
            }}
          >
            {i % 2 === 0 ? (
              <Sparkles className="w-4 h-4 text-white/30" />
            ) : (
              <Star className="w-3 h-3 text-primary/40" />
            )}
          </motion.div>
        ))}
      </div>

      <motion.div
        variants={container}
        initial="hidden"
        animate="show"
        className="relative z-10 w-[480px] mx-4"
      >
        {/* Glass morphism card */}
        <div className="bg-white/95 backdrop-blur-xl rounded-3xl shadow-2xl border border-white/30 p-8 relative overflow-hidden">
          {/* Decorative gradient overlay */}
          <div className="absolute inset-0 bg-gradient-to-br from-primary/5 via-transparent to-primary/10 pointer-events-none" />

          {/* Top decorative blur */}
          <div className="absolute -top-10 -right-10 w-32 h-32 bg-primary/20 rounded-full blur-3xl" />
          <div className="absolute -bottom-10 -left-10 w-40 h-40 bg-blue-400/10 rounded-full blur-3xl" />

          <div className="relative z-10 flex gap-6 flex-col items-center">
            {/* Logo section with animation */}
            <motion.div variants={item} className="relative">
              <motion.div
                className="absolute inset-0 bg-primary/20 rounded-full blur-xl"
                animate={{
                  scale: [1, 1.2, 1],
                  opacity: [0.3, 0.6, 0.3],
                }}
                transition={{
                  duration: 3,
                  repeat: Infinity,
                  ease: "easeInOut",
                }}
              />
              <img
                src="/logo.png"
                alt="Chain4Good"
                className="relative w-[120px] h-auto"
              />
            </motion.div>

            {/* Header text */}
            <motion.div
              variants={item}
              className="w-full flex flex-col items-center text-center"
            >
              <h1 className="text-2xl font-bold bg-gradient-to-r from-gray-900 via-primary to-gray-800 bg-clip-text text-transparent mb-2">
                Chào mừng trở lại
              </h1>
              <p className="text-gray-600 leading-relaxed">
                Đăng nhập vào Chain4Good để tiếp tục hành trình thiện nguyện
              </p>
            </motion.div>

            {/* Login buttons section */}
            <motion.div variants={item} className="w-full space-y-3">
              {/* Web3 Wallet Login */}
              <motion.div
                whileHover={{ scale: 1.02 }}
                whileTap={{ scale: 0.98 }}
              >
                <Button
                  variant="outline"
                  size="lg"
                  className="w-full h-12 font-medium bg-gradient-to-r from-primary/10 to-primary/5 hover:from-primary/20 hover:to-primary/10 border-primary/30 hover:border-primary/50 transition-all duration-300 group"
                  onClick={() => handleWeb3Login()}
                >
                  <div className="flex items-center justify-center gap-3">
                    <motion.div
                      animate={isConnected ? {} : { rotate: 360 }}
                      transition={{
                        duration: 2,
                        repeat: isConnected ? 0 : Infinity,
                        ease: "linear",
                      }}
                    >
                      <Wallet
                        className="h-5 w-5 text-primary"
                        strokeWidth={2}
                      />
                    </motion.div>
                    <span className="text-sm font-medium">
                      {isConnected ? "Đăng nhập bằng ví" : "Kết nối với ví"}
                    </span>
                    <ArrowRight className="h-4 w-4 text-primary/70 group-hover:translate-x-1 transition-transform" />
                  </div>
                </Button>
              </motion.div>

              {/* Social Logins */}
              <div className="space-y-2">
                <motion.div
                  whileHover={{ scale: 1.02 }}
                  whileTap={{ scale: 0.98 }}
                >
                  <Button
                    variant="outline"
                    size="lg"
                    className="w-full h-12 flex items-center justify-center gap-3 hover:bg-red-50 hover:border-red-200 transition-all duration-300 group"
                    onClick={handleLoginWithGoogle}
                  >
                    <GoogleIconSvg className="h-5 w-5" />
                    <span className="font-medium">Đăng nhập với Google</span>
                    <ArrowRight className="h-4 w-4 opacity-70 group-hover:translate-x-1 transition-transform" />
                  </Button>
                </motion.div>
              </div>
            </motion.div>

            {/* Enhanced Separator */}
            <motion.div variants={item} className="w-full relative my-2">
              <Separator className="bg-gray-200" />
              <div className="absolute inset-0 flex items-center justify-center">
                <span className="bg-white px-4 text-sm text-gray-500 font-medium">
                  hoặc đăng nhập bằng email
                </span>
              </div>
            </motion.div>

            {/* Enhanced Form */}
            <motion.form
              variants={item}
              onSubmit={handleSubmit(onSubmit)}
              className="space-y-4 w-full max-w-sm"
            >
              {/* Email Field */}
              <div className="space-y-2">
                <Label
                  htmlFor="email"
                  className="text-sm font-medium text-gray-700 flex items-center gap-2"
                >
                  <Mail className="w-4 h-4 text-primary" />
                  Email
                </Label>
                <div className="relative">
                  <Input
                    id="email"
                    type="email"
                    placeholder="your@email.com"
                    className="h-12 pl-4 pr-4 border-gray-200 focus:border-primary focus:ring-primary/20 transition-all duration-300 bg-white/80"
                    {...register("email")}
                  />
                </div>
                {errors.email && (
                  <motion.p
                    initial={{ opacity: 0, y: -10 }}
                    animate={{ opacity: 1, y: 0 }}
                    className="text-sm text-red-500"
                  >
                    {errors.email.message}
                  </motion.p>
                )}
              </div>

              {/* Password Field */}
              <div className="space-y-2">
                <Label
                  htmlFor="password"
                  className="text-sm font-medium text-gray-700 flex items-center gap-2"
                >
                  <Lock className="w-4 h-4 text-primary" />
                  Mật khẩu
                </Label>
                <div className="relative">
                  <Input
                    id="password"
                    type={showPassword ? "text" : "password"}
                    placeholder="••••••••"
                    className="h-12 pl-4 pr-12 border-gray-200 focus:border-primary focus:ring-primary/20 transition-all duration-300 bg-white/80"
                    {...register("password")}
                  />
                  <button
                    type="button"
                    onClick={() => setShowPassword(!showPassword)}
                    className="absolute right-3 top-1/2 -translate-y-1/2 text-gray-400 hover:text-gray-600 transition-colors"
                  >
                    {showPassword ? (
                      <EyeOff className="w-5 h-5" />
                    ) : (
                      <Eye className="w-5 h-5" />
                    )}
                  </button>
                </div>

                <div className="flex justify-between items-center min-h-[20px]">
                  <div className="flex-1">
                    {errors.password && (
                      <motion.p
                        initial={{ opacity: 0, y: -10 }}
                        animate={{ opacity: 1, y: 0 }}
                        className="text-sm text-red-500"
                      >
                        {errors.password.message}
                      </motion.p>
                    )}
                  </div>
                  <Link
                    className="text-xs text-primary hover:text-primary/80 transition-colors ml-4"
                    to={"/forgot-password"}
                  >
                    Quên mật khẩu?
                  </Link>
                </div>
              </div>

              {/* Submit Button */}
              <div className="pt-2">
                <motion.div
                  whileHover={{ scale: 1.02 }}
                  whileTap={{ scale: 0.98 }}
                >
                  <Button
                    type="submit"
                    className="w-full h-12 bg-gradient-to-r from-primary to-primary/80 hover:from-primary/90 hover:to-primary/70 text-white font-medium shadow-lg hover:shadow-xl transition-all duration-300"
                    disabled={isSubmitting}
                  >
                    {isSubmitting ? (
                      <div className="flex items-center gap-2">
                        <motion.div
                          animate={{ rotate: 360 }}
                          transition={{
                            duration: 1,
                            repeat: Infinity,
                            ease: "linear",
                          }}
                        >
                          <Loader2 className="h-4 w-4" />
                        </motion.div>
                        Đang đăng nhập...
                      </div>
                    ) : (
                      <div className="flex items-center gap-2">
                        <span>Đăng nhập</span>
                        <ArrowRight className="h-4 w-4" />
                      </div>
                    )}
                  </Button>
                </motion.div>
              </div>
            </motion.form>

            {/* Sign Up Link */}
            <motion.div
              variants={item}
              className="text-center pt-4 border-t border-gray-100 w-full"
            >
              <p className="text-gray-600">
                Bạn chưa có tài khoản?{" "}
                <Link
                  className="text-primary hover:text-primary/80 font-medium transition-colors"
                  to="/sign-up"
                >
                  Đăng ký ngay
                </Link>
              </p>
            </motion.div>

            {/* Security Badge */}
            <motion.div
              variants={item}
              className="flex items-center justify-center gap-2 text-xs text-gray-500"
            >
              <Shield className="w-3 h-3" />
              <span>Bảo mật SSL 256-bit</span>
            </motion.div>
          </div>
        </div>
      </motion.div>
    </div>
  );
};

export default SignInPage;

```

### src/module/user/pages/About.jsx
```jsx
import { Link } from "react-router-dom";

export default function About() {
  return (
    <div className="p-4">
      <h1 className="text-2xl font-bold">About Page</h1>
      <Link to="/" className="text-blue-500 underline">
        Go to Home
      </Link>
    </div>
  );
}

```

### src/module/user/pages/Search.jsx
```jsx
import { Input } from "@/components/ui/input";
import { Delete, Search as SearchIcon, SearchX, Loader2 } from "lucide-react";
import { Button } from "@/components/ui/button";
import React, { useState, useEffect, useCallback } from "react";
import debounce from "lodash/debounce";
import { useQuery } from "@tanstack/react-query";
import { getCampaigns } from "@/services/campaignService";
import ListCampaign from "@/components/ListCampaign";
import { Skeleton } from "@/components/ui/skeleton";
import FilterCampaign from "@/components/FilterCampaign";
import { Helmet } from "react-helmet-async";

const Search = () => {
  const [filters, setFilters] = useState({
    page: 1,
    limit: 10,
    search: "",
    fundraiseTypeId: undefined,
    categoryId: undefined,
    status: undefined,
    countryId: undefined,
    sort: undefined,
    sortBy: undefined,
  });
  const [searchTerm, setSearchTerm] = useState("");

  // eslint-disable-next-line react-hooks/exhaustive-deps
  const debouncedSearch = useCallback(
    debounce((searchValue) => {
      setFilters((prev) => ({
        ...prev,
        search: searchValue,
        page: 1,
      }));
    }, 500),
    []
  );

  const handleSearchChange = (e) => {
    const value = e.target.value;
    setSearchTerm(value);
    debouncedSearch(value);
  };

  const handleClearSearch = () => {
    setSearchTerm("");
    debouncedSearch.cancel();
    setFilters((prev) => ({
      ...prev,
      search: "",
      page: 1,
    }));
  };

  useEffect(() => {
    return () => {
      debouncedSearch.cancel();
    };
  }, [debouncedSearch]);

  const renderEmptyState = () => {
    return (
      <div className="text-center py-16">
        <div className="flex justify-center mb-4">
          <SearchX className="h-16 w-16 text-muted-foreground/50" />
        </div>
        <h3 className="text-xl font-medium mb-2">Không tìm thấy kết quả nào</h3>
        <p className="text-muted-foreground max-w-md mx-auto">
          Thử tìm kiếm với từ khóa khác hoặc kiểm tra lại chính tả của bạn
        </p>
      </div>
    );
  };

  const { data: searchResult, isFetching } = useQuery({
    queryKey: ["search", filters],
    queryFn: () => getCampaigns(filters),
  });

  const renderLoadingState = () => {
    return (
      <div className="md:max-w-7xl md:p-0 p-4 mx-auto">
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          {[1, 2, 3, 4, 5, 6].map((index) => (
            <div
              key={index}
              className="rounded-lg overflow-hidden border bg-card"
            >
              <Skeleton className="w-full h-48" />
              <div className="p-4 space-y-4">
                <div className="space-y-2">
                  <Skeleton className="h-4 w-3/4" />
                  <Skeleton className="h-4 w-1/2" />
                </div>
                <div className="space-y-2">
                  <Skeleton className="h-3 w-full" />
                  <Skeleton className="h-3 w-full" />
                  <Skeleton className="h-3 w-2/3" />
                </div>
                <div className="flex justify-between items-center pt-2">
                  <Skeleton className="h-4 w-24" />
                  <Skeleton className="h-8 w-24 rounded-full" />
                </div>
              </div>
            </div>
          ))}
        </div>
      </div>
    );
  };

  const onClearFilters = () => {
    setSearchTerm("");
    setFilters((prev) => ({
      ...prev,
      page: 1,
      limit: 10,
      search: undefined,
      fundraiseTypeId: undefined,
      categoryId: undefined,
      status: undefined,
      countryId: undefined,
      sort: undefined,
      sortBy: undefined,
    }));
  };

  return (
    <>
      <Helmet>
        <title>
          {searchTerm
            ? `Tìm kiếm: ${searchTerm} | Chain4Good`
            : "Tìm kiếm chiến dịch | Chain4Good"}
        </title>
        <meta
          name="description"
          content="Tìm kiếm các chiến dịch từ thiện, tổ chức gây quỹ và phi lợi nhuận trên Chain4Good. Khám phá và quyên góp cho những dự án phù hợp với bạn."
        />
        <meta
          property="og:title"
          content={
            searchTerm
              ? `Tìm kiếm: ${searchTerm} | Chain4Good`
              : "Tìm kiếm chiến dịch | Chain4Good"
          }
        />
        <meta
          property="og:description"
          content="Tìm kiếm các chiến dịch từ thiện, tổ chức gây quỹ và phi lợi nhuận trên Chain4Good. Khám phá và quyên góp cho những dự án phù hợp với bạn."
        />
        <meta property="og:type" content="website" />
      </Helmet>

      <main className="min-h-screen">
        <div className="container mx-auto pt-14">
          <div className="max-w-3xl mx-auto text-center space-y-4 mb-12">
            <h1 className="text-3xl font-semibold">
              Tìm kiếm các tổ chức gây quỹ và phi lợi nhuận
            </h1>
            <p className="text-base text-muted-foreground">
              Tìm người gây quỹ theo tên, địa điểm, chức danh hoặc từ khóa của
              người đó
            </p>
          </div>

          <div className="max-w-2xl mx-auto mb-16">
            <div className="relative">
              <SearchIcon className="absolute left-4 top-1/2 -translate-y-1/2 h-5 w-5 text-muted-foreground" />
              <Input
                value={searchTerm}
                onChange={handleSearchChange}
                placeholder="Tìm kiếm chiến dịch..."
                className="h-14 pl-12 pr-24 text-lg rounded-full bg-background border-muted-foreground/20 hover:border-primary/50 focus-visible:ring-1 focus-visible:ring-primary transition-colors"
              />
              {searchTerm && (
                <Button
                  onClick={handleClearSearch}
                  variant="text"
                  className="absolute right-2 top-1/2 -translate-y-1/2 rounded-full h-10"
                >
                  <Delete size={32} strokeWidth={1.25} />
                </Button>
              )}
            </div>
          </div>
        </div>
        <div className="mx-auto">
          <div className="md:max-w-7xl md:p-0 p-4 mx-auto">
            <FilterCampaign
              filters={filters}
              setFilters={setFilters}
              onClearFilters={onClearFilters}
            />
            {isFetching ? (
              renderLoadingState()
            ) : (
              <>
                {searchResult?.meta?.total === 0 && (
                  <div id="search-list">{renderEmptyState()}</div>
                )}
                {/* {!searchTerm && (
              <div className="text-center py-16 text-muted-foreground">
                Nhập từ khóa để bắt đầu tìm kiếm
              </div>
            )} */}
                {searchResult?.data?.length > 0 && (
                  <>
                    {searchTerm && (
                      <p className="font-semibold text-[20px] mb-6 leading-6">
                        {searchResult?.meta?.total} kết quả tìm kiếm cho "
                        {searchTerm}"
                      </p>
                    )}

                    <ListCampaign campaigns={searchResult?.data} />
                  </>
                )}
              </>
            )}
          </div>
        </div>
      </main>
    </>
  );
};

export default Search;

```

### src/module/user/pages/SignUp.jsx
```jsx
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Separator } from "@/components/ui/separator";
import { connectWallet } from "@/lib/contract";
import { signup } from "@/services/authService";
import { zodResolver } from "@hookform/resolvers/zod";
import { useMutation } from "@tanstack/react-query";
import { useEffect, useState } from "react";
import { useForm } from "react-hook-form";
import { Link, useNavigate } from "react-router-dom";
import { toast } from "sonner";
import * as z from "zod";
import {
  Loader2,
  Wallet,
  Eye,
  EyeOff,
  Mail,
  Lock,
  User,
  ArrowRight,
  Shield,
  Sparkles,
  Star,
  Check,
  CheckCircle,
} from "lucide-react";
import { motion } from "framer-motion";

const formSchema = z
  .object({
    email: z.string().email({ message: "Email không hợp lệ" }),
    name: z.string({ message: "Vui lòng nhập tên" }),
    password: z.string().min(6, { message: "Mật khẩu ít nhất 6 ký tự" }),
    retypePassword: z
      .string()
      .min(6, { message: "Vui lòng nhập lại mật khẩu" }),
    address: z.string({ message: "Vui lòng kết nối với Metamask" }),
  })
  .refine((data) => data.password === data.retypePassword, {
    message: "Mật khẩu không khớp",
    path: ["retypePassword"],
  });

const SignUpPage = () => {
  const navigate = useNavigate();
  const [showPassword, setShowPassword] = useState(false);
  const [showRetypePassword, setShowRetypePassword] = useState(false);

  const {
    register,
    handleSubmit,
    formState: { errors, isSubmitting },
    setValue,
    watch,
  } = useForm({
    resolver: zodResolver(formSchema),
  });

  const mutation = useMutation({
    mutationFn: (data) => signup(data),
    onSuccess: () => {
      toast.success("Đăng ký thành công! Vui lòng xác thực email.");
      navigate("/verify-email");
    },
    onError: (error) => {
      toast.error(error.message || "Có lỗi xảy ra!");
    },
  });

  const onSubmit = (data) => {
    mutation.mutate(data);
  };

  const handleConnectWallet = async () => {
    try {
      const result = await connectWallet();
      if (!result) {
        throw new Error("Wallet connection failed!");
      }
      const { address } = result;
      setValue("address", address);
      toast.success("Đã kết nối ví thành công!");
    } catch (error) {
      toast.error(error.message);
    }
  };

  const address = watch("address");
  const password = watch("password");
  const retypePassword = watch("retypePassword");

  useEffect(() => {
    if (typeof window.ethereum !== "undefined") {
      const handleAccountsChanged = (accounts) => {
        if (accounts.length === 0) {
          setValue("address", null);
        } else {
          setValue("address", accounts[0]);
        }
      };
      window.ethereum.on("accountsChanged", handleAccountsChanged);
      return () => {
        window.ethereum.removeListener(
          "accountsChanged",
          handleAccountsChanged
        );
      };
    }
  }, [setValue]);

  const container = {
    hidden: { opacity: 0, y: 30 },
    show: {
      opacity: 1,
      y: 0,
      transition: {
        duration: 0.8,
        ease: "easeOut",
        staggerChildren: 0.1,
        delayChildren: 0.2,
      },
    },
  };

  const item = {
    hidden: { opacity: 0, y: 20 },
    show: { opacity: 1, y: 0 },
  };

  const formatAddress = (addr) => {
    if (!addr) return "";
    return `${addr.slice(0, 6)}...${addr.slice(-4)}`;
  };

  return (
    <div
      className="relative flex w-screen h-screen items-center justify-center overflow-hidden"
      style={{ backgroundImage: "url(/desktop.jpg)" }}
    >
      {/* Background overlay with blur effect */}
      <div className="absolute inset-0 bg-black/20 backdrop-blur-[1px]" />

      {/* Floating decorative elements */}
      <div className="absolute inset-0 overflow-hidden pointer-events-none">
        {[...Array(8)].map((_, i) => (
          <motion.div
            key={i}
            className="absolute"
            initial={{
              x: Math.random() * window.innerWidth,
              y: Math.random() * window.innerHeight,
              opacity: 0,
            }}
            animate={{
              y: [0, -30, 0],
              opacity: [0.1, 0.3, 0.1],
              rotate: [0, 360],
            }}
            transition={{
              duration: 15 + i * 2,
              repeat: Infinity,
              ease: "easeInOut",
              delay: i * 2,
            }}
          >
            {i % 2 === 0 ? (
              <Sparkles className="w-4 h-4 text-white/30" />
            ) : (
              <Star className="w-3 h-3 text-primary/40" />
            )}
          </motion.div>
        ))}
      </div>

      <motion.div
        variants={container}
        initial="hidden"
        animate="show"
        className="relative z-10 w-[520px] mx-4 max-h-[90vh] overflow-y-auto"
      >
        {/* Glass morphism card */}
        <div className="bg-white/95 backdrop-blur-xl rounded-3xl shadow-2xl border border-white/30 p-8 relative overflow-hidden">
          {/* Decorative gradient overlay */}
          <div className="absolute inset-0 bg-gradient-to-br from-primary/5 via-transparent to-primary/10 pointer-events-none" />

          {/* Top decorative blur */}
          <div className="absolute -top-10 -right-10 w-32 h-32 bg-primary/20 rounded-full blur-3xl" />
          <div className="absolute -bottom-10 -left-10 w-40 h-40 bg-blue-400/10 rounded-full blur-3xl" />

          <div className="relative z-10 flex gap-6 flex-col items-center">
            {/* Logo section with animation */}
            <motion.div variants={item} className="relative">
              <motion.div
                className="absolute inset-0 bg-primary/20 rounded-full blur-xl"
                animate={{
                  scale: [1, 1.2, 1],
                  opacity: [0.3, 0.6, 0.3],
                }}
                transition={{
                  duration: 3,
                  repeat: Infinity,
                  ease: "easeInOut",
                }}
              />
              <img
                src="/logo.png"
                alt="Chain4Good"
                className="relative w-[120px] h-auto"
              />
            </motion.div>

            {/* Header text */}
            <motion.div
              variants={item}
              className="w-full flex flex-col items-center text-center"
            >
              <h1 className="text-2xl font-bold bg-gradient-to-r from-gray-900 via-primary to-gray-800 bg-clip-text text-transparent mb-2">
                Tham gia Chain4Good
              </h1>
              <p className="text-gray-600 leading-relaxed">
                Tạo tài khoản để bắt đầu hành trình thiện nguyện của bạn
              </p>
            </motion.div>

            {/* Wallet Connection Section */}
            <motion.div variants={item} className="w-full space-y-3">
              {!address ? (
                <motion.div
                  whileHover={{ scale: 1.02 }}
                  whileTap={{ scale: 0.98 }}
                >
                  <Button
                    variant="outline"
                    size="lg"
                    className="w-full h-12 font-medium bg-gradient-to-r from-primary/10 to-primary/5 hover:from-primary/20 hover:to-primary/10 border-primary/30 hover:border-primary/50 transition-all duration-300 group"
                    onClick={handleConnectWallet}
                  >
                    <div className="flex items-center justify-center gap-3">
                      <motion.div
                        animate={{ rotate: 360 }}
                        transition={{
                          duration: 2,
                          repeat: Infinity,
                          ease: "linear",
                        }}
                      >
                        <Wallet
                          className="h-5 w-5 text-primary"
                          strokeWidth={2}
                        />
                      </motion.div>
                      <span className="text-sm font-medium">
                        Kết nối với ví Metamask
                      </span>
                      <ArrowRight className="h-4 w-4 text-primary/70 group-hover:translate-x-1 transition-transform" />
                    </div>
                  </Button>
                </motion.div>
              ) : (
                <motion.div
                  initial={{ opacity: 0, scale: 0.9 }}
                  animate={{ opacity: 1, scale: 1 }}
                  className="w-full"
                >
                  <div className="flex items-center gap-3 p-4 bg-green-50 border border-green-200 rounded-xl">
                    <CheckCircle className="w-5 h-5 text-green-600" />
                    <div className="flex-1">
                      <p className="text-sm font-medium text-green-800">
                        Ví đã kết nối
                      </p>
                      <p className="text-xs text-green-600 font-mono">
                        {formatAddress(address)}
                      </p>
                    </div>
                  </div>
                </motion.div>
              )}

              {errors.address && (
                <motion.p
                  initial={{ opacity: 0, y: -10 }}
                  animate={{ opacity: 1, y: 0 }}
                  className="text-sm text-red-500"
                >
                  {errors.address.message}
                </motion.p>
              )}
            </motion.div>

            {/* Enhanced Separator */}
            <motion.div variants={item} className="w-full relative my-2">
              <Separator className="bg-gray-200" />
              <div className="absolute inset-0 flex items-center justify-center">
                <span className="bg-white px-4 text-sm text-gray-500 font-medium">
                  thông tin tài khoản
                </span>
              </div>
            </motion.div>

            {/* Enhanced Form */}
            <motion.form
              variants={item}
              onSubmit={handleSubmit(onSubmit)}
              className="space-y-4 w-full max-w-sm"
            >
              {/* Name Field */}
              <div className="space-y-2">
                <Label
                  htmlFor="name"
                  className="text-sm font-medium text-gray-700 flex items-center gap-2"
                >
                  <User className="w-4 h-4 text-primary" />
                  Họ và tên
                </Label>
                <div className="relative">
                  <Input
                    id="name"
                    type="text"
                    placeholder="Nguyễn Văn A"
                    className="h-12 pl-4 pr-4 border-gray-200 focus:border-primary focus:ring-primary/20 transition-all duration-300 bg-white/80"
                    {...register("name")}
                  />
                </div>
                {errors.name && (
                  <motion.p
                    initial={{ opacity: 0, y: -10 }}
                    animate={{ opacity: 1, y: 0 }}
                    className="text-sm text-red-500"
                  >
                    {errors.name.message}
                  </motion.p>
                )}
              </div>

              {/* Email Field */}
              <div className="space-y-2">
                <Label
                  htmlFor="email"
                  className="text-sm font-medium text-gray-700 flex items-center gap-2"
                >
                  <Mail className="w-4 h-4 text-primary" />
                  Email
                </Label>
                <div className="relative">
                  <Input
                    id="email"
                    type="email"
                    placeholder="your@email.com"
                    className="h-12 pl-4 pr-4 border-gray-200 focus:border-primary focus:ring-primary/20 transition-all duration-300 bg-white/80"
                    {...register("email")}
                  />
                </div>
                {errors.email && (
                  <motion.p
                    initial={{ opacity: 0, y: -10 }}
                    animate={{ opacity: 1, y: 0 }}
                    className="text-sm text-red-500"
                  >
                    {errors.email.message}
                  </motion.p>
                )}
              </div>

              {/* Password Field */}
              <div className="space-y-2">
                <Label
                  htmlFor="password"
                  className="text-sm font-medium text-gray-700 flex items-center gap-2"
                >
                  <Lock className="w-4 h-4 text-primary" />
                  Mật khẩu
                </Label>
                <div className="relative">
                  <Input
                    id="password"
                    type={showPassword ? "text" : "password"}
                    placeholder="••••••••"
                    className="h-12 pl-4 pr-12 border-gray-200 focus:border-primary focus:ring-primary/20 transition-all duration-300 bg-white/80"
                    {...register("password")}
                  />
                  <button
                    type="button"
                    onClick={() => setShowPassword(!showPassword)}
                    className="absolute right-3 top-1/2 -translate-y-1/2 text-gray-400 hover:text-gray-600 transition-colors"
                  >
                    {showPassword ? (
                      <EyeOff className="w-5 h-5" />
                    ) : (
                      <Eye className="w-5 h-5" />
                    )}
                  </button>
                </div>
                {errors.password && (
                  <motion.p
                    initial={{ opacity: 0, y: -10 }}
                    animate={{ opacity: 1, y: 0 }}
                    className="text-sm text-red-500"
                  >
                    {errors.password.message}
                  </motion.p>
                )}
              </div>

              {/* Retype Password Field */}
              <div className="space-y-2">
                <Label
                  htmlFor="retypePassword"
                  className="text-sm font-medium text-gray-700 flex items-center gap-2"
                >
                  <Lock className="w-4 h-4 text-primary" />
                  Nhập lại mật khẩu
                  {password &&
                    retypePassword &&
                    password === retypePassword && (
                      <Check className="w-4 h-4 text-green-500" />
                    )}
                </Label>
                <div className="relative">
                  <Input
                    id="retypePassword"
                    type={showRetypePassword ? "text" : "password"}
                    placeholder="••••••••"
                    className="h-12 pl-4 pr-12 border-gray-200 focus:border-primary focus:ring-primary/20 transition-all duration-300 bg-white/80"
                    {...register("retypePassword")}
                  />
                  <button
                    type="button"
                    onClick={() => setShowRetypePassword(!showRetypePassword)}
                    className="absolute right-3 top-1/2 -translate-y-1/2 text-gray-400 hover:text-gray-600 transition-colors"
                  >
                    {showRetypePassword ? (
                      <EyeOff className="w-5 h-5" />
                    ) : (
                      <Eye className="w-5 h-5" />
                    )}
                  </button>
                </div>
                {errors.retypePassword && (
                  <motion.p
                    initial={{ opacity: 0, y: -10 }}
                    animate={{ opacity: 1, y: 0 }}
                    className="text-sm text-red-500"
                  >
                    {errors.retypePassword.message}
                  </motion.p>
                )}
              </div>

              {/* Submit Button */}
              <div className="pt-2">
                <motion.div
                  whileHover={{ scale: 1.02 }}
                  whileTap={{ scale: 0.98 }}
                >
                  <Button
                    type="submit"
                    className="w-full h-12 bg-gradient-to-r from-primary to-primary/80 hover:from-primary/90 hover:to-primary/70 text-white font-medium shadow-lg hover:shadow-xl transition-all duration-300"
                    disabled={isSubmitting}
                  >
                    {isSubmitting ? (
                      <div className="flex items-center gap-2">
                        <motion.div
                          animate={{ rotate: 360 }}
                          transition={{
                            duration: 1,
                            repeat: Infinity,
                            ease: "linear",
                          }}
                        >
                          <Loader2 className="h-4 w-4" />
                        </motion.div>
                        Đang đăng ký...
                      </div>
                    ) : (
                      <div className="flex items-center gap-2">
                        <span>Đăng ký tài khoản</span>
                        <ArrowRight className="h-4 w-4" />
                      </div>
                    )}
                  </Button>
                </motion.div>
              </div>
            </motion.form>

            {/* Sign In Link */}
            <motion.div
              variants={item}
              className="text-center pt-4 border-t border-gray-100 w-full"
            >
              <p className="text-gray-600">
                Bạn đã có tài khoản?{" "}
                <Link
                  className="text-primary hover:text-primary/80 font-medium transition-colors"
                  to="/sign-in"
                >
                  Đăng nhập ngay
                </Link>
              </p>
            </motion.div>

            {/* Security Badge */}
            <motion.div
              variants={item}
              className="flex items-center justify-center gap-2 text-xs text-gray-500"
            >
              <Shield className="w-3 h-3" />
              <span>Bảo mật SSL 256-bit</span>
            </motion.div>
          </div>
        </div>
      </motion.div>
    </div>
  );
};

export default SignUpPage;

```

### src/module/user/pages/Profile.jsx
```jsx
import { Card, CardContent, CardHeader } from "@/components/ui/card";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { useCharityHearts } from "@/hooks/useNFTContract";
import useUserStore from "@/hooks/useUserStore";
import { updateUser } from "@/services/userService";
import { useMutation, useQueryClient } from "@tanstack/react-query";
import { Helmet } from "react-helmet-async";
import { toast } from "sonner";
import { useImageUpload } from "../hooks/useImageUpload";
import { useNFTs } from "../hooks/useNFTs";
import NFTGallery from "../components/Profile/NFTGallery";
import ProfileHeader from "../components/Profile/ProfileHeader";
import ProfileInfo from "../components/Profile/ProfileInfo";

const Profile = () => {
  const { user, setUser } = useUserStore();
  const queryClient = useQueryClient();
  const { getUserNFTs } = useCharityHearts();

  // Consolidated update user mutation
  const { mutate: updateUserMutation } = useMutation({
    mutationFn: (data) => updateUser(user.id, data),
    onSuccess: (data) => {
      setUser(data);
      queryClient.invalidateQueries(["user"]);
      toast.success("Cập nhật thành công!");
    },
    onError: () => {
      toast.error("Có lỗi xảy ra khi cập nhật!");
    },
  });

  // Custom hooks
  const { loading, handleCoverUpload, handleAvatarUpload } =
    useImageUpload(updateUserMutation);
  const { nfts, loading: nftsLoading, error: nftsError } = useNFTs(getUserNFTs);

  return (
    <>
      <Helmet>
        <title>
          {user?.name ? `${user.name} | Chain4Good` : "Hồ sơ | Chain4Good"}
        </title>
        <meta
          name="description"
          content={
            user?.bio ||
            "Xem thông tin cá nhân, chiến dịch và lịch sử đóng góp của người dùng trên Chain4Good."
          }
        />
        <meta
          property="og:title"
          content={
            user?.name ? `${user.name} | Chain4Good` : "Hồ sơ | Chain4Good"
          }
        />
        <meta
          property="og:description"
          content={
            user?.bio ||
            "Xem thông tin cá nhân, chiến dịch và lịch sử đóng góp của người dùng trên Chain4Good."
          }
        />
        <meta property="og:image" content={user?.image || ""} />
        <meta property="og:type" content="profile" />
      </Helmet>

      <div className="min-h-screen pb-10">
        <ProfileHeader
          user={user}
          loading={loading}
          onCoverUpload={handleCoverUpload}
        />

        <div className="container px-4 my-6">
          <Card className="pt-8">
            <CardHeader>
              <ProfileInfo
                user={user}
                onUpdateProfile={updateUserMutation}
                isUpdatingProfile={false}
                loading={loading}
                onAvatarUpload={handleAvatarUpload}
              />
            </CardHeader>

            <CardContent>
              <Tabs
                defaultValue="nfts"
                size="md"
                className="w-full bg-gradient-to-r from-indigo-50 via-white to-indigo-50 rounded-lg shadow-lg p-6"
              >
                <TabsList className="bg-white rounded-lg shadow-inner p-1 mb-4">
                  <TabsTrigger
                    value="nfts"
                    className="hover:bg-indigo-100 rounded-md transition-colors duration-200"
                  >
                    NFTs
                  </TabsTrigger>
                  <TabsTrigger
                    value="about"
                    className="hover:bg-indigo-100 rounded-md transition-colors duration-200"
                  >
                    Thông tin
                  </TabsTrigger>
                  <TabsTrigger
                    value="campaigns"
                    className="hover:bg-indigo-100 rounded-md transition-colors duration-200"
                  >
                    Chiến dịch
                  </TabsTrigger>
                  <TabsTrigger
                    value="donations"
                    className="hover:bg-indigo-100 rounded-md transition-colors duration-200"
                  >
                    Đóng góp
                  </TabsTrigger>
                </TabsList>

                <TabsContent
                  value="about"
                  className="bg-white rounded-lg p-6 shadow-md transition-all duration-300 ease-in-out"
                >
                  <ProfileInfo
                    user={user}
                    onUpdateProfile={updateUserMutation}
                    isUpdatingProfile={false}
                    loading={loading}
                    onAvatarUpload={handleAvatarUpload}
                    showAvatar={false}
                  />
                </TabsContent>

                <TabsContent
                  value="campaigns"
                  className="bg-white rounded-lg p-6 shadow-md transition-all duration-300 ease-in-out"
                >
                  <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                    <div className="text-center text-muted-foreground py-10">
                      Chưa có chiến dịch nào
                    </div>
                  </div>
                </TabsContent>

                <TabsContent
                  value="donations"
                  className="bg-white rounded-lg p-6 shadow-md transition-all duration-300 ease-in-out"
                >
                  <div className="space-y-4">
                    <div className="text-center text-muted-foreground py-10">
                      Chưa có đóng góp nào
                    </div>
                  </div>
                </TabsContent>

                <TabsContent
                  value="nfts"
                  className="bg-white rounded-lg p-6 shadow-md transition-all duration-300 ease-in-out"
                >
                  {nftsError ? (
                    <div className="text-center py-10 text-red-500">
                      {nftsError}
                    </div>
                  ) : nftsLoading ? (
                    <div className="text-center py-10">
                      <div className="animate-spin h-8 w-8 border-4 border-primary border-t-transparent rounded-full mx-auto mb-4"></div>
                      Đang tải NFTs...
                    </div>
                  ) : (
                    <NFTGallery nfts={nfts} />
                  )}
                </TabsContent>
              </Tabs>
            </CardContent>
          </Card>
        </div>
      </div>
    </>
  );
};

export default Profile;

```

### src/module/user/pages/DiscoverBrowse.jsx
```jsx
import { Button } from "@/components/ui/button";
import { Separator } from "@/components/ui/separator";
import { getCampaignsByCategoryId } from "@/services/campaignService";
import { getCategoryById } from "@/services/categoryService";
import { useMutation, useQuery } from "@tanstack/react-query";
import { HeartHandshake } from "lucide-react";
import React from "react";
import { useParams } from "react-router-dom";
import CampaignCard from "../components/CampaignCard";
import Card from "@/components/Card/Card";

const DiscoverBrowse = () => {
  const { id } = useParams();
  const [filters, setFilters] = React.useState({
    page: 1,
    limit: 10,
  });

  const { data: category, isLoading } = useQuery({
    queryKey: ["category", id],
    queryFn: () => getCategoryById(id),
    enabled: !!id,
  });

  const { data: campaigns } = useQuery({
    queryKey: ["campaigns", id],
    queryFn: () => getCampaignsByCategoryId(id, filters.page, filters.limit),
    enabled: !!id,
  });

  return (
    <div className="container mx-auto px-4">
      {/* Hero Section */}
      <div className="py-6 md:py-10 grid grid-cols-1 md:grid-cols-3 gap-8 md:h-[60vh] items-center">
        <div className="col-span-1 md:col-span-2 space-y-4 md:space-y-8">
          <div className="text-3xl md:text-[56px] leading-tight md:leading-[67.2px] tracking-[-1.12px] font-semibold">
            Danh mục {category?.name?.toLowerCase()}{" "}
            <br className="hidden md:block" /> gây quỹ trên Chain4Good
          </div>
          <p className="text-base md:text-lg text-muted-foreground">
            Giúp đỡ người khác bằng cách quyên góp cho người gây quỹ của họ,
            hoặc bắt đầu một người cho người mà bạn quan tâm.
          </p>
          <Button className="w-fit text-sm md:text-base rounded-xl" size="lg">
            Tạo chiến dịch
          </Button>
        </div>
        <div className="col-span-1 h-[200px] md:h-full">
          <img
            src="/photo-category-animals@2x.jpg"
            className="w-full h-full object-cover rounded-xl shadow-sm"
            alt={`${category?.name} category`}
          />
        </div>
      </div>

      <Separator className="my-4 md:my-8" />

      {/* Campaign List Section */}
      <div>
        <div className="pb-4 text-xl md:text-[24px] leading-tight md:leading-[28.8px] font-semibold">
          Danh mục {category?.name?.toLowerCase()}
        </div>
        <div>
          {campaigns?.data?.length === 0 ? (
            <div className="text-center py-10 md:py-20">
              <HeartHandshake className="w-12 h-12 md:w-16 md:h-16 mx-auto text-gray-400 mb-4" />
              <h2 className="text-lg md:text-xl font-semibold">
                Chưa có chiến dịch nào
              </h2>
              <p className="text-sm md:text-base text-gray-600">
                Bắt đầu bằng cách tạo chiến dịch đầu tiên của bạn
              </p>
            </div>
          ) : (
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 md:gap-6">
              {campaigns?.data?.map((campaign) => (
                <Card key={campaign.id} campaign={campaign} />
              ))}
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

export default DiscoverBrowse;

```

### src/module/user/pages/Setting.jsx
```jsx
import React, { useState } from "react";
import { Button } from "@/components/ui/button";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog";
import { Trash2, Loader2 } from "lucide-react";
import { toast } from "sonner";
import { useNavigate } from "react-router-dom";
import useUserStore from "@/hooks/useUserStore";

const Setting = () => {
  const [isDialogOpen, setIsDialogOpen] = useState(false);
  const [isDeleting, setIsDeleting] = useState(false);
  const navigate = useNavigate();
  const { user } = useUserStore();

  const handleDeleteAccount = async () => {
    try {
      setIsDeleting(true);
      // Call API to delete account here
      //   await deleteAccount(user.id);
      toast.success("Tài khoản đã được xóa thành công");
      navigate("/logout");
    } catch (error) {
      toast.error("Không thể xóa tài khoản: " + error.message);
    } finally {
      setIsDeleting(false);
      setIsDialogOpen(false);
    }
  };

  return (
    <div className="container py-6 md:py-10 px-4 md:px-6">
      <h1 className="text-3xl font-bold mb-6">Cài đặt tài khoản</h1>

      <div className="grid gap-6">
        <Card className="border-destructive">
          <CardHeader>
            <CardTitle className="text-destructive">Vùng nguy hiểm</CardTitle>
            <CardDescription>
              Các thao tác trong vùng này có thể gây ra những thay đổi không thể
              hoàn tác
            </CardDescription>
          </CardHeader>
          <CardContent>
            <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>
              <DialogTrigger asChild>
                <Button variant="destructive" className="gap-2">
                  <Trash2 className="w-4 h-4" />
                  Xóa tài khoản
                </Button>
              </DialogTrigger>
              <DialogContent>
                <DialogHeader>
                  <DialogTitle>
                    Bạn có chắc chắn muốn xóa tài khoản?
                  </DialogTitle>
                  <DialogDescription>
                    Hành động này không thể hoàn tác. Điều này sẽ xóa vĩnh viễn
                    tài khoản và tất cả dữ liệu của bạn khỏi hệ thống.
                  </DialogDescription>
                </DialogHeader>
                <DialogFooter>
                  <Button
                    variant="ghost"
                    onClick={() => setIsDialogOpen(false)}
                  >
                    Hủy
                  </Button>
                  <Button
                    variant="destructive"
                    onClick={handleDeleteAccount}
                    disabled={isDeleting}
                  >
                    {isDeleting ? (
                      <>
                        <Loader2 className="w-4 h-4 mr-2 animate-spin" />
                        Đang xóa...
                      </>
                    ) : (
                      "Xóa tài khoản"
                    )}
                  </Button>
                </DialogFooter>
              </DialogContent>
            </Dialog>
          </CardContent>
        </Card>
      </div>
    </div>
  );
};

export default Setting;

```

### src/module/user/pages/MyCampaigns.jsx
```jsx
import CampaignSkeleton from "@/components/CampaignSkeleton";
import { Button } from "@/components/ui/button";
import { Skeleton } from "@/components/ui/skeleton";
import { CampaignStatus } from "@/constants/status";
import { TOKEN, useCharityDonation } from "@/hooks/useCharityDonation";
import {
  calculateGoal,
  getMyCampaigns,
  updateCampaign,
} from "@/services/campaignService";
import { useQuery, useQueryClient } from "@tanstack/react-query";
import { parseEther, parseUnits } from "ethers";
import { HeartHandshake, Plus } from "lucide-react";
import React, { useState } from "react";
import { Helmet } from "react-helmet-async";
import { Link } from "react-router-dom";
import { toast } from "sonner";
import CampaignCard from "../components/CampaignCard";

const MyCampaigns = () => {
  const [filters, setFilters] = React.useState({
    page: 1,
    limit: 10,
  });
  const { createCampaign } = useCharityDonation();
  const [isCreating, setIsCreating] = useState(false);
  const queryClient = useQueryClient();
  const [isClosing, setIsClosing] = useState(false);

  const {
    data: campaigns,
    isLoading,
    error,
  } = useQuery({
    queryKey: ["my-campaigns", filters],
    queryFn: () => getMyCampaigns(filters.page, filters.limit),
    enabled: true,
  });

  if (isLoading) {
    return (
      <div className="container mx-auto mt-16 px-4 min-h-screen">
        <div className="flex justify-between items-center mb-8">
          <div className="space-y-2">
            <Skeleton className="h-8 w-48" />
            <Skeleton className="h-4 w-64" />
          </div>
          <Skeleton className="h-10 w-40" />
        </div>

        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          {[...Array(6)].map((_, index) => (
            <CampaignSkeleton key={index} />
          ))}
        </div>
      </div>
    );
  }
  if (error) return <div>Error: {error.message}</div>;

  const handleCreateContract = async (campaign, selectedToken) => {
    setIsCreating(true);
    try {
      const now = new Date();
      const deadline = new Date(campaign.deadline);
      if (deadline <= now) {
        toast.error("Thời gian hết hạn chiến dịch đã quá hạn.");
        return;
      }

      const durationInSeconds = Math.floor((deadline - now) / 1000);

      const maxDurationSeconds = 365 * 24 * 60 * 60; // 1 năm
      if (durationInSeconds > maxDurationSeconds) {
        toast.error("Thời gian chiến dịch không được vượt quá 1 năm");
        return;
      }

      // Get token details using passed selectedToken
      const token = TOKEN[selectedToken];
      const tokenAddress = token.address;
      let tokenGoal;
      let goalInWei;
      if (selectedToken === "ETH" || selectedToken === "WETH") {
        const ethAmount = await calculateGoal(campaign.goal, token.tokenName);
        tokenGoal = ethAmount;
        goalInWei = parseEther(ethAmount.toFixed(token.decimals));
      } else {
        const usdAmount = await calculateGoal(campaign.goal, token.tokenName);
        tokenGoal = usdAmount;
        goalInWei = parseUnits(
          usdAmount.toFixed(token.decimals),
          token.decimals
        );
      }

      const { chainCampaignId, txHash } = await createCampaign(
        campaign.title,
        tokenAddress,
        goalInWei.toString(),
        durationInSeconds,
        campaign.isNoLimit
      );

      await updateCampaign(campaign.id, {
        chainCampaignId,
        txHash,
        status: CampaignStatus.ACTIVE,
        tokenAddress: token.address,
        tokenGoal: tokenGoal.toString(),
        tokenSymbol: token.symbol,
        tokenDecimals: token.decimals,
      });

      await queryClient.invalidateQueries(["my-campaigns"]);
      toast.success("Hợp đồng đã được tạo thành công!");
    } catch (error) {
      console.error("Error creating contract:", error);

      if (error.reason === "Duration too long") {
        toast.error(
          "Thời gian chiến dịch quá dài. Vui lòng chọn thời gian ngắn hơn."
        );
        return;
      }

      if (error.code === "ACTION_REJECTED") {
        toast.error("Bạn đã từ chối ký giao dịch");
        return;
      }

      toast.error(`Không thể tạo hợp đồng: ${error.message}`);
      throw error; // Re-throw to trigger catch block in CampaignCard
    } finally {
      setIsCreating(false);
    }
  };

  // const handleCloseCampaign = async (campaign) => {
  //   try {
  //     setIsClosing(true);
  //     await closeCampaign(campaign.chainCampaignId);
  //     await updateCampaign(campaign.id, {
  //       status: CampaignStatus.FINISHED,
  //     });
  //     toast.success("Đã đóng chiến dịch thành công!");
  //     queryClient.invalidateQueries(["my-campaigns"]);
  //   } catch (error) {
  //     console.error("Error closing campaign:", error);
  //     if (error.code === "ACTION_REJECTED") {
  //       toast.error("Bạn đã từ chối ký giao dịch");
  //       return;
  //     }
  //     toast.error("Không thể đóng chiến dịch: " + error.message);
  //   } finally {
  //     setIsClosing(false);
  //   }
  // };

  return (
    <>
      <Helmet>
        <title>Chiến dịch của tôi | Chain4Good</title>
        <meta
          name="description"
          content="Quản lý và theo dõi các chiến dịch gây quỹ từ thiện của bạn trên Chain4Good. Tạo chiến dịch mới và theo dõi tiến độ quyên góp."
        />
        <meta property="og:title" content="Chiến dịch của tôi | Chain4Good" />
        <meta
          property="og:description"
          content="Quản lý và theo dõi các chiến dịch gây quỹ từ thiện của bạn trên Chain4Good. Tạo chiến dịch mới và theo dõi tiến độ quyên góp."
        />
        <meta property="og:type" content="website" />
      </Helmet>

      <div className="container mx-auto mt-16 px-4 min-h-screen ">
        <div className="flex justify-between items-center mb-8">
          <div>
            <h1 className="text-2xl font-bold">Chiến dịch của tôi</h1>
            <p className="text-gray-600">
              Quản lý các chiến dịch gây quỹ của bạn
            </p>
          </div>
          <Link to="/create/fundraiser/category">
            <Button className="gap-2">
              <Plus className="w-4 h-4" />
              Tạo chiến dịch mới
            </Button>
          </Link>
        </div>

        {!campaigns || campaigns?.data?.length === 0 ? (
          <div className="text-center py-12">
            <HeartHandshake className="w-16 h-16 mx-auto text-gray-400 mb-4" />
            <h2 className="text-xl font-semibold">Chưa có chiến dịch nào</h2>
            <p className="text-gray-600">
              Bắt đầu bằng cách tạo chiến dịch đầu tiên của bạn
            </p>
          </div>
        ) : (
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            {campaigns?.data?.map((campaign) => (
              <CampaignCard
                key={campaign.id}
                campaign={campaign}
                handleCreateContract={handleCreateContract}
                // handleCloseCampaign={handleCloseCampaign}
                isClosing={isClosing}
              />
            ))}
          </div>
        )}
      </div>
    </>
  );
};

export default MyCampaigns;

```

### src/module/user/pages/Post.jsx
```jsx
import React, { useState, useEffect } from "react";
import { useParams } from "react-router-dom";
import { useQuery } from "@tanstack/react-query";
import { getPostBySlug } from "@/services/postService";
import LoadingSpinner from "@/components/LoadingSpinner";
import { motion } from "framer-motion";
import { Button } from "@/components/ui/button";
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import { Badge } from "@/components/ui/badge";
import { Separator } from "@/components/ui/separator";
import {
  Calendar,
  Clock,
  Eye,
  Heart,
  Share2,
  ArrowLeft,
  ArrowUp,
  Bookmark,
  MessageCircle,
  User,
  Tag,
  Globe,
  ChevronRight,
  Sparkles,
} from "lucide-react";
import { useNavigate } from "react-router-dom";
import { toast } from "sonner";

const Post = () => {
  const { slug } = useParams();
  const navigate = useNavigate();
  const [isLiked, setIsLiked] = useState(false);
  const [isBookmarked, setIsBookmarked] = useState(false);
  const [showScrollTop, setShowScrollTop] = useState(false);
  const [readingProgress, setReadingProgress] = useState(0);

  const {
    data: post,
    isLoading,
    error,
  } = useQuery({
    queryKey: ["post", slug],
    queryFn: () => getPostBySlug(slug),
    enabled: !!slug,
  });

  // Scroll progress tracking
  useEffect(() => {
    const handleScroll = () => {
      const totalHeight =
        document.documentElement.scrollHeight - window.innerHeight;
      const progress = (window.scrollY / totalHeight) * 100;
      setReadingProgress(progress);
      setShowScrollTop(window.scrollY > 300);
    };

    window.addEventListener("scroll", handleScroll);
    return () => window.removeEventListener("scroll", handleScroll);
  }, []);

  const handleShare = async () => {
    if (navigator.share) {
      try {
        await navigator.share({
          title: post?.data?.title,
          text: post?.data?.excerpt || post?.data?.title,
          url: window.location.href,
        });
      } catch (err) {
        console.log("Error sharing:", err);
      }
    } else {
      navigator.clipboard.writeText(window.location.href);
      toast.success("Đã sao chép liên kết!");
    }
  };

  const scrollToTop = () => {
    window.scrollTo({ top: 0, behavior: "smooth" });
  };

  const formatDate = (dateString) => {
    return new Date(dateString).toLocaleDateString("vi-VN", {
      year: "numeric",
      month: "long",
      day: "numeric",
    });
  };

  const formatReadTime = (content) => {
    const wordsPerMinute = 200;
    const words = content?.replace(/<[^>]*>/g, "").split(" ").length || 0;
    return Math.ceil(words / wordsPerMinute);
  };

  if (isLoading) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-gray-50 to-white flex items-center justify-center">
        <motion.div
          initial={{ opacity: 0, scale: 0.8 }}
          animate={{ opacity: 1, scale: 1 }}
          className="text-center"
        >
          <motion.div
            animate={{ rotate: 360 }}
            transition={{ duration: 2, repeat: Infinity, ease: "linear" }}
            className="mb-4"
          >
            <Sparkles className="w-12 h-12 text-primary mx-auto" />
          </motion.div>
          <LoadingSpinner message="Đang tải bài viết..." />
        </motion.div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-gray-50 to-white flex items-center justify-center">
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          className="text-center p-8 bg-white rounded-2xl shadow-xl border border-red-100"
        >
          <div className="w-16 h-16 bg-red-100 rounded-full flex items-center justify-center mx-auto mb-4">
            <Globe className="w-8 h-8 text-red-500" />
          </div>
          <h3 className="text-xl font-semibold text-gray-900 mb-2">
            Không thể tải bài viết
          </h3>
          <p className="text-gray-600 mb-4">{error.message}</p>
          <Button onClick={() => navigate(-1)} className="gap-2">
            <ArrowLeft className="w-4 h-4" />
            Quay lại
          </Button>
        </motion.div>
      </div>
    );
  }

  const container = {
    hidden: { opacity: 0 },
    show: {
      opacity: 1,
      transition: { staggerChildren: 0.1 },
    },
  };

  const item = {
    hidden: { opacity: 0, y: 20 },
    show: { opacity: 1, y: 0 },
  };

  return (
    <div
      className="min-h-screen bg-gradient-to-br from-gray-50 via-white to-gray-50"
      id="post"
    >
      {/* Reading Progress Bar */}
      <motion.div
        className="fixed top-0 left-0 h-1 bg-gradient-to-r from-primary to-primary/80 z-50 origin-left"
        style={{ width: `${readingProgress}%` }}
        initial={{ scaleX: 0 }}
        animate={{ scaleX: readingProgress / 100 }}
        transition={{ duration: 0.1 }}
      />

      {/* Scroll to Top Button */}
      <motion.button
        className={`fixed bottom-8 right-8 w-12 h-12 bg-primary text-white rounded-full shadow-lg z-40 flex items-center justify-center transition-all duration-300 ${
          showScrollTop
            ? "opacity-100 translate-y-0"
            : "opacity-0 translate-y-4 pointer-events-none"
        }`}
        onClick={scrollToTop}
        whileHover={{ scale: 1.1 }}
        whileTap={{ scale: 0.9 }}
      >
        <ArrowUp className="w-5 h-5" />
      </motion.button>

      <motion.div
        className="max-w-4xl mx-auto px-4 py-8"
        variants={container}
        initial="hidden"
        animate="show"
      >
        {/* Navigation Breadcrumb */}
        <motion.div variants={item} className="mb-8">
          <div className="flex items-center gap-2 text-sm text-muted-foreground">
            <button
              onClick={() => navigate(-1)}
              className="flex items-center gap-1 hover:text-primary transition-colors"
            >
              <ArrowLeft className="w-4 h-4" />
              Quay lại
            </button>
            <ChevronRight className="w-4 h-4" />
            <span>Bài viết</span>
            {post?.data?.topic?.name && (
              <>
                <ChevronRight className="w-4 h-4" />
                <span>{post.data.topic.name}</span>
              </>
            )}
          </div>
        </motion.div>

        {/* Article Header */}
        <motion.header variants={item} className="mb-8">
          {/* Topic Badge */}
          {post?.data?.topic?.name && (
            <motion.div
              initial={{ opacity: 0, scale: 0.8 }}
              animate={{ opacity: 1, scale: 1 }}
              className="mb-6"
            >
              <Badge
                variant="secondary"
                className="px-4 py-2 text-sm bg-primary/10 text-primary border-primary/20 hover:bg-primary/20 transition-colors"
              >
                <Tag className="w-3 h-3 mr-2" />
                {post.data.topic.name}
              </Badge>
            </motion.div>
          )}

          {/* Title */}
          <motion.h1
            className="text-4xl md:text-5xl lg:text-6xl font-bold bg-gradient-to-r from-gray-900 via-gray-800 to-gray-900 bg-clip-text text-transparent leading-tight mb-6"
            initial={{ opacity: 0, y: 30 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ delay: 0.2 }}
          >
            {post?.data?.title}
          </motion.h1>

          {/* Meta Information */}
          <motion.div
            className="flex flex-wrap items-center gap-6 text-sm text-muted-foreground mb-8"
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            transition={{ delay: 0.3 }}
          >
            <div className="flex items-center gap-2">
              <Calendar className="w-4 h-4" />
              <span>{formatDate(post?.data?.createdAt)}</span>
            </div>
            <div className="flex items-center gap-2">
              <Clock className="w-4 h-4" />
              <span>{formatReadTime(post?.data?.content)} phút đọc</span>
            </div>
            <div className="flex items-center gap-2">
              <Eye className="w-4 h-4" />
              <span>{post?.data?.views || 0} lượt xem</span>
            </div>
          </motion.div>

          {/* Author */}
          {post?.data?.author && (
            <motion.div
              className="flex items-center gap-4 p-4 bg-white/50 backdrop-blur-sm rounded-2xl border border-gray-200/50 mb-8"
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ delay: 0.4 }}
            >
              <Avatar className="w-12 h-12 ring-2 ring-primary/20">
                <AvatarImage src={post.data.author.avatar} />
                <AvatarFallback>
                  <User className="w-6 h-6" />
                </AvatarFallback>
              </Avatar>
              <div>
                <p className="font-semibold text-gray-900">
                  {post.data.author.name}
                </p>
                <p className="text-sm text-muted-foreground">
                  {post.data.author.bio || "Tác giả"}
                </p>
              </div>
            </motion.div>
          )}
        </motion.header>

        {/* Featured Image */}
        {post?.data?.thumbnail && (
          <motion.div variants={item} className="relative mb-12 group">
            <div className="relative aspect-video overflow-hidden rounded-3xl shadow-2xl">
              <motion.img
                src={post.data.thumbnail}
                alt={post.data.title}
                className="w-full h-full object-cover transition-transform duration-700 group-hover:scale-105"
                initial={{ opacity: 0, scale: 1.1 }}
                animate={{ opacity: 1, scale: 1 }}
                transition={{ duration: 0.8 }}
              />
              <div className="absolute inset-0 bg-gradient-to-t from-black/20 via-transparent to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-300" />
            </div>
          </motion.div>
        )}

        {/* Action Buttons */}
        <motion.div
          variants={item}
          className="flex items-center justify-between mb-12 p-4 bg-white/80 backdrop-blur-sm rounded-2xl border border-gray-200/50 shadow-lg"
        >
          <div className="flex items-center gap-4">
            <motion.button
              className={`flex items-center gap-2 px-4 py-2 rounded-full transition-all duration-300 ${
                isLiked
                  ? "bg-red-100 text-red-600 border border-red-200"
                  : "bg-gray-100 hover:bg-gray-200 text-gray-600"
              }`}
              onClick={() => setIsLiked(!isLiked)}
              whileHover={{ scale: 1.05 }}
              whileTap={{ scale: 0.95 }}
            >
              <Heart className={`w-4 h-4 ${isLiked ? "fill-current" : ""}`} />
              <span className="text-sm font-medium">
                {isLiked ? "Đã thích" : "Thích"}
              </span>
            </motion.button>

            <motion.button
              className={`flex items-center gap-2 px-4 py-2 rounded-full transition-all duration-300 ${
                isBookmarked
                  ? "bg-blue-100 text-blue-600 border border-blue-200"
                  : "bg-gray-100 hover:bg-gray-200 text-gray-600"
              }`}
              onClick={() => setIsBookmarked(!isBookmarked)}
              whileHover={{ scale: 1.05 }}
              whileTap={{ scale: 0.95 }}
            >
              <Bookmark
                className={`w-4 h-4 ${isBookmarked ? "fill-current" : ""}`}
              />
              <span className="text-sm font-medium">
                {isBookmarked ? "Đã lưu" : "Lưu"}
              </span>
            </motion.button>
          </div>

          <div className="flex items-center gap-2">
            <motion.button
              className="flex items-center gap-2 px-4 py-2 bg-gray-100 hover:bg-gray-200 text-gray-600 rounded-full transition-colors"
              onClick={handleShare}
              whileHover={{ scale: 1.05 }}
              whileTap={{ scale: 0.95 }}
            >
              <Share2 className="w-4 h-4" />
              <span className="text-sm font-medium">Chia sẻ</span>
            </motion.button>
          </div>
        </motion.div>

        <Separator className="mb-12" />

        {/* Article Content */}
        <motion.article
          variants={item}
          className="prose prose-lg max-w-none prose-headings:scroll-mt-20 prose-headings:font-bold prose-headings:text-gray-900 prose-p:text-gray-700 prose-p:leading-relaxed prose-a:text-primary prose-a:no-underline hover:prose-a:underline prose-strong:text-gray-900 prose-code:bg-gray-100 prose-code:px-2 prose-code:py-1 prose-code:rounded-md prose-blockquote:border-l-primary prose-blockquote:bg-primary/5 prose-blockquote:pl-6 prose-blockquote:py-4 prose-blockquote:rounded-r-lg prose-img:rounded-xl prose-img:shadow-lg"
        >
          <div dangerouslySetInnerHTML={{ __html: post?.data?.content }} />
        </motion.article>

        {/* Article Footer */}
        <motion.footer
          variants={item}
          className="mt-16 pt-8 border-t border-gray-200"
        >
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-4">
              <span className="text-sm text-muted-foreground">
                Bài viết hữu ích?
              </span>
              <Button variant="outline" size="sm" className="gap-2">
                <Heart className="w-4 h-4" />
                Cảm ơn tác giả
              </Button>
            </div>
            <div className="flex items-center gap-2">
              <Button variant="ghost" size="sm" className="gap-2">
                <MessageCircle className="w-4 h-4" />
                Bình luận
              </Button>
              <Button
                variant="ghost"
                size="sm"
                className="gap-2"
                onClick={handleShare}
              >
                <Share2 className="w-4 h-4" />
                Chia sẻ
              </Button>
            </div>
          </div>
        </motion.footer>
      </motion.div>
    </div>
  );
};

export default Post;

```

### src/module/user/pages/NFTs.jsx
```jsx
import { Badge } from "@/components/ui/badge";
import { Card } from "@/components/ui/card";
import { Skeleton } from "@/components/ui/skeleton";
import { useCharityHearts } from "@/hooks/useNFTContract";
import { Award, Medal, Trophy, Info } from "lucide-react";
import React, { useEffect, useState } from "react";
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from "@/components/ui/tooltip";
import { motion } from "framer-motion";

const ITEMS_PER_PAGE = 10;

const NFTs = () => {
  const [leaderboard, setLeaderboard] = useState(null);
  const [currentPage, setCurrentPage] = useState(1);
  const { getNFTLeaderboard } = useCharityHearts();

  useEffect(() => {
    const fetchData = async () => {
      const response = await getNFTLeaderboard();
      setLeaderboard(response);
    };
    fetchData();
  }, [getNFTLeaderboard]);

  const getRankIcon = (index) => {
    switch (index) {
      case 0:
        return <Trophy className="h-5 w-5 text-yellow-500" />;
      case 1:
        return <Medal className="h-5 w-5 text-gray-400" />;
      case 2:
        return <Award className="h-5 w-5 text-amber-600" />;
      default:
        return (
          <span className="font-bold text-muted-foreground">#{index + 1}</span>
        );
    }
  };

  const paginatedLeaderboard = leaderboard?.slice(
    (currentPage - 1) * ITEMS_PER_PAGE,
    currentPage * ITEMS_PER_PAGE
  );

  const totalPages = Math.ceil((leaderboard?.length || 0) / ITEMS_PER_PAGE);

  if (!leaderboard) {
    return (
      <Card className="p-6">
        <div className="space-y-4">
          <Skeleton className="h-8 w-[200px] animate-pulse" />
          <div className="space-y-3">
            {[1, 2, 3].map((i) => (
              <Skeleton key={i} className="h-16 w-full animate-pulse" />
            ))}
          </div>
        </div>
      </Card>
    );
  }

  return (
    <div className="p-8 container max-w-4xl mx-auto">
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        className="space-y-8"
      >
        <div className="flex items-center justify-between">
          <h2 className="text-3xl font-bold tracking-tight">
            Bảng xếp hạng NFT
          </h2>
          <Badge variant="secondary" className="px-4 py-1">
            {leaderboard.length} người dùng
          </Badge>
        </div>

        <div className="space-y-2">
          {paginatedLeaderboard.map((item, index) => (
            <motion.div
              initial={{ opacity: 0 }}
              animate={{ opacity: 1 }}
              transition={{ delay: index * 0.05 }}
              key={item.address}
              className="group relative bg-card hover:bg-accent rounded-lg p-4 transition-all duration-300"
            >
              <div className="flex items-center justify-between">
                <div className="flex items-center gap-6">
                  <div className="flex items-center justify-center w-10 h-10 rounded-full bg-muted">
                    {getRankIcon(index)}
                  </div>
                  <div className="space-y-1">
                    <TooltipProvider>
                      <Tooltip>
                        <TooltipTrigger>
                          <p className="font-mono text-sm flex items-center gap-2 opacity-70 hover:opacity-100 transition-opacity">
                            {item.shortAddress}
                            <Info className="h-3.5 w-3.5" />
                          </p>
                        </TooltipTrigger>
                        <TooltipContent>
                          <p className="text-xs">{item.address}</p>
                        </TooltipContent>
                      </Tooltip>
                    </TooltipProvider>
                    <div className="flex gap-3">
                      <span className="text-sm text-muted-foreground">
                        Đang giữ: {item.count}
                      </span>
                      <span className="text-sm text-muted-foreground">
                        Đã mint: {item.totalMinted}
                      </span>
                    </div>
                  </div>
                </div>

                <div className="text-right">
                  <span className="text-2xl font-semibold">{item.count}</span>
                  <span className="text-sm text-muted-foreground ml-1">
                    NFTs
                  </span>
                </div>
              </div>
            </motion.div>
          ))}
        </div>

        {leaderboard.length > ITEMS_PER_PAGE && (
          <div className="flex justify-center gap-1.5">
            {Array.from({ length: totalPages }).map((_, i) => (
              <button
                key={i}
                onClick={() => setCurrentPage(i + 1)}
                className={`w-8 h-8 rounded-md transition-colors ${
                  currentPage === i + 1
                    ? "bg-foreground text-background"
                    : "hover:bg-muted"
                }`}
              >
                {i + 1}
              </button>
            ))}
          </div>
        )}

        {leaderboard.length === 0 && (
          <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            className="text-center py-12 text-muted-foreground"
          >
            <p>Chưa có dữ liệu.</p>
          </motion.div>
        )}
      </motion.div>
    </div>
  );
};

export default NFTs;

```

### src/module/user/pages/Logout.jsx
```jsx
import { logout } from "@/services/authService";
import React, { useEffect } from "react";
import { toast } from "sonner";

const Logout = () => {
  useEffect(() => {
    const handleLogout = async () => {
      try {
        const message = await logout();
        toast.success(message);
        window.location.href = "/";
      } catch (error) {
        toast.error(error.message);
      }
    };
    handleLogout();
  }, []);
  return null;
};

export default Logout;

```

### src/module/user/pages/Discover.jsx
```jsx
import RemoteSVG from "@/components/RemoteSVG/RemoteSVG";
import { Button } from "@/components/ui/button";
import { useCategory } from "@/hooks/useCategory";
import React from "react";
import { Link } from "react-router-dom";
import { Helmet } from "react-helmet-async";

const Discover = () => {
  const { data: categories } = useCategory();

  return (
    <>
      <Helmet>
        <title>Khám phá chiến dịch | Chain4Good</title>
        <meta
          name="description"
          content="Khám phá các chiến dịch từ thiện theo danh mục. Tìm và quyên góp cho những dự án phù hợp với đam mê của bạn."
        />
        <meta property="og:title" content="Khám phá chiến dịch | Chain4Good" />
        <meta
          property="og:description"
          content="Khám phá các chiến dịch từ thiện theo danh mục. Tìm và quyên góp cho những dự án phù hợp với đam mê của bạn."
        />
        <meta property="og:type" content="website" />
      </Helmet>

      <div className="container mx-auto px-4">
        <div className="flex flex-col gap-4 md:gap-8 py-4 md:py-6">
          <h2 className="text-3xl md:text-7xl leading-tight md:leading-none tracking-tight">
            Tìm chiến dịch <br /> theo danh mục
          </h2>
          <p className="text-lg md:text-3xl text-muted-foreground">
            Mọi người trên thế giới đang quyên góp tiền cho những gì họ đang có{" "}
            <br className="hidden md:block" />
            đam mê về.
          </p>
          <Button className="w-fit text-sm md:text-base rounded-xl" size="lg">
            Tạo chiến dịch
          </Button>
        </div>

        <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-6 gap-4 md:gap-6">
          {categories?.data?.map((category) => (
            <Link
              key={category.id}
              to={`/discover/${category.id}`}
              className="flex flex-col items-center gap-2"
            >
              <div className="w-full aspect-square flex items-center hover:border rounded-md transition justify-center p-4 md:p-6">
                <img
                  src={category.icon}
                  className="w-3/4 md:w-2/4 fill-transparent"
                  alt={category.name}
                />
              </div>
              <div className="text-sm md:text-base text-center">
                {category.name}
              </div>
            </Link>
          ))}
        </div>
      </div>
    </>
  );
};

export default Discover;

```

### src/module/user/pages/VerifyEmail.jsx
```jsx
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { verifyEmail, resendVerificationEmail } from "@/services/authService";
import { useMutation } from "@tanstack/react-query";
import { useState } from "react";
import { useNavigate } from "react-router-dom";
import { toast } from "sonner";

const VerifyEmail = () => {
  const [otp, setOtp] = useState("");
  const navigate = useNavigate();

  const verifyMutation = useMutation({
    mutationFn: verifyEmail,
    onSuccess: () => {
      toast.success("Xác thực email thành công!");
      navigate("/sign-in");
    },
    onError: (error) => {
      toast.error(error.message || "Mã xác thực không đúng!");
    },
  });

  const resendMutation = useMutation({
    mutationFn: resendVerificationEmail,
    onSuccess: () => {
      toast.success("Đã gửi lại mã xác thực!");
    },
    onError: (error) => {
      toast.error(error.message || "Không thể gửi lại mã xác thực!");
    },
  });

  const handleVerify = (e) => {
    e.preventDefault();
    if (!otp) {
      toast.error("Vui lòng nhập mã xác thực!");
      return;
    }
    verifyMutation.mutate(otp);
  };

  const handleResend = () => {
    resendMutation.mutate();
  };

  return (
    <div
      className="w-screen h-screen flex items-center justify-center bg-cover"
      style={{ backgroundImage: "url(/desktop.jpg)" }}
    >
      <div className="w-[480px] bg-white rounded-3xl shadow-md flex gap-4 flex-col items-center p-8">
        <div>
          <img src="/logo.png" alt="Logo" className="w-[120px]" />
        </div>

        <div className="w-full flex flex-col items-center">
          <h1 className="text-xl font-semibold">Xác thực email</h1>
          <p className="text-center text-muted-foreground mt-2">
            Chúng tôi đã gửi mã xác thực đến email của bạn.
            <br />
            Vui lòng kiểm tra và nhập mã xác thực.
          </p>
        </div>

        <form onSubmit={handleVerify} className="space-y-4 w-full max-w-sm">
          <div className="space-y-2">
            <Label htmlFor="otp">Mã xác thực</Label>
            <Input
              id="otp"
              type="text"
              placeholder="Nhập mã xác thực"
              value={otp}
              onChange={(e) => setOtp(e.target.value)}
            />
          </div>

          <Button
            type="submit"
            className="w-full"
            disabled={verifyMutation.isPending}
          >
            {verifyMutation.isPending ? "Đang xác thực..." : "Xác thực"}
          </Button>
        </form>

        <div className="text-sm text-muted-foreground">
          Không nhận được mã?{" "}
          <Button
            variant="link"
            className="p-0 h-auto font-normal"
            onClick={handleResend}
            disabled={resendMutation.isPending}
          >
            Gửi lại mã xác thực
          </Button>
        </div>
      </div>
    </div>
  );
};

export default VerifyEmail;

```

### src/module/user/pages/NotFound.jsx
```jsx
import React from "react";
import { Button } from "@/components/ui/button";
import { Link } from "react-router-dom";
import { Home } from "lucide-react";
import { Helmet } from "react-helmet-async";

const NotFound = () => {
  return (
    <>
      <Helmet>
        <title>Không tìm thấy trang | Chain4Good</title>
        <meta
          name="description"
          content="Trang bạn đang tìm kiếm không tồn tại. Vui lòng kiểm tra lại đường dẫn hoặc trở về trang chủ."
        />
        <meta property="og:title" content="Không tìm thấy trang | Chain4Good" />
        <meta
          property="og:description"
          content="Trang bạn đang tìm kiếm không tồn tại. Vui lòng kiểm tra lại đường dẫn hoặc trở về trang chủ."
        />
        <meta property="og:type" content="website" />
      </Helmet>

      <div className="h-screen w-screen flex items-center justify-center flex-col bg-gray-50">
        <div className="text-center space-y-6">
          <img
            src="/404.svg"
            alt="404 illustration"
            className="w-64 h-64 mx-auto"
          />

          <h1 className="text-4xl font-bold text-gray-900">
            Oops! Trang không tồn tại
          </h1>

          <p className="text-gray-600 max-w-md mx-auto">
            Trang bạn đang tìm kiếm có thể đã bị xóa, đổi tên hoặc tạm thời
            không khả dụng.
          </p>

          <Link to="/">
            <Button variant="default" className="gap-2">
              <Home className="w-4 h-4" />
              Trở về trang chủ
            </Button>
          </Link>
        </div>
      </div>
    </>
  );
};

export default NotFound;

```

### src/module/user/pages/Fund.jsx
```jsx
import AnalysisResult from "@/components/AnalysisResult";
import AnalyzeButton from "@/components/AnalyzeButton";
import DonationChart from "@/components/DonationChart";
import FundSkeleton from "@/components/FundSkeleton";
import ReadMore from "@/components/ReadMore/ReadMore";
import ReportCampaignButton from "@/components/ReportCampaignButton";
import { Separator } from "@/components/ui/separator";
import { useCharityDonation } from "@/hooks/useCharityDonation";
import useUserStore from "@/hooks/useUserStore";
import { formatCampaign, formattedDonors } from "@/lib/utils";
import { analyzeCampaign } from "@/services/aiService";
import { getCampaignById, updateCampaign } from "@/services/campaignService";
import {
  createComment,
  getCommentsByCampaign,
} from "@/services/commentService";
import { getDonationHistory } from "@/services/donationService";
import { useMutation, useQuery, useQueryClient } from "@tanstack/react-query";
import { useEffect, useState } from "react";
import { Helmet } from "react-helmet-async";
import { useParams } from "react-router-dom";
import CommentBox from "../components/CommentBox";
import CreateProgressDialog from "../components/CreateProgressDialog";
import Forbidden from "../components/Forbidden";
import FundCreator from "../components/Fund/FundCreator";
import FundGallery from "../components/Fund/FundGallery";
import FundHeader from "../components/Fund/FundHeader";
import FundMedia from "../components/Fund/FundMedia";
import FundBox from "../components/FundBox";
import ProgressList from "../components/ProgressList";
import ShareModal from "../components/ShareModal";
import GenerateAudioButton from "@/components/GenerateAudioButton";
import AudioPlayer from "../components/AudioPlayer";

const Fund = () => {
  const { id } = useParams();
  const {
    getCampaign,
    getDonors,
    listenToFundsWithdrawn,
    getCampaignStatus,
    listenToDonationMade,
    getCampaignCloseHistory,
  } = useCharityDonation();
  const queryClient = useQueryClient();
  const [selectedImage, setSelectedImage] = useState(null);
  const [analysisResult, setAnalysisResult] = useState(null);
  const [campaignStatus, setCampaignStatus] = useState(null);
  const { user } = useUserStore();

  const {
    data: campaign,
    isLoading,
    error,
  } = useQuery({
    queryKey: ["campaign", id],
    queryFn: () => getCampaignById(id),

    enabled: !!id,
  });

  useEffect(() => {
    window.scrollTo(0, 0);
  }, []);

  const { data: onChainCampaign, isLoading: isOnChainLoading } = useQuery({
    queryKey: ["campaignOnChain", campaign?.chainCampaignId],
    queryFn: async () => {
      const data = await getCampaign(campaign.chainCampaignId);
      console.log("data", data);

      return formatCampaign(data);
    },
    enabled: !!campaign?.chainCampaignId,
  });

  const { data: donors, isLoading: isDonorsLoading } = useQuery({
    queryKey: ["donors", campaign?.chainCampaignId],
    queryFn: async () => {
      const data = await getDonors(campaign.chainCampaignId);
      return formattedDonors(data, onChainCampaign?.tokenAddress);
    },
    enabled: !!campaign?.chainCampaignId,
  });

  const { data: closeHistory, isLoading: isCloseHistoryLoading } = useQuery({
    queryKey: ["campaignCloseHistory", campaign?.chainCampaignId],
    queryFn: async () => {
      try {
        const history = await getCampaignCloseHistory(campaign.chainCampaignId);
        return history;
      } catch (error) {
        if (error?.code === 4100) {
          throw new Error("Vui lòng kết nối ví để xem thông tin này");
        }
        throw error;
      }
    },
    enabled: !!campaign?.chainCampaignId,
    retry: false, // Don't retry on error
  });

  useEffect(() => {
    let cleanupFunction;

    const setupListener = async () => {
      if (campaign?.chainCampaignId) {
        try {
          cleanupFunction = await listenToFundsWithdrawn(
            campaign.chainCampaignId,
            id
          );
        } catch (error) {
          console.error("Error setting up event listener:", error);
        }
      }
    };

    setupListener();

    return () => {
      if (typeof cleanupFunction === "function") {
        cleanupFunction();
      }
    };
  }, [campaign?.chainCampaignId, id, listenToFundsWithdrawn]);

  useEffect(() => {
    let cleanupFunction;

    const setupListener = async () => {
      if (campaign?.chainCampaignId) {
        try {
          cleanupFunction = await listenToDonationMade(
            campaign.chainCampaignId,
            () => {
              queryClient.invalidateQueries([
                "campaignOnChain",
                campaign.chainCampaignId,
              ]);
              queryClient.invalidateQueries([
                "donors",
                campaign.chainCampaignId,
              ]);
              queryClient.invalidateQueries(["donationHistory", id]);
            }
          );
        } catch (error) {
          console.error("Error setting up event listener:", error);
        }
      }
    };

    setupListener();

    return () => {
      if (typeof cleanupFunction === "function") {
        cleanupFunction();
      }
    };
  }, [campaign?.chainCampaignId, id, listenToDonationMade, queryClient]);

  useEffect(() => {
    const fetchCampaignStatus = async () => {
      try {
        const status = await getCampaignStatus(campaign.chainCampaignId);
        const { isActive, isSuccessful, remainingTime } = status;

        setCampaignStatus({
          isActive,
          isSuccessful,
          remainingTime: Number(remainingTime),
        });

        if (!isActive) {
          if (isSuccessful) {
            updateCampaign(campaign.id, {
              status: "FINISHED",
            });
          } else {
            updateCampaign(campaign.id, {
              status: "CANCELLED",
            });
          }
        }
      } catch (error) {
        console.error("Error fetching campaign status:", error);
      }
    };

    if (campaign?.chainCampaignId) {
      fetchCampaignStatus();
    }
  }, [campaign?.chainCampaignId, onChainCampaign]);

  const { data: comments, isLoading: isCommentsLoading } = useQuery({
    queryKey: ["comments", campaign?.id],
    queryFn: () => getCommentsByCampaign(campaign.id),
    enabled: !!campaign?.id,
  });

  const { mutate: addComment, isPending: isAddingComment } = useMutation({
    mutationFn: createComment,
    onSuccess: () => {
      queryClient.invalidateQueries(["comments", campaign?.id]);
    },
  });

  const { mutate: replyToComment, isPending: isReplying } = useMutation({
    mutationFn: createComment,
    onSuccess: () => {
      queryClient.invalidateQueries(["comments", campaign?.id]);
    },
  });

  const { mutate: analyzeContent, isPending: isAnalyzing } = useMutation({
    mutationFn: analyzeCampaign,
    onSuccess: (data) => {
      setAnalysisResult(data);
    },
    onError: (error) => {
      console.error("Analysis failed:", error);
    },
  });

  const handleAddComment = (content) => {
    addComment({
      content,
      campaignId: campaign.id,
    });
  };

  const handleReply = (content, parentId) => {
    replyToComment({
      content,
      campaignId: campaign.id,
      parentId,
    });
  };

  const handleAnalyzeCampaign = () => {
    if (!campaign) return;

    analyzeContent({
      title: campaign.title,
      description: campaign.description,
    });
  };

  const { data: donationHistory } = useQuery({
    queryKey: ["donationHistory", id],
    queryFn: () => getDonationHistory(id),
    enabled: !!id,
  });
  return (
    <>
      <Helmet>
        <title>
          {campaign?.title
            ? `${campaign.title} | Chain4Good`
            : "Chiến dịch | Chain4Good"}
        </title>
        <meta
          name="description"
          content={
            campaign?.description?.slice(0, 155) ||
            "Tham gia đóng góp vào chiến dịch từ thiện trên Chain4Good. Mọi giao dịch đều minh bạch và được lưu trữ trên blockchain."
          }
        />
        <meta
          property="og:title"
          content={
            campaign?.title
              ? `${campaign.title} | Chain4Good`
              : "Chiến dịch | Chain4Good"
          }
        />
        <meta
          property="og:description"
          content={
            campaign?.description?.slice(0, 155) ||
            "Tham gia đóng góp vào chiến dịch từ thiện trên Chain4Good. Mọi giao dịch đều minh bạch và được lưu trữ trên blockchain."
          }
        />
        <meta property="og:image" content={campaign?.cover?.url || ""} />
        <meta property="og:type" content="website" />
      </Helmet>

      <div className="container py-6 md:py-10 px-4 md:px-6">
        {isLoading && <FundSkeleton />}
        {error && error?.statusCode === 403 && <Forbidden />}
        {campaign && (
          <>
            <FundHeader campaign={campaign} />

            <div className="grid grid-cols-1 md:grid-cols-3 gap-4 md:gap-6">
              <div className="col-span-1 md:col-span-2">
                <FundMedia
                  cover={campaign.cover}
                  campaignStatus={campaignStatus}
                  onImageClick={setSelectedImage}
                />

                <FundCreator
                  campaign={campaign}
                  onChainCampaign={onChainCampaign}
                />

                <Separator className="my-6 md:my-8" />
                <div className="mb-6">
                  <div className="flex gap-2">
                    <AnalyzeButton
                      onClick={handleAnalyzeCampaign}
                      isAnalyzing={isAnalyzing}
                    />
                    {!campaign.audio && (
                      <GenerateAudioButton campaignId={campaign.id} />
                    )}
                  </div>
                  {(analysisResult || isAnalyzing) && (
                    <AnalysisResult
                      analysis={analysisResult}
                      isLoading={isAnalyzing}
                    />
                  )}
                </div>

                <Separator />
                {campaign?.audio && (
                  <>
                    <Separator className="my-6 md:my-8" />
                    <div className="mt-4 md:mt-6">
                      <AudioPlayer audioUrl={campaign.audio} />
                    </div>
                  </>
                )}
                <ReadMore
                  className="text-base md:text-lg mt-4 md:mt-6"
                  text={campaign?.description}
                />

                <Separator className="my-6 md:my-8" />
                <div className="mt-4 md:mt-6">
                  {campaign?.status === "ACTIVE" && (
                    <div className="flex justify-end">
                      {campaign?.userId === user?.id && (
                        <CreateProgressDialog campaignId={id} />
                      )}
                    </div>
                  )}
                  <ProgressList campaignId={id} />
                </div>

                <div className="mt-8">
                  {donationHistory && (
                    <DonationChart
                      symbol={campaign?.tokenSymbol}
                      data={donationHistory.data}
                      summary={donationHistory.summary}
                    />
                  )}
                </div>

                <Separator className="my-6 md:my-8" />
                <div className="mt-4 md:mt-6">
                  <FundGallery
                    images={campaign.images}
                    onImageClick={setSelectedImage}
                  />
                </div>

                <Separator className="my-6 md:my-8" />

                <div className="mt-6 md:mt-8">
                  <h2 className="text-xl md:text-2xl font-semibold mb-4">
                    Bình luận
                  </h2>
                  <CommentBox
                    comments={comments}
                    onAddComment={handleAddComment}
                    onReply={handleReply}
                    isLoading={isCommentsLoading}
                    isSubmitting={isAddingComment || isReplying}
                  />
                </div>
                {/* Add progress section */}
              </div>

              <div className="col-span-1 order-first md:order-none mb-4 md:mb-0">
                <FundBox
                  donors={donors}
                  onChainCampaign={onChainCampaign}
                  campaign={campaign}
                  isDonorsLoading={isDonorsLoading}
                />
                <div className="flex justify-end mt-4">
                  <ReportCampaignButton campaignId={campaign.id} />
                </div>
              </div>
            </div>

            <ShareModal />
          </>
        )}
      </div>
    </>
  );
};

export default Fund;

```

### src/module/user/pages/Fundraiser/Description.jsx
```jsx
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { CKEditor } from "@ckeditor/ckeditor5-react";
import ClassicEditor from "@ckeditor/ckeditor5-build-classic";
import "./editor.css";
import useCampaign from "@/hooks/useCampaign";
import { useLocation } from "react-router-dom";
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import {
  AlertCircle,
  FileText,
  Edit3,
  Eye,
  Wand2,
  Sparkles,
  Check,
  Info,
  Upload,
  Image as ImageIcon,
  Type,
  BookOpen,
} from "lucide-react";
import { Button } from "@/components/ui/button";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog";
import { optimizeCampaign } from "@/services/aiService";
import { uploadFile } from "@/services/uploadService";
import { useState } from "react";
import { toast } from "sonner";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { motion } from "framer-motion";

const Description = () => {
  const { newCampaign, changeCampaignValue } = useCampaign();
  const location = useLocation();
  const error = location.state?.error;
  const [optimizedData, setOptimizedData] = useState(null);
  const [isOptimizing, setIsOptimizing] = useState(false);
  const [showDialog, setShowDialog] = useState(false);

  const handleOptimize = async () => {
    if (!newCampaign.title || !newCampaign.description) {
      toast.error("Vui lòng nhập tiêu đề và mô tả trước khi tối ưu");
      return;
    }

    setIsOptimizing(true);
    try {
      const result = await optimizeCampaign({
        title: newCampaign.title,
        description: newCampaign.description,
      });
      setOptimizedData(result);
      setShowDialog(true);
    } catch (error) {
      toast.error("Không thể tối ưu: " + error.message);
    } finally {
      setIsOptimizing(false);
    }
  };

  const handleApplyOptimized = () => {
    if (optimizedData) {
      changeCampaignValue("title", optimizedData.optimizedTitle);
      changeCampaignValue("description", optimizedData.optimizedDescription);
      setShowDialog(false);
      toast.success("Đã áp dụng nội dung tối ưu");
    }
  };

  function uploadAdapter(loader) {
    return {
      upload: () => {
        // eslint-disable-next-line no-async-promise-executor
        return new Promise(async (resolve, reject) => {
          try {
            const file = await loader.file;
            const result = await uploadFile(file);
            resolve({
              default: result.url,
            });
          } catch (error) {
            reject(error);
            toast.error("Không thể tải ảnh lên: " + error.message);
          }
        });
      },
    };
  }

  function uploadPlugin(editor) {
    editor.plugins.get("FileRepository").createUploadAdapter = (loader) => {
      return uploadAdapter(loader);
    };
  }

  const container = {
    hidden: { opacity: 0 },
    show: {
      opacity: 1,
      transition: { staggerChildren: 0.1 },
    },
  };

  const item = {
    hidden: { opacity: 0, y: 20 },
    show: { opacity: 1, y: 0 },
  };

  return (
    <motion.div
      className="container mx-auto px-6 md:px-10 py-8"
      variants={container}
      initial="hidden"
      animate="show"
    >
      {/* Header Section */}
      <motion.div variants={item} className="text-center mb-8">
        <div className="inline-flex items-center gap-2 px-4 py-2 rounded-full border border-primary/20 bg-primary/5 backdrop-blur-sm mb-4">
          <FileText className="w-4 h-4 text-primary" />
          <span className="text-sm font-medium text-primary">
            Nội dung chiến dịch
          </span>
        </div>
        <h2 className="text-2xl md:text-3xl font-bold bg-gradient-to-r from-primary to-primary/80 bg-clip-text text-transparent mb-2">
          Chi tiết chiến dịch gây quỹ
        </h2>
        <p className="text-muted-foreground max-w-2xl mx-auto">
          Hãy mô tả chi tiết về mục đích và kế hoạch sử dụng quỹ để thu hút
          người quyên góp
        </p>
      </motion.div>

      {/* Error Alert */}
      {error && (
        <motion.div variants={item}>
          <Alert
            variant="destructive"
            className="mb-6 border-destructive/50 bg-destructive/10"
          >
            <AlertCircle className="h-4 w-4" />
            <AlertTitle>Có lỗi xảy ra</AlertTitle>
            <AlertDescription>{error}</AlertDescription>
          </Alert>
        </motion.div>
      )}

      {/* Main Content */}
      <motion.div variants={item} className="max-w-5xl mx-auto">
        <Tabs defaultValue="edit" className="w-full">
          <motion.div
            className="flex justify-center mb-6"
            whileHover={{ scale: 1.02 }}
          >
            <TabsList className="grid w-full max-w-md grid-cols-2 h-12 bg-muted/50 backdrop-blur-sm">
              <TabsTrigger
                value="edit"
                className="flex items-center gap-2 font-medium"
              >
                <Edit3 className="w-4 h-4" />
                Chỉnh sửa
              </TabsTrigger>
              <TabsTrigger
                value="preview"
                className="flex items-center gap-2 font-medium"
              >
                <Eye className="w-4 h-4" />
                Xem trước
              </TabsTrigger>
            </TabsList>
          </motion.div>

          <TabsContent value="edit" className="space-y-8">
            {/* Title Section */}
            <motion.div
              variants={item}
              className="relative p-6 bg-gradient-to-br from-white to-gray-50/50 rounded-2xl border border-gray-200/50 shadow-lg hover:shadow-xl transition-all duration-300"
            >
              <div className="absolute top-4 right-4">
                <motion.div
                  className="w-10 h-10 bg-primary/10 rounded-full flex items-center justify-center"
                  whileHover={{ scale: 1.1, rotate: 5 }}
                >
                  <Type className="w-5 h-5 text-primary" />
                </motion.div>
              </div>

              <div className="flex items-center gap-3 mb-4">
                <div className="w-8 h-8 bg-primary/20 rounded-lg flex items-center justify-center">
                  <BookOpen className="w-4 h-4 text-primary" />
                </div>
                <Label className="text-lg font-semibold text-gray-900">
                  Tiêu đề chiến dịch
                </Label>
              </div>

              <motion.div
                whileHover={{ scale: 1.01 }}
                whileTap={{ scale: 0.99 }}
              >
                <Input
                  size="lg"
                  placeholder="Nhập tiêu đề ấn tượng cho chiến dịch..."
                  value={newCampaign.title}
                  onChange={(e) => changeCampaignValue("title", e.target.value)}
                  className="text-lg h-12 border-2 hover:border-primary/50 focus:border-primary transition-colors"
                />
              </motion.div>

              {newCampaign.title && (
                <motion.div
                  initial={{ opacity: 0, height: 0 }}
                  animate={{ opacity: 1, height: "auto" }}
                  className="mt-3 p-3 bg-primary/5 rounded-lg border border-primary/20"
                >
                  <div className="flex items-center gap-2 text-sm text-primary">
                    <Check className="w-4 h-4" />
                    <span>Tiêu đề: {newCampaign.title.length} ký tự</span>
                  </div>
                </motion.div>
              )}
            </motion.div>

            {/* Description Section */}
            <motion.div
              variants={item}
              className="relative p-6 bg-gradient-to-br from-white to-gray-50/50 rounded-2xl border border-gray-200/50 shadow-lg hover:shadow-xl transition-all duration-300"
            >
              <div className="absolute top-4 right-4">
                <motion.div
                  className="w-10 h-10 bg-primary/10 rounded-full flex items-center justify-center"
                  whileHover={{ scale: 1.1, rotate: 5 }}
                >
                  <Edit3 className="w-5 h-5 text-primary" />
                </motion.div>
              </div>

              <div className="flex items-center gap-3 mb-4">
                <div className="w-8 h-8 bg-primary/20 rounded-lg flex items-center justify-center">
                  <FileText className="w-4 h-4 text-primary" />
                </div>
                <div>
                  <Label className="text-lg font-semibold text-gray-900">
                    Mô tả chi tiết
                  </Label>
                  <p className="text-sm text-muted-foreground">
                    Sử dụng editor để tạo nội dung phong phú với hình ảnh và
                    định dạng
                  </p>
                </div>
              </div>

              <motion.div
                className="border-2 border-dashed border-gray-200 rounded-xl overflow-hidden hover:border-primary/50 transition-colors duration-300"
                whileHover={{ scale: 1.005 }}
              >
                <CKEditor
                  editor={ClassicEditor}
                  data={newCampaign.description}
                  onChange={(event, editor) => {
                    const data = editor.getData();
                    changeCampaignValue("description", data);
                  }}
                  config={{
                    extraPlugins: [uploadPlugin],
                    toolbar: {
                      items: [
                        "heading",
                        "|",
                        "bold",
                        "italic",
                        "link",
                        "bulletedList",
                        "numberedList",
                        "|",
                        "uploadImage",
                        "mediaEmbed",
                        "|",
                        "outdent",
                        "indent",
                        "|",
                        "blockQuote",
                        "insertTable",
                        "undo",
                        "redo",
                      ],
                      shouldNotGroupWhenFull: true,
                    },
                    image: {
                      toolbar: [
                        "imageStyle:inline",
                        "imageStyle:block",
                        "imageStyle:side",
                        "|",
                        "toggleImageCaption",
                        "imageTextAlternative",
                      ],
                      upload: {
                        types: ["jpeg", "png", "gif", "webp"],
                      },
                    },
                    placeholder:
                      "Hãy chia sẻ câu chuyện, mục đích và kế hoạch sử dụng quỹ một cách chi tiết...",
                    heading: {
                      options: [
                        {
                          model: "paragraph",
                          title: "Paragraph",
                          class: "ck-heading_paragraph",
                        },
                        {
                          model: "heading1",
                          view: "h1",
                          title: "Heading 1",
                          class: "ck-heading_heading1",
                        },
                        {
                          model: "heading2",
                          view: "h2",
                          title: "Heading 2",
                          class: "ck-heading_heading2",
                        },
                      ],
                    },
                  }}
                />
              </motion.div>

              {/* Editor Features */}
              <motion.div
                initial={{ opacity: 0 }}
                animate={{ opacity: 1 }}
                transition={{ delay: 0.3 }}
                className="mt-4 p-3 bg-blue-50 rounded-lg border border-blue-200/50"
              >
                <div className="flex items-center gap-4 text-sm text-blue-800">
                  <div className="flex items-center gap-1">
                    <Upload className="w-3 h-3" />
                    <span>Tải ảnh</span>
                  </div>
                  <div className="flex items-center gap-1">
                    <ImageIcon className="w-3 h-3" />
                    <span>Media</span>
                  </div>
                  <div className="flex items-center gap-1">
                    <Type className="w-3 h-3" />
                    <span>Định dạng</span>
                  </div>
                </div>
              </motion.div>
            </motion.div>
          </TabsContent>

          <TabsContent value="preview" className="space-y-6">
            <motion.div
              variants={item}
              className="relative p-8 bg-gradient-to-br from-white to-gray-50/50 rounded-2xl border border-gray-200/50 shadow-lg"
            >
              <div className="absolute top-4 right-4">
                <motion.div
                  className="w-10 h-10 bg-primary/10 rounded-full flex items-center justify-center"
                  whileHover={{ scale: 1.1, rotate: 5 }}
                >
                  <Eye className="w-5 h-5 text-primary" />
                </motion.div>
              </div>

              <div className="space-y-8">
                <div>
                  <div className="flex items-center gap-3 mb-4">
                    <div className="w-8 h-8 bg-primary/20 rounded-lg flex items-center justify-center">
                      <BookOpen className="w-4 h-4 text-primary" />
                    </div>
                    <h3 className="text-xl font-bold text-gray-900">Tiêu đề</h3>
                  </div>
                  <div className="prose max-w-none">
                    {newCampaign.title ? (
                      <motion.h1
                        className="text-2xl md:text-3xl font-bold text-gray-900 leading-tight"
                        initial={{ opacity: 0 }}
                        animate={{ opacity: 1 }}
                      >
                        {newCampaign.title}
                      </motion.h1>
                    ) : (
                      <p className="text-muted-foreground italic p-4 border-2 border-dashed rounded-lg">
                        Chưa có tiêu đề...
                      </p>
                    )}
                  </div>
                </div>

                <div>
                  <div className="flex items-center gap-3 mb-4">
                    <div className="w-8 h-8 bg-primary/20 rounded-lg flex items-center justify-center">
                      <FileText className="w-4 h-4 text-primary" />
                    </div>
                    <h3 className="text-xl font-bold text-gray-900">Mô tả</h3>
                  </div>
                  <div className="prose prose-lg max-w-none">
                    {newCampaign.description ? (
                      <motion.div
                        className="bg-white rounded-lg p-6 border shadow-sm"
                        initial={{ opacity: 0 }}
                        animate={{ opacity: 1 }}
                        dangerouslySetInnerHTML={{
                          __html: newCampaign.description,
                        }}
                      />
                    ) : (
                      <p className="text-muted-foreground italic p-6 border-2 border-dashed rounded-lg">
                        Chưa có nội dung mô tả...
                      </p>
                    )}
                  </div>
                </div>
              </div>
            </motion.div>
          </TabsContent>
        </Tabs>

        {/* AI Optimization Section */}
        <motion.div variants={item} className="flex justify-end mt-8">
          <Dialog open={showDialog} onOpenChange={setShowDialog}>
            <DialogTrigger asChild>
              <motion.div
                whileHover={{ scale: 1.05 }}
                whileTap={{ scale: 0.95 }}
              >
                <Button
                  variant="outline"
                  className="gap-2 h-12 px-6 border-2 hover:border-primary/50 hover:bg-primary/5 transition-all duration-300"
                  onClick={handleOptimize}
                  disabled={isOptimizing}
                >
                  {isOptimizing ? (
                    <motion.div
                      animate={{ rotate: 360 }}
                      transition={{
                        duration: 2,
                        repeat: Infinity,
                        ease: "linear",
                      }}
                    >
                      <Sparkles className="w-4 h-4" />
                    </motion.div>
                  ) : (
                    <Wand2 className="w-4 h-4" />
                  )}
                  {isOptimizing ? "Đang tối ưu..." : "Tối ưu nội dung bằng AI"}
                </Button>
              </motion.div>
            </DialogTrigger>

            <DialogContent className="max-w-4xl max-h-[85vh] overflow-y-auto">
              <DialogHeader>
                <DialogTitle className="flex items-center gap-2 text-xl">
                  <Sparkles className="w-5 h-5 text-primary" />
                  Nội dung đã được tối ưu bằng AI
                </DialogTitle>
                <DialogDescription className="text-base">
                  {isOptimizing
                    ? "Đang phân tích và tối ưu nội dung của bạn..."
                    : "AI đã tối ưu nội dung để thu hút người quyên góp hiệu quả hơn. Bạn có thể áp dụng hoặc giữ nguyên nội dung cũ."}
                </DialogDescription>
              </DialogHeader>

              {isOptimizing ? (
                <div className="py-12 flex flex-col items-center gap-6">
                  <motion.div
                    animate={{ rotate: 360 }}
                    transition={{
                      duration: 2,
                      repeat: Infinity,
                      ease: "linear",
                    }}
                    className="w-16 h-16 border-4 border-primary/20 border-t-primary rounded-full"
                  />
                  <div className="text-center space-y-2">
                    <p className="text-lg font-medium">
                      Đang tối ưu nội dung bằng AI...
                    </p>
                    <p className="text-sm text-muted-foreground">
                      Quá trình này có thể mất vài giây
                    </p>
                  </div>
                </div>
              ) : (
                <div className="space-y-6 py-4">
                  <div className="space-y-3">
                    <div className="flex items-center gap-2">
                      <BookOpen className="w-4 h-4 text-primary" />
                      <h3 className="font-semibold text-lg">
                        Tiêu đề đã tối ưu
                      </h3>
                    </div>
                    <div className="p-4 border-2 border-primary/20 rounded-xl bg-primary/5">
                      <p className="text-lg font-medium">
                        {optimizedData?.optimizedTitle}
                      </p>
                    </div>
                  </div>

                  <div className="space-y-3">
                    <div className="flex items-center gap-2">
                      <FileText className="w-4 h-4 text-primary" />
                      <h3 className="font-semibold text-lg">Mô tả đã tối ưu</h3>
                    </div>
                    <div
                      className="p-4 border-2 border-primary/20 rounded-xl bg-primary/5 prose max-w-none"
                      dangerouslySetInnerHTML={{
                        __html: optimizedData?.optimizedDescription,
                      }}
                    />
                  </div>
                </div>
              )}

              <DialogFooter className="gap-3">
                <Button variant="outline" onClick={() => setShowDialog(false)}>
                  Giữ nội dung cũ
                </Button>
                <Button
                  onClick={handleApplyOptimized}
                  disabled={isOptimizing}
                  className="gap-2"
                >
                  <Check className="w-4 h-4" />
                  Áp dụng nội dung mới
                </Button>
              </DialogFooter>
            </DialogContent>
          </Dialog>
        </motion.div>

        {/* Tips Section */}
        <motion.div
          variants={item}
          className="mt-8 p-6 bg-gradient-to-r from-blue-50 to-primary/5 rounded-2xl border border-blue-200/50"
        >
          <div className="flex items-start gap-4">
            <div className="w-8 h-8 bg-blue-100 rounded-lg flex items-center justify-center flex-shrink-0 mt-1">
              <Info className="w-4 h-4 text-blue-600" />
            </div>
            <div>
              <h3 className="font-semibold text-blue-900 mb-2">
                Mẹo viết nội dung thu hút
              </h3>
              <ul className="text-sm text-blue-800 space-y-1">
                <li>
                  • <strong>Kể câu chuyện:</strong> Chia sẻ hoàn cảnh cụ thể và
                  cảm xúc thật
                </li>
                <li>
                  • <strong>Minh bạch:</strong> Giải thích rõ cách sử dụng từng
                  khoản tiền
                </li>
                <li>
                  • <strong>Thêm hình ảnh:</strong> Visual giúp tăng tính thuyết
                  phục
                </li>
                <li>
                  • <strong>Gọi hành động:</strong> Khuyến khích người đọc quyên
                  góp
                </li>
              </ul>
            </div>
          </div>
        </motion.div>
      </motion.div>
    </motion.div>
  );
};

export default Description;

```

### src/module/user/pages/Fundraiser/Type.jsx
```jsx
import { ToggleGroup, ToggleGroupItem } from "@/components/ui/toggle-group";
import useCampaign from "@/hooks/useCampaign";
import { useFundraiseType } from "@/hooks/useFundraiseType";
import React, { useEffect, useState } from "react";
import { useLocation } from "react-router-dom";
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import {
  AlertCircle,
  Users,
  Heart,
  Building,
  Check,
  Info,
  Target,
  Sparkles,
} from "lucide-react";
import { motion } from "framer-motion";
import { LoadingSpinner } from "@/components/ui/loading";
import { truncate } from "lodash";

let images = ["/you-self.png", "/someone-else.png", "/charity.png"];

const Type = () => {
  const { data, isLoading } = useFundraiseType();
  const { newCampaign, changeCampaignValue } = useCampaign();
  const [fundraiseTypes, setFundraiseTypes] = useState([]);
  const location = useLocation();
  const error = location.state?.error;

  const getTypeIcon = (index) => {
    const icons = [
      <Users className="w-5 h-5" />,
      <Heart className="w-5 h-5" />,
      <Building className="w-5 h-5" />,
    ];
    return icons[index] || <Target className="w-5 h-5" />;
  };

  useEffect(() => {
    let fds = data?.map((item, index) => {
      return {
        image: images[index],
        label: item.name,
        value: item.id,
        description: item.description,
        icon: getTypeIcon(index),
      };
    });
    setFundraiseTypes(fds);
  }, [data]);

  const container = {
    hidden: { opacity: 0 },
    show: {
      opacity: 1,
      transition: { staggerChildren: 0.1 },
    },
  };

  const item = {
    hidden: { opacity: 0, y: 20 },
    show: { opacity: 1, y: 0 },
  };

  if (isLoading) {
    return (
      <div className="container mx-auto px-6 md:px-10 py-8 flex items-center justify-center min-h-[400px]">
        <div className="text-center space-y-4">
          <div className="w-16 h-16 bg-primary/10 rounded-full flex items-center justify-center mx-auto">
            <motion.div
              animate={{ rotate: 360 }}
              transition={{ duration: 2, repeat: Infinity, ease: "linear" }}
            >
              <Sparkles className="w-8 h-8 text-primary" />
            </motion.div>
          </div>
          <LoadingSpinner message="Đang tải loại chiến dịch..." />
        </div>
      </div>
    );
  }

  return (
    <motion.div
      className="container mx-auto px-6 md:px-10 py-8"
      variants={container}
      initial="hidden"
      animate="show"
    >
      {/* Header Section */}
      <motion.div variants={item} className="text-center mb-8">
        <div className="inline-flex items-center gap-2 px-4 py-2 rounded-full border border-primary/20 bg-primary/5 backdrop-blur-sm mb-4">
          <Target className="w-4 h-4 text-primary" />
          <span className="text-sm font-medium text-primary">
            Chọn đối tượng thụ hưởng
          </span>
        </div>
        <h2 className="text-2xl md:text-3xl font-bold bg-gradient-to-r from-primary to-primary/80 bg-clip-text text-transparent mb-2">
          Bạn đang kêu gọi gây quỹ cho đối tượng nào?
        </h2>
        <p className="text-muted-foreground max-w-2xl mx-auto">
          Chọn đối tượng phù hợp để chúng tôi có thể hỗ trợ bạn tạo chiến dịch
          hiệu quả nhất
        </p>
      </motion.div>

      {/* Error Alert */}
      {error && (
        <motion.div variants={item}>
          <Alert
            variant="destructive"
            className="mb-6 border-destructive/50 bg-destructive/10"
          >
            <AlertCircle className="h-4 w-4" />
            <AlertTitle>Có lỗi xảy ra</AlertTitle>
            <AlertDescription>{error}</AlertDescription>
          </Alert>
        </motion.div>
      )}

      {/* Types Selection */}
      <motion.div variants={item} className="max-w-3xl mx-auto">
        <ToggleGroup
          type="single"
          className="w-full flex flex-col gap-4"
          value={newCampaign.fundraiseTypeId}
          onValueChange={(value) =>
            changeCampaignValue("fundraiseTypeId", value)
          }
        >
          {fundraiseTypes?.map((typeItem, index) => (
            <motion.div
              key={typeItem.value}
              initial={{ opacity: 0, scale: 0.95 }}
              animate={{ opacity: 1, scale: 1 }}
              transition={{ delay: index * 0.1 }}
              whileHover={{ scale: 1.02, y: -2 }}
              whileTap={{ scale: 0.98 }}
            >
              <ToggleGroupItem
                className={`
                  relative w-full border-2 rounded-2xl text-base h-auto p-6 gap-6 flex justify-start
                  transition-all duration-300 group
                  hover:border-primary/50 hover:bg-primary/5 hover:shadow-lg hover:shadow-primary/10
                  data-[state=on]:border-primary data-[state=on]:bg-primary/10 
                  data-[state=on]:text-primary data-[state=on]:shadow-xl
                  data-[state=on]:shadow-primary/25
                `}
                value={typeItem.value}
                aria-label={`Select ${typeItem.label} fundraise type`}
              >
                {/* Background Gradient Effect */}
                <div className="absolute inset-0 bg-gradient-to-r from-primary/5 via-transparent to-primary/5 rounded-2xl opacity-0 group-hover:opacity-100 group-data-[state=on]:opacity-100 transition-opacity duration-300" />

                {/* Image Section */}
                <div className="relative flex-shrink-0">
                  <motion.div
                    className="relative w-20 h-20 rounded-2xl overflow-hidden shadow-lg"
                    whileHover={{ scale: 1.05, rotate: 2 }}
                    transition={{ type: "spring", stiffness: 300 }}
                  >
                    <img
                      src={typeItem.image}
                      alt={typeItem.label}
                      className="w-full h-full object-cover"
                    />
                    {/* Image overlay */}
                    <div className="absolute inset-0 bg-gradient-to-t from-black/20 to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-300" />
                  </motion.div>

                  {/* Icon Badge */}
                  <motion.div
                    className="absolute -top-2 -right-2 w-8 h-8 bg-primary/20 rounded-full flex items-center justify-center text-primary border-2 border-white shadow-md"
                    initial={{ scale: 0 }}
                    animate={{ scale: 1 }}
                    transition={{ delay: 0.3 + index * 0.1 }}
                    whileHover={{ scale: 1.1, rotate: 10 }}
                  >
                    {typeItem.icon}
                  </motion.div>
                </div>

                {/* Content Section */}
                <div className="flex-1 text-left min-w-0">
                  <motion.h3
                    className="font-bold text-lg md:text-xl mb-2 group-data-[state=on]:text-primary transition-colors duration-300"
                    whileHover={{ x: 5 }}
                  >
                    {typeItem.label}
                  </motion.h3>
                  <p className="text-muted-foreground text-sm md:text-base leading-relaxed">
                    {truncate(typeItem.description, { length: 76 })}
                  </p>

                  {/* Features list (if needed) */}
                  <motion.div
                    className="mt-3 opacity-0 group-hover:opacity-100 group-data-[state=on]:opacity-100 transition-all duration-300"
                    initial={{ height: 0 }}
                    whileHover={{ height: "auto" }}
                  >
                    <div className="flex items-center gap-2 text-xs text-primary">
                      <Check className="w-3 h-3" />
                      <span>Phù hợp cho loại chiến dịch này</span>
                    </div>
                  </motion.div>
                </div>

                {/* Selection Indicator */}
                {newCampaign.fundraiseTypeId === typeItem.value && (
                  <motion.div
                    initial={{ scale: 0, rotate: -180 }}
                    animate={{ scale: 1, rotate: 0 }}
                    className="absolute top-4 right-4 w-8 h-8 bg-primary rounded-full flex items-center justify-center shadow-lg"
                  >
                    <Check className="w-4 h-4 text-white" />
                  </motion.div>
                )}

                {/* Glow Effect */}
                <div className="absolute inset-0 rounded-2xl bg-gradient-to-r from-primary/20 via-primary/10 to-primary/20 blur-xl opacity-0 group-data-[state=on]:opacity-50 transition-opacity duration-500 -z-10" />
              </ToggleGroupItem>
            </motion.div>
          ))}
        </ToggleGroup>

        {/* Selected Confirmation */}
        {newCampaign.fundraiseTypeId && (
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            className="mt-6 p-4 bg-primary/5 rounded-xl border border-primary/20"
          >
            <div className="flex items-center gap-3">
              <div className="w-8 h-8 bg-primary/20 rounded-full flex items-center justify-center">
                <Check className="w-4 h-4 text-primary" />
              </div>
              <div>
                <h4 className="font-semibold text-primary">
                  Đã chọn:{" "}
                  {
                    fundraiseTypes?.find(
                      (t) => t.value === newCampaign.fundraiseTypeId
                    )?.label
                  }
                </h4>
                <p className="text-sm text-muted-foreground">
                  Bạn có thể thay đổi lựa chọn bất kỳ lúc nào
                </p>
              </div>
            </div>
          </motion.div>
        )}

        {/* Tips Section */}
        <motion.div
          variants={item}
          className="mt-8 p-6 bg-gradient-to-r from-blue-50 to-primary/5 rounded-2xl border border-blue-200/50"
        >
          <div className="flex items-start gap-4">
            <div className="w-8 h-8 bg-blue-100 rounded-lg flex items-center justify-center flex-shrink-0 mt-1">
              <Info className="w-4 h-4 text-blue-600" />
            </div>
            <div>
              <h3 className="font-semibold text-blue-900 mb-2">
                Lời khuyên khi chọn đối tượng
              </h3>
              <ul className="text-sm text-blue-800 space-y-1">
                <li>
                  • <strong>Cho bản thân:</strong> Phù hợp với chi phí y tế,
                  giáo dục cá nhân
                </li>
                <li>
                  • <strong>Cho người khác:</strong> Giúp đỡ gia đình, bạn bè
                  gặp khó khăn
                </li>
                <li>
                  • <strong>Từ thiện:</strong> Các dự án cộng đồng, tổ chức phi
                  lợi nhuận
                </li>
              </ul>
            </div>
          </div>
        </motion.div>
      </motion.div>
    </motion.div>
  );
};

export default Type;

```

### src/module/user/pages/Fundraiser/Goal.jsx
```jsx
import { Input } from "@/components/ui/input";
import React, { useState, useEffect } from "react";
import axios from "axios";
import { Label } from "@/components/ui/label";
import { useFormContext } from "react-hook-form";
import useCampaign from "@/hooks/useCampaign";
import { cn } from "@/lib/utils";
import { format } from "date-fns";
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from "@/components/ui/popover";
import { Button } from "@/components/ui/button";
import {
  AlertCircle,
  CalendarIcon,
  Target,
  TrendingUp,
  DollarSign,
  Coins,
  RefreshCw,
  Info,
  Calendar,
  Clock,
} from "lucide-react";
import { Calendar as CalendarComponent } from "@/components/ui/calendar";
import { useLocation } from "react-router-dom";
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { motion } from "framer-motion";

const Goal = () => {
  const [vnd, setVnd] = useState("");
  const [goal, setGoal] = useState(0);
  const [eth, setEth] = useState(0);
  const [exchangeRate, setExchangeRate] = useState(0);
  const [isLoadingRate, setIsLoadingRate] = useState(true);
  const { newCampaign, changeCampaignValue } = useCampaign();
  const location = useLocation();
  const error = location.state?.error;

  // Lấy tỷ giá ETH-VND từ API
  const fetchExchangeRate = async () => {
    setIsLoadingRate(true);
    try {
      const response = await axios.get(
        "https://api.coingecko.com/api/v3/simple/price?ids=ethereum&vs_currencies=vnd"
      );
      setExchangeRate(response.data.ethereum.vnd);
    } catch (error) {
      console.error("Error fetching exchange rate:", error);
    } finally {
      setIsLoadingRate(false);
    }
  };

  useEffect(() => {
    fetchExchangeRate();
  }, []);

  const formatVND = (value) => {
    const number = value.replace(/\D/g, "");
    if (number === "") return "";
    return parseInt(number).toLocaleString("vi-VN");
  };

  const handleChange = (e) => {
    const rawValue = e.target.value;
    const numericValue = rawValue.replace(/\D/g, "");

    setVnd(formatVND(rawValue));
    setGoal(Number(numericValue));
    if (numericValue === "") {
      setEth(0);
    } else {
      const number = parseFloat(numericValue);
      setEth(number / exchangeRate);
    }
  };

  useEffect(() => {
    changeCampaignValue("goal", goal);
  }, [goal, changeCampaignValue]);

  const container = {
    hidden: { opacity: 0 },
    show: {
      opacity: 1,
      transition: { staggerChildren: 0.1 },
    },
  };

  const item = {
    hidden: { opacity: 0, y: 20 },
    show: { opacity: 1, y: 0 },
  };

  return (
    <motion.div
      className="container mx-auto px-6 md:px-10 py-8"
      variants={container}
      initial="hidden"
      animate="show"
    >
      {/* Header Section */}
      <motion.div variants={item} className="text-center mb-8">
        <div className="inline-flex items-center gap-2 px-4 py-2 rounded-full border border-primary/20 bg-primary/5 backdrop-blur-sm mb-4">
          <Target className="w-4 h-4 text-primary" />
          <span className="text-sm font-medium text-primary">
            Thiết lập mục tiêu
          </span>
        </div>
        <h2 className="text-2xl md:text-3xl font-bold bg-gradient-to-r from-primary to-primary/80 bg-clip-text text-transparent mb-2">
          Đặt mục tiêu cho chiến dịch
        </h2>
        <p className="text-muted-foreground max-w-2xl mx-auto">
          Xác định mục tiêu quyên góp và thời gian để tạo động lực cho cộng đồng
        </p>
      </motion.div>

      {/* Error Alert */}
      {error && (
        <motion.div variants={item}>
          <Alert
            variant="destructive"
            className="mb-6 border-destructive/50 bg-destructive/10"
          >
            <AlertCircle className="h-4 w-4" />
            <AlertTitle>Có lỗi xảy ra</AlertTitle>
            <AlertDescription>{error}</AlertDescription>
          </Alert>
        </motion.div>
      )}

      <div className="max-w-4xl mx-auto grid md:grid-cols-2 gap-8">
        {/* Deadline Section */}
        <motion.div variants={item} className="space-y-4">
          <div className="relative p-6 bg-gradient-to-br from-white to-gray-50/50 rounded-2xl border border-gray-200/50 shadow-lg hover:shadow-xl transition-all duration-300">
            {/* Icon decoration */}
            <div className="absolute top-4 right-4">
              <motion.div
                className="w-10 h-10 bg-primary/10 rounded-full flex items-center justify-center"
                whileHover={{ scale: 1.1, rotate: 5 }}
              >
                <Calendar className="w-5 h-5 text-primary" />
              </motion.div>
            </div>

            <div className="flex items-center gap-3 mb-4">
              <div className="w-8 h-8 bg-primary/20 rounded-lg flex items-center justify-center">
                <Clock className="w-4 h-4 text-primary" />
              </div>
              <Label className="text-lg font-semibold text-gray-900">
                Thời gian kết thúc chiến dịch
              </Label>
            </div>

            <Popover>
              <PopoverTrigger asChild>
                <motion.div
                  whileHover={{ scale: 1.02 }}
                  whileTap={{ scale: 0.98 }}
                >
                  <Button
                    variant="outline"
                    className={cn(
                      "w-full justify-start text-left font-normal h-12 border-2 hover:border-primary/50 transition-colors",
                      !newCampaign.deadline && "text-muted-foreground"
                    )}
                  >
                    <CalendarIcon className="w-4 h-4 mr-2 text-primary" />
                    {newCampaign.deadline ? (
                      format(newCampaign.deadline, "dd/MM/yyyy")
                    ) : (
                      <span>Chọn ngày kết thúc</span>
                    )}
                  </Button>
                </motion.div>
              </PopoverTrigger>
              <PopoverContent className="w-auto p-0" align="start">
                <CalendarComponent
                  mode="single"
                  selected={newCampaign.deadline}
                  onSelect={(value) => changeCampaignValue("deadline", value)}
                  initialFocus
                  disabled={(date) => date < new Date()}
                />
              </PopoverContent>
            </Popover>

            {newCampaign.deadline && (
              <motion.div
                initial={{ opacity: 0, height: 0 }}
                animate={{ opacity: 1, height: "auto" }}
                className="mt-3 p-3 bg-primary/5 rounded-lg border border-primary/20"
              >
                <div className="flex items-center gap-2 text-sm text-primary">
                  <Info className="w-4 h-4" />
                  <span>
                    Chiến dịch sẽ kết thúc vào{" "}
                    {format(newCampaign.deadline, "dd/MM/yyyy")}
                  </span>
                </div>
              </motion.div>
            )}
          </div>
        </motion.div>

        {/* Goal Amount Section */}
        <motion.div variants={item} className="space-y-4">
          <div className="relative p-6 bg-gradient-to-br from-white to-gray-50/50 rounded-2xl border border-gray-200/50 shadow-lg hover:shadow-xl transition-all duration-300">
            {/* Icon decoration */}
            <div className="absolute top-4 right-4">
              <motion.div
                className="w-10 h-10 bg-primary/10 rounded-full flex items-center justify-center"
                whileHover={{ scale: 1.1, rotate: 5 }}
              >
                <TrendingUp className="w-5 h-5 text-primary" />
              </motion.div>
            </div>

            <div className="flex items-center gap-3 mb-4">
              <div className="w-8 h-8 bg-primary/20 rounded-lg flex items-center justify-center">
                <DollarSign className="w-4 h-4 text-primary" />
              </div>
              <Label className="text-lg font-semibold text-gray-900">
                Mục tiêu quyên góp
              </Label>
            </div>

            <div className="relative">
              <Input
                placeholder="0"
                type="text"
                className="w-full text-2xl md:text-3xl h-16 pl-12 pr-16 border-2 hover:border-primary/50 focus:border-primary transition-colors"
                value={vnd}
                onChange={handleChange}
              />
              <div className="absolute left-4 top-1/2 -translate-y-1/2 text-2xl text-gray-500">
                ₫
              </div>
              <div className="absolute right-4 top-1/2 -translate-y-1/2 text-sm text-gray-500 font-medium">
                VNĐ
              </div>
            </div>

            {/* ETH Conversion */}
            {eth > 0 && (
              <motion.div
                initial={{ opacity: 0, y: 10 }}
                animate={{ opacity: 1, y: 0 }}
                className="mt-4 p-4 bg-gradient-to-r from-primary/5 to-primary/10 rounded-xl border border-primary/20"
              >
                <div className="flex items-center justify-between">
                  <div className="flex items-center gap-2">
                    <Coins className="w-5 h-5 text-primary" />
                    <span className="text-lg font-semibold text-primary">
                      ≈ {eth.toFixed(6)} ETH
                    </span>
                  </div>
                  <motion.button
                    onClick={fetchExchangeRate}
                    className="p-2 hover:bg-primary/10 rounded-lg transition-colors"
                    whileHover={{ scale: 1.1 }}
                    whileTap={{ scale: 0.95 }}
                    disabled={isLoadingRate}
                  >
                    <RefreshCw
                      className={cn(
                        "w-4 h-4 text-primary",
                        isLoadingRate && "animate-spin"
                      )}
                    />
                  </motion.button>
                </div>
              </motion.div>
            )}

            {/* Exchange Rate Info */}
            <motion.div
              initial={{ opacity: 0 }}
              animate={{ opacity: 1 }}
              transition={{ delay: 0.3 }}
              className="mt-4 p-3 bg-gray-50 rounded-lg border border-gray-200"
            >
              <div className="flex items-center justify-between text-sm">
                <span className="text-gray-600">Tỷ giá ETH/VNĐ:</span>
                <div className="flex items-center gap-2">
                  {isLoadingRate ? (
                    <div className="flex items-center gap-2">
                      <RefreshCw className="w-3 h-3 animate-spin text-primary" />
                      <span className="text-primary">Đang cập nhật...</span>
                    </div>
                  ) : (
                    <span className="font-semibold text-gray-900">
                      {exchangeRate
                        ? exchangeRate.toLocaleString("vi-VN")
                        : "Không có dữ liệu"}{" "}
                      VNĐ
                    </span>
                  )}
                </div>
              </div>
            </motion.div>
          </div>
        </motion.div>
      </div>

      {/* Tips Section */}
      <motion.div
        variants={item}
        className="max-w-4xl mx-auto mt-8 p-6 bg-gradient-to-r from-blue-50 to-primary/5 rounded-2xl border border-blue-200/50"
      >
        <div className="flex items-start gap-4">
          <div className="w-8 h-8 bg-blue-100 rounded-lg flex items-center justify-center flex-shrink-0 mt-1">
            <Info className="w-4 h-4 text-blue-600" />
          </div>
          <div>
            <h3 className="font-semibold text-blue-900 mb-2">
              Mẹo thiết lập mục tiêu hiệu quả
            </h3>
            <ul className="text-sm text-blue-800 space-y-1">
              <li>• Đặt mục tiêu thực tế và có thể đạt được</li>
              <li>• Tính toán chi phí cụ thể để xác định số tiền cần thiết</li>
              <li>• Thời gian chiến dịch nên từ 30-90 ngày để tạo momentum</li>
              <li>• Mục tiêu rõ ràng sẽ thu hút nhiều người quyên góp hơn</li>
            </ul>
          </div>
        </div>
      </motion.div>
    </motion.div>
  );
};

export default Goal;

```

### src/module/user/pages/Fundraiser/Finish.jsx
```jsx
import React, { useEffect } from "react";
import { Button } from "@/components/ui/button";
import { CheckCircle, AlertCircle } from "lucide-react";
import { Link, useNavigate } from "react-router-dom";
import useCampaign from "@/hooks/useCampaign";
import useCreateStep from "@/hooks/useCreateStep"; // Thêm import này
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";

const Finish = () => {
  const { newCampaign } = useCampaign();
  const navigate = useNavigate();
  const { steps, setStep } = useCreateStep(); // Thêm hook useCreateStep

  const validateCampaign = () => {
    const validations = [
      {
        field: "categoryId",
        message: "Vui lòng chọn danh mục chiến dịch",
        redirect: "/create/fundraiser/category",
      },
      {
        field: "countryId",
        message: "Vui lòng chọn quốc gia",
        redirect: "/create/fundraiser/category",
      },
      {
        field: "fundraiseTypeId",
        message: "Vui lòng chọn loại gây quỹ",
        redirect: "/create/fundraiser/type",
      },
      {
        field: "title",
        message: "Vui lòng nhập tiêu đề chiến dịch",
        redirect: "/create/fundraiser/description",
      },
      {
        field: "description",
        message: "Vui lòng nhập mô tả chiến dịch",
        redirect: "/create/fundraiser/description",
      },
      {
        field: "goal",
        message: "Vui lòng nhập mục tiêu gây quỹ",
        redirect: "/create/fundraiser/goal",
      },
      {
        field: "deadline",
        message: "Vui lòng chọn thời hạn gây quỹ",
        redirect: "/create/fundraiser/goal",
      },
      {
        field: "coverId",
        message: "Vui lòng tải lên ảnh bìa",
        redirect: "/create/fundraiser/media",
      },
    ];

    for (const validation of validations) {
      if (!newCampaign[validation.field]) {
        // Tìm index của step cần redirect tới
        const stepIndex = steps.findIndex(
          (step) => step.slug === validation.redirect
        );

        if (stepIndex !== -1) {
          // Thêm check để đảm bảo tìm thấy step
          return {
            isValid: false,
            message: validation.message,
            redirect: validation.redirect,
            stepIndex: stepIndex,
          };
        }
      }
    }

    return { isValid: true };
  };

  useEffect(() => {
    const validation = validateCampaign();
    if (!validation.isValid) {
      setStep(validation.stepIndex); // Set current step trước
      navigate(validation.redirect, {
        state: { error: validation.message },
        replace: true, // Thêm replace để không thể back lại
      });
    }
  }, [newCampaign, navigate, setStep, steps]);

  if (!validateCampaign().isValid) {
    return null;
  }

  return (
    <div className="container mx-auto space-y-6 md:p-20 p-0">
      <div className="max-w-2xl mx-auto text-center space-y-8">
        <div className="flex justify-center">
          <div className="w-20 h-20 bg-primary/10 rounded-full flex items-center justify-center">
            <CheckCircle className="w-10 h-10 text-primary" />
          </div>
        </div>

        <div className="space-y-4">
          <h1 className="text-3xl font-bold">Hoàn thành chiến dịch!</h1>
          <p className="text-muted-foreground text-lg">
            Vui lòng nhấn hoàn thành để hoàng tất tạo chiến dịch. ãy chia sẻ
            chiến dịch với mọi người để bắt đầu nhận quyên góp.
          </p>
        </div>

        <div className="bg-muted/30 p-6 rounded-lg">
          <h3 className="font-semibold text-xl mb-4">{newCampaign.title}</h3>
          <div className="flex gap-4 justify-center">
            <Button asChild>
              <Link to={`/fund/${newCampaign.id}`}>Xem chiến dịch</Link>
            </Button>
            <Button variant="outline" asChild>
              <Link to="/my-campaigns">Quản lý chiến dịch</Link>
            </Button>
          </div>
        </div>

        <div className="pt-8 space-y-4">
          <h4 className="font-semibold text-lg">Các bước tiếp theo</h4>
          <div className="grid md:grid-cols-3 gap-6">
            <div className="p-4 rounded-lg border bg-card">
              <h5 className="font-medium mb-2">Chia sẻ</h5>
              <p className="text-sm text-muted-foreground">
                Chia sẻ chiến dịch của bạn trên mạng xã hội
              </p>
            </div>
            <div className="p-4 rounded-lg border bg-card">
              <h5 className="font-medium mb-2">Cập nhật</h5>
              <p className="text-sm text-muted-foreground">
                Thường xuyên cập nhật tiến độ cho người ủng hộ
              </p>
            </div>
            <div className="p-4 rounded-lg border bg-card">
              <h5 className="font-medium mb-2">Kết nối</h5>
              <p className="text-sm text-muted-foreground">
                Tương tác với cộng đồng người ủng hộ
              </p>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default Finish;

```

### src/module/user/pages/Fundraiser/Media.jsx
```jsx
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import useCampaign from "@/hooks/useCampaign";
import { validateFile } from "@/lib/utils";
import { createCover } from "@/services/coverService";
import { uploadFile } from "@/services/uploadService";
import {
  AlertCircle,
  ImagePlus,
  Loader2,
  X,
  Camera,
  Film,
  Upload,
  Image as ImageIcon,
  Grid3X3,
  Sparkles,
  Check,
  Info,
  Play,
  Eye,
  ZoomIn,
} from "lucide-react";
import { useState, useRef } from "react";
import { useLocation } from "react-router-dom";
import { motion } from "framer-motion";
import { toast } from "sonner";

const Media = () => {
  const [preview, setPreview] = useState({
    cover: null,
    images: [],
  });
  const [loading, setLoading] = useState({
    cover: false,
    images: false,
  });
  const [isDragging, setIsDragging] = useState({
    cover: false,
    images: false,
  });

  const { changeCampaignValue } = useCampaign();
  const location = useLocation();
  const error = location.state?.error;
  const coverInputRef = useRef(null);
  const imagesInputRef = useRef(null);

  const handleCoverChange = async (e) => {
    e.preventDefault();
    const file = e.target.files[0];
    if (file && validateFile(file)) {
      try {
        setLoading((prev) => ({ ...prev, cover: true }));
        const { url } = await uploadFile(file);
        if (url) {
          const isVideo = file.type.startsWith("video/");
          const mediaType = isVideo ? "VIDEO" : "IMAGE";

          const data = await createCover(url, mediaType);
          changeCampaignValue("coverId", data.id);
          setPreview((prev) => ({
            ...prev,
            cover: url,
          }));
          toast.success("Đã tải lên ảnh bìa thành công!");
        }
      } catch (error) {
        console.error("Error uploading cover:", error);
        toast.error("Không thể tải lên ảnh bìa: " + error.message);
      } finally {
        setLoading((prev) => ({ ...prev, cover: false }));
      }
    }
  };

  const handleImagesChange = async (e) => {
    const files = Array.from(e.target.files);
    if (files.length) {
      try {
        setLoading((prev) => ({ ...prev, images: true }));
        const uploadPromises = files.map((file) => uploadFile(file));
        const results = await Promise.all(uploadPromises);
        setPreview((prev) => ({
          ...prev,
          images: [...prev.images, ...results.map((result) => result.url)],
        }));
        changeCampaignValue("images", [
          ...preview.images,
          ...results.map((result) => result.url),
        ]);
        toast.success(`Đã tải lên ${files.length} hình ảnh thành công!`);
      } catch (error) {
        console.error("Error uploading images:", error);
        toast.error("Không thể tải lên hình ảnh: " + error.message);
      } finally {
        setLoading((prev) => ({ ...prev, images: false }));
      }
    }
  };

  const removeImage = (index) => {
    const newImages = preview.images.filter((_, i) => i !== index);
    setPreview((prev) => ({
      ...prev,
      images: newImages,
    }));
    changeCampaignValue("images", newImages);
    toast.success("Đã xóa hình ảnh");
  };

  const handleDragOver = (e, type) => {
    e.preventDefault();
    setIsDragging((prev) => ({ ...prev, [type]: true }));
  };

  const handleDragLeave = (e, type) => {
    e.preventDefault();
    setIsDragging((prev) => ({ ...prev, [type]: false }));
  };

  const handleDrop = async (e, type) => {
    e.preventDefault();
    setIsDragging((prev) => ({ ...prev, [type]: false }));

    const files = Array.from(e.dataTransfer.files);
    if (files.length > 0) {
      if (type === "cover") {
        const file = files[0];
        if (validateFile(file)) {
          // Simulate file input change
          const input =
            type === "cover" ? coverInputRef.current : imagesInputRef.current;
          const dataTransfer = new DataTransfer();
          dataTransfer.items.add(file);
          input.files = dataTransfer.files;

          if (type === "cover") {
            handleCoverChange({ target: { files: [file] } });
          }
        }
      } else {
        const validFiles = files.filter(validateFile);
        if (validFiles.length > 0) {
          const input = imagesInputRef.current;
          const dataTransfer = new DataTransfer();
          validFiles.forEach((file) => dataTransfer.items.add(file));
          input.files = dataTransfer.files;

          handleImagesChange({ target: { files: validFiles } });
        }
      }
    }
  };

  const renderPreview = (file) => {
    const isVideo =
      file?.startsWith("data:video") || file?.match(/\.(mp4|webm|ogg)$/i);

    if (isVideo) {
      return (
        <div className="relative w-full h-full group">
          <video className="w-full h-full object-cover rounded-xl" muted>
            <source src={file} type="video/mp4" />
            Your browser does not support the video tag.
          </video>
          <div className="absolute inset-0 bg-black/20 flex items-center justify-center opacity-0 group-hover:opacity-100 transition-opacity duration-300 rounded-xl">
            <Play className="w-8 h-8 text-white" />
          </div>
          <div className="absolute top-2 left-2">
            <div className="bg-black/50 text-white px-2 py-1 rounded-md text-xs flex items-center gap-1">
              <Film className="w-3 h-3" />
              Video
            </div>
          </div>
        </div>
      );
    }

    return (
      <div className="relative w-full h-full group">
        <img
          src={file}
          alt="Preview"
          className="w-full h-full object-cover rounded-xl"
        />
        <div className="absolute inset-0 bg-black/20 flex items-center justify-center opacity-0 group-hover:opacity-100 transition-opacity duration-300 rounded-xl">
          <ZoomIn className="w-6 h-6 text-white" />
        </div>
      </div>
    );
  };

  const container = {
    hidden: { opacity: 0 },
    show: {
      opacity: 1,
      transition: { staggerChildren: 0.1 },
    },
  };

  const item = {
    hidden: { opacity: 0, y: 20 },
    show: { opacity: 1, y: 0 },
  };

  return (
    <motion.div
      className="container mx-auto px-6 md:px-10 py-8"
      variants={container}
      initial="hidden"
      animate="show"
    >
      {/* Header Section */}
      <motion.div variants={item} className="text-center mb-8">
        <div className="inline-flex items-center gap-2 px-4 py-2 rounded-full border border-primary/20 bg-primary/5 backdrop-blur-sm mb-4">
          <Camera className="w-4 h-4 text-primary" />
          <span className="text-sm font-medium text-primary">
            Media cho chiến dịch
          </span>
        </div>
        <h2 className="text-2xl md:text-3xl font-bold bg-gradient-to-r from-primary to-primary/80 bg-clip-text text-transparent mb-2">
          Hình ảnh cho chiến dịch
        </h2>
        <p className="text-muted-foreground max-w-2xl mx-auto">
          Thêm hình ảnh và video ấn tượng để thu hút người quyên góp và kể câu
          chuyện của bạn
        </p>
      </motion.div>

      {/* Error Alert */}
      {error && (
        <motion.div variants={item}>
          <Alert
            variant="destructive"
            className="mb-6 border-destructive/50 bg-destructive/10"
          >
            <AlertCircle className="h-4 w-4" />
            <AlertTitle>Có lỗi xảy ra</AlertTitle>
            <AlertDescription>{error}</AlertDescription>
          </Alert>
        </motion.div>
      )}

      <div className="max-w-5xl mx-auto space-y-8">
        {/* Cover Image Upload */}
        <motion.div variants={item} className="space-y-4">
          <div className="relative p-6 bg-gradient-to-br from-white to-gray-50/50 rounded-2xl border border-gray-200/50 shadow-lg hover:shadow-xl transition-all duration-300">
            <div className="absolute top-4 right-4">
              <motion.div
                className="w-10 h-10 bg-primary/10 rounded-full flex items-center justify-center"
                whileHover={{ scale: 1.1, rotate: 5 }}
              >
                <Camera className="w-5 h-5 text-primary" />
              </motion.div>
            </div>

            <div className="flex items-center gap-3 mb-6">
              <div className="w-8 h-8 bg-primary/20 rounded-lg flex items-center justify-center">
                <ImageIcon className="w-4 h-4 text-primary" />
              </div>
              <div>
                <Label className="text-lg font-semibold text-gray-900">
                  Ảnh bìa chiến dịch
                </Label>
                <p className="text-sm text-muted-foreground">
                  Chọn hình ảnh hoặc video làm ảnh bìa chính cho chiến dịch
                  (16:9)
                </p>
              </div>
            </div>

            <div className="relative">
              <Input
                ref={coverInputRef}
                type="file"
                accept="image/*,video/*"
                className="hidden"
                id="cover-upload"
                onChange={handleCoverChange}
                disabled={loading.cover}
              />

              <motion.div
                whileHover={{ scale: 1.01 }}
                whileTap={{ scale: 0.99 }}
                onDragOver={(e) => handleDragOver(e, "cover")}
                onDragLeave={(e) => handleDragLeave(e, "cover")}
                onDrop={(e) => handleDrop(e, "cover")}
                className={`
                  relative w-full aspect-video cursor-pointer border-2 border-dashed rounded-2xl transition-all duration-300 overflow-hidden
                  ${
                    isDragging.cover
                      ? "border-primary bg-primary/10 scale-105"
                      : "border-gray-300 hover:border-primary/50"
                  }
                  ${preview.cover ? "border-solid border-primary/30" : ""}
                `}
                onClick={() => !loading.cover && coverInputRef.current?.click()}
              >
                {loading.cover ? (
                  <div className="flex flex-col items-center justify-center h-full space-y-4 bg-primary/5">
                    <motion.div
                      animate={{ rotate: 360 }}
                      transition={{
                        duration: 2,
                        repeat: Infinity,
                        ease: "linear",
                      }}
                    >
                      <Sparkles className="w-12 h-12 text-primary" />
                    </motion.div>
                    <div className="text-center">
                      <p className="text-lg font-medium text-primary">
                        Đang tải lên ảnh bìa...
                      </p>
                      <p className="text-sm text-muted-foreground">
                        Vui lòng đợi
                      </p>
                    </div>
                  </div>
                ) : preview.cover ? (
                  <div className="relative h-full">
                    {renderPreview(preview.cover)}
                    <div className="absolute top-4 left-4">
                      <div className="bg-primary/90 text-white px-3 py-1 rounded-full text-sm font-medium flex items-center gap-2">
                        <Check className="w-3 h-3" />
                        Ảnh bìa
                      </div>
                    </div>
                    <motion.button
                      className="absolute top-4 right-4 w-8 h-8 bg-destructive/90 text-white rounded-full flex items-center justify-center hover:bg-destructive transition-colors"
                      onClick={(e) => {
                        e.stopPropagation();
                        setPreview((prev) => ({ ...prev, cover: null }));
                        changeCampaignValue("coverId", null);
                      }}
                      whileHover={{ scale: 1.1 }}
                      whileTap={{ scale: 0.9 }}
                    >
                      <X className="w-4 h-4" />
                    </motion.button>
                  </div>
                ) : (
                  <div className="flex flex-col items-center justify-center h-full space-y-4 py-12">
                    <motion.div
                      className="w-16 h-16 bg-primary/10 rounded-full flex items-center justify-center"
                      whileHover={{ scale: 1.1 }}
                    >
                      <Upload className="w-8 h-8 text-primary" />
                    </motion.div>
                    <div className="text-center space-y-2">
                      <p className="text-lg font-medium text-gray-900">
                        {isDragging.cover
                          ? "Thả file vào đây"
                          : "Tải lên ảnh bìa"}
                      </p>
                      <p className="text-sm text-muted-foreground">
                        Kéo thả hoặc click để chọn file • PNG, JPG, MP4 tối đa
                        10MB
                      </p>
                    </div>
                    <div className="flex items-center gap-4 text-xs text-muted-foreground">
                      <div className="flex items-center gap-1">
                        <ImageIcon className="w-3 h-3" />
                        <span>Hình ảnh</span>
                      </div>
                      <div className="flex items-center gap-1">
                        <Film className="w-3 h-3" />
                        <span>Video</span>
                      </div>
                    </div>
                  </div>
                )}
              </motion.div>
            </div>
          </div>
        </motion.div>

        {/* Multiple Images Upload */}
        <motion.div variants={item} className="space-y-4">
          <div className="relative p-6 bg-gradient-to-br from-white to-gray-50/50 rounded-2xl border border-gray-200/50 shadow-lg hover:shadow-xl transition-all duration-300">
            <div className="absolute top-4 right-4">
              <motion.div
                className="w-10 h-10 bg-primary/10 rounded-full flex items-center justify-center"
                whileHover={{ scale: 1.1, rotate: 5 }}
              >
                <Grid3X3 className="w-5 h-5 text-primary" />
              </motion.div>
            </div>

            <div className="flex items-center gap-3 mb-6">
              <div className="w-8 h-8 bg-primary/20 rounded-lg flex items-center justify-center">
                <ImageIcon className="w-4 h-4 text-primary" />
              </div>
              <div>
                <Label className="text-lg font-semibold text-gray-900">
                  Hình ảnh bổ sung
                </Label>
                <p className="text-sm text-muted-foreground">
                  Thêm nhiều hình ảnh để mô tả chi tiết về chiến dịch (
                  {preview.images.length} ảnh)
                </p>
              </div>
            </div>

            <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4">
              {preview.images.map((image, index) => (
                <motion.div
                  key={index}
                  className="relative aspect-square group"
                  initial={{ opacity: 0, scale: 0.8 }}
                  animate={{ opacity: 1, scale: 1 }}
                  transition={{ delay: index * 0.1 }}
                  whileHover={{ scale: 1.05, y: -5 }}
                >
                  <div className="relative h-full border-2 border-primary/20 rounded-xl overflow-hidden shadow-md group-hover:shadow-lg transition-all duration-300">
                    {renderPreview(image)}
                    <motion.button
                      className="absolute top-2 right-2 w-6 h-6 bg-destructive/90 text-white rounded-full flex items-center justify-center opacity-0 group-hover:opacity-100 transition-opacity hover:bg-destructive"
                      onClick={() => removeImage(index)}
                      whileHover={{ scale: 1.2 }}
                      whileTap={{ scale: 0.8 }}
                    >
                      <X className="w-3 h-3" />
                    </motion.button>
                    <div className="absolute bottom-2 left-2">
                      <div className="bg-black/50 text-white px-2 py-1 rounded-md text-xs">
                        {index + 1}
                      </div>
                    </div>
                  </div>
                </motion.div>
              ))}

              {/* Add more images button */}
              <motion.div
                whileHover={{ scale: 1.05 }}
                whileTap={{ scale: 0.95 }}
                onDragOver={(e) => handleDragOver(e, "images")}
                onDragLeave={(e) => handleDragLeave(e, "images")}
                onDrop={(e) => handleDrop(e, "images")}
                className={`
                  relative aspect-square cursor-pointer border-2 border-dashed rounded-xl transition-all duration-300 group
                  ${
                    isDragging.images
                      ? "border-primary bg-primary/10 scale-105"
                      : "border-gray-300 hover:border-primary/50"
                  }
                `}
                onClick={() =>
                  !loading.images && imagesInputRef.current?.click()
                }
              >
                <Input
                  ref={imagesInputRef}
                  type="file"
                  accept="image/*,video/*"
                  className="hidden"
                  id="images-upload"
                  multiple
                  onChange={handleImagesChange}
                  disabled={loading.images}
                />

                <div className="flex flex-col items-center justify-center h-full space-y-2 p-4">
                  {loading.images ? (
                    <>
                      <motion.div
                        animate={{ rotate: 360 }}
                        transition={{
                          duration: 2,
                          repeat: Infinity,
                          ease: "linear",
                        }}
                      >
                        <Sparkles className="w-8 h-8 text-primary" />
                      </motion.div>
                      <span className="text-xs text-primary font-medium">
                        Đang tải...
                      </span>
                    </>
                  ) : (
                    <>
                      <motion.div
                        className="w-8 h-8 bg-primary/10 rounded-full flex items-center justify-center group-hover:bg-primary/20 transition-colors"
                        whileHover={{ scale: 1.1 }}
                      >
                        <ImagePlus className="w-4 h-4 text-primary" />
                      </motion.div>
                      <span className="text-xs text-gray-500 text-center">
                        {isDragging.images ? "Thả ảnh vào đây" : "Thêm ảnh"}
                      </span>
                    </>
                  )}
                </div>
              </motion.div>
            </div>

            {preview.images.length > 0 && (
              <motion.div
                initial={{ opacity: 0, height: 0 }}
                animate={{ opacity: 1, height: "auto" }}
                className="mt-4 p-3 bg-primary/5 rounded-lg border border-primary/20"
              >
                <div className="flex items-center gap-2 text-sm text-primary">
                  <Check className="w-4 h-4" />
                  <span>Đã tải lên {preview.images.length} hình ảnh</span>
                </div>
              </motion.div>
            )}
          </div>
        </motion.div>

        {/* Tips Section */}
        <motion.div
          variants={item}
          className="p-6 bg-gradient-to-r from-blue-50 to-primary/5 rounded-2xl border border-blue-200/50"
        >
          <div className="flex items-start gap-4">
            <div className="w-8 h-8 bg-blue-100 rounded-lg flex items-center justify-center flex-shrink-0 mt-1">
              <Info className="w-4 h-4 text-blue-600" />
            </div>
            <div>
              <h3 className="font-semibold text-blue-900 mb-2">
                Mẹo chọn hình ảnh hiệu quả
              </h3>
              <ul className="text-sm text-blue-800 space-y-1">
                <li>
                  • <strong>Ảnh bìa:</strong> Chọn ảnh chất lượng cao, tỷ lệ
                  16:9, thể hiện rõ mục đích
                </li>
                <li>
                  • <strong>Hình ảnh bổ sung:</strong> Thêm ảnh chứng minh, quá
                  trình thực hiện
                </li>
                <li>
                  • <strong>Chất lượng:</strong> Ảnh sáng, rõ nét, không mờ hoặc
                  bị méo
                </li>
                <li>
                  • <strong>Câu chuyện:</strong> Hình ảnh phải liên quan trực
                  tiếp đến chiến dịch
                </li>
              </ul>
            </div>
          </div>
        </motion.div>
      </div>
    </motion.div>
  );
};

export default Media;

```

### src/module/user/pages/Fundraiser/Category.jsx
```jsx
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { LoadingSpinner } from "@/components/ui/loading";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { ToggleGroup, ToggleGroupItem } from "@/components/ui/toggle-group";
import useCampaign from "@/hooks/useCampaign";
import { useCategory } from "@/hooks/useCategory";
import { useCountry } from "@/hooks/useCountry";
import {
  AlertCircle,
  MapPin,
  Grid3X3,
  Globe,
  Tag,
  Check,
  Sparkles,
  Heart,
  Users,
  GraduationCap,
  Stethoscope,
  Home,
  Briefcase,
  Shield,
  Info,
} from "lucide-react";
import { useLocation } from "react-router-dom";
import { motion } from "framer-motion";
import { truncate } from "lodash";

const Category = () => {
  const { data: categories, isLoading } = useCategory();
  const { data: countries, isLoading: isLoadingCountry } = useCountry();
  const { newCampaign, changeCampaignValue } = useCampaign();
  const location = useLocation();
  const error = location.state?.error;

  const getCategoryIcon = (categoryName) => {
    const name = categoryName?.toLowerCase() || "";
    if (name.includes("giáo dục") || name.includes("education"))
      return <GraduationCap className="w-4 h-4" />;
    if (
      name.includes("y tế") ||
      name.includes("medical") ||
      name.includes("sức khỏe")
    )
      return <Stethoscope className="w-4 h-4" />;
    if (name.includes("từ thiện") || name.includes("charity"))
      return <Heart className="w-4 h-4" />;
    if (name.includes("cộng đồng") || name.includes("community"))
      return <Users className="w-4 h-4" />;
    if (name.includes("nhà ở") || name.includes("housing"))
      return <Home className="w-4 h-4" />;
    if (name.includes("kinh doanh") || name.includes("business"))
      return <Briefcase className="w-4 h-4" />;
    if (name.includes("bảo vệ") || name.includes("protection"))
      return <Shield className="w-4 h-4" />;
    return <Tag className="w-4 h-4" />;
  };

  const container = {
    hidden: { opacity: 0 },
    show: {
      opacity: 1,
      transition: { staggerChildren: 0.1 },
    },
  };

  const item = {
    hidden: { opacity: 0, y: 20 },
    show: { opacity: 1, y: 0 },
  };

  if (isLoading || isLoadingCountry) {
    return (
      <div className="container mx-auto px-6 md:px-10 py-8 flex items-center justify-center min-h-[400px]">
        <div className="text-center space-y-4">
          <div className="w-16 h-16 bg-primary/10 rounded-full flex items-center justify-center mx-auto">
            <motion.div
              animate={{ rotate: 360 }}
              transition={{ duration: 2, repeat: Infinity, ease: "linear" }}
            >
              <Sparkles className="w-8 h-8 text-primary" />
            </motion.div>
          </div>
          <LoadingSpinner message="Đang tải danh mục và quốc gia..." />
        </div>
      </div>
    );
  }

  return (
    <motion.div
      className="container mx-auto px-6 md:px-10 py-8"
      variants={container}
      initial="hidden"
      animate="show"
    >
      {/* Header Section */}
      <motion.div variants={item} className="text-center mb-8">
        <div className="inline-flex items-center gap-2 px-4 py-2 rounded-full border border-primary/20 bg-primary/5 backdrop-blur-sm mb-4">
          <Grid3X3 className="w-4 h-4 text-primary" />
          <span className="text-sm font-medium text-primary">
            Phân loại chiến dịch
          </span>
        </div>
        <h2 className="text-2xl md:text-3xl font-bold bg-gradient-to-r from-primary to-primary/80 bg-clip-text text-transparent mb-2">
          Thông tin chi tiết chiến dịch
        </h2>
        <p className="text-muted-foreground max-w-2xl mx-auto">
          Chọn danh mục và địa điểm phù hợp để giúp mọi người hiểu rõ hơn về
          chiến dịch của bạn
        </p>
      </motion.div>

      {/* Error Alert */}
      {error && (
        <motion.div variants={item}>
          <Alert
            variant="destructive"
            className="mb-6 border-destructive/50 bg-destructive/10"
          >
            <AlertCircle className="h-4 w-4" />
            <AlertTitle>Có lỗi xảy ra</AlertTitle>
            <AlertDescription>{error}</AlertDescription>
          </Alert>
        </motion.div>
      )}

      <div className="max-w-4xl mx-auto space-y-8">
        {/* Location Section */}
        <motion.div variants={item} className="space-y-4">
          <div className="relative p-6 bg-gradient-to-br from-white to-gray-50/50 rounded-2xl border border-gray-200/50 shadow-lg hover:shadow-xl transition-all duration-300">
            {/* Icon decoration */}
            <div className="absolute top-4 right-4">
              <motion.div
                className="w-10 h-10 bg-primary/10 rounded-full flex items-center justify-center"
                whileHover={{ scale: 1.1, rotate: 5 }}
              >
                <Globe className="w-5 h-5 text-primary" />
              </motion.div>
            </div>

            <div className="flex items-center gap-3 mb-4">
              <div className="w-8 h-8 bg-primary/20 rounded-lg flex items-center justify-center">
                <MapPin className="w-4 h-4 text-primary" />
              </div>
              <div>
                <h3 className="text-lg font-semibold text-gray-900">
                  Khu vực sử dụng quỹ
                </h3>
                <p className="text-sm text-muted-foreground">
                  Chọn nơi bạn muốn rút khoản tiền quyên góp
                </p>
              </div>
            </div>

            <motion.div whileHover={{ scale: 1.01 }} whileTap={{ scale: 0.99 }}>
              <Select
                value={newCampaign.countryId}
                onValueChange={(value) =>
                  changeCampaignValue("countryId", value)
                }
              >
                <SelectTrigger className="w-full h-12 border-2 hover:border-primary/50 focus:border-primary transition-colors">
                  <div className="flex items-center gap-2">
                    <MapPin className="w-4 h-4 text-primary" />
                    <SelectValue placeholder="Chọn quốc gia/khu vực" />
                  </div>
                </SelectTrigger>
                <SelectContent>
                  {countries?.map((country) => (
                    <SelectItem
                      value={country.id}
                      key={country.id}
                      className="flex items-center gap-2"
                    >
                      <div className="flex items-center gap-2">
                        <div className="w-3 h-3 bg-primary/20 rounded-full" />
                        {country.name}
                      </div>
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </motion.div>

            {newCampaign.countryId && (
              <motion.div
                initial={{ opacity: 0, height: 0 }}
                animate={{ opacity: 1, height: "auto" }}
                className="mt-3 p-3 bg-primary/5 rounded-lg border border-primary/20"
              >
                <div className="flex items-center gap-2 text-sm text-primary">
                  <Check className="w-4 h-4" />
                  <span>
                    Đã chọn:{" "}
                    {
                      countries?.find((c) => c.id === newCampaign.countryId)
                        ?.name
                    }
                  </span>
                </div>
              </motion.div>
            )}
          </div>
        </motion.div>

        {/* Category Section */}
        <motion.div variants={item} className="space-y-4">
          <div className="relative p-6 bg-gradient-to-br from-white to-gray-50/50 rounded-2xl border border-gray-200/50 shadow-lg hover:shadow-xl transition-all duration-300">
            {/* Icon decoration */}
            <div className="absolute top-4 right-4">
              <motion.div
                className="w-10 h-10 bg-primary/10 rounded-full flex items-center justify-center"
                whileHover={{ scale: 1.1, rotate: 5 }}
              >
                <Tag className="w-5 h-5 text-primary" />
              </motion.div>
            </div>

            <div className="flex items-center gap-3 mb-6">
              <div className="w-8 h-8 bg-primary/20 rounded-lg flex items-center justify-center">
                <Grid3X3 className="w-4 h-4 text-primary" />
              </div>
              <div>
                <h3 className="text-lg font-semibold text-gray-900">
                  Danh mục chiến dịch
                </h3>
                <p className="text-sm text-muted-foreground">
                  Mô tả nào phù hợp nhất với lý do bạn kêu gọi gây quỹ?
                </p>
              </div>
            </div>

            <ToggleGroup
              type="single"
              className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-3"
              value={newCampaign.categoryId}
              onValueChange={(value) =>
                changeCampaignValue("categoryId", value)
              }
            >
              {categories?.data?.map((category, index) => (
                <motion.div
                  key={category.id}
                  initial={{ opacity: 0, scale: 0.9 }}
                  animate={{ opacity: 1, scale: 1 }}
                  transition={{ delay: index * 0.05 }}
                  whileHover={{ scale: 1.02 }}
                  whileTap={{ scale: 0.98 }}
                >
                  <ToggleGroupItem
                    variant="outline"
                    className={`
                      relative w-full h-auto p-4 rounded-xl border-2 transition-all duration-300
                      hover:border-primary/50 hover:bg-primary/5 hover:shadow-md
                      data-[state=on]:border-primary data-[state=on]:bg-primary/10 
                      data-[state=on]:text-primary data-[state=on]:shadow-lg
                      data-[state=on]:shadow-primary/25
                    `}
                    value={category.id}
                    aria-label={`Select ${category.name} category`}
                  >
                    <div className="flex items-center gap-3">
                      <div className="w-8 h-8 flex-shrink-0 flex items-center justify-center">
                        <img
                          src={category.icon}
                          alt={category.name}
                          className="w-8 h-8 object-contain"
                        />
                      </div>
                      <div className="text-left flex-1">
                        <div className="font-medium text-sm">
                          {truncate(category.name, { length: 21 })}
                        </div>
                        {category.description && (
                          <div className="text-xs text-muted-foreground mt-1">
                            {category.description}
                          </div>
                        )}
                      </div>
                    </div>

                    {/* Selected indicator */}
                    {newCampaign.categoryId === category.id && (
                      <motion.div
                        initial={{ scale: 0 }}
                        animate={{ scale: 1 }}
                        className="absolute top-2 right-2 w-5 h-5 bg-primary rounded-full flex items-center justify-center"
                      >
                        <Check className="w-3 h-3 text-white" />
                      </motion.div>
                    )}
                  </ToggleGroupItem>
                </motion.div>
              ))}
            </ToggleGroup>

            {newCampaign.categoryId && (
              <motion.div
                initial={{ opacity: 0, height: 0 }}
                animate={{ opacity: 1, height: "auto" }}
                className="mt-4 p-3 bg-primary/5 rounded-lg border border-primary/20"
              >
                <div className="flex items-center gap-2 text-sm text-primary">
                  <Check className="w-4 h-4" />
                  <span>
                    Đã chọn danh mục:{" "}
                    {
                      categories?.data?.find(
                        (c) => c.id === newCampaign.categoryId
                      )?.name
                    }
                  </span>
                </div>
              </motion.div>
            )}
          </div>
        </motion.div>

        {/* Tips Section */}
        <motion.div
          variants={item}
          className="p-6 bg-gradient-to-r from-blue-50 to-primary/5 rounded-2xl border border-blue-200/50"
        >
          <div className="flex items-start gap-4">
            <div className="w-8 h-8 bg-blue-100 rounded-lg flex items-center justify-center flex-shrink-0 mt-1">
              <Info className="w-4 h-4 text-blue-600" />
            </div>
            <div>
              <h3 className="font-semibold text-blue-900 mb-2">
                Mẹo chọn danh mục phù hợp
              </h3>
              <ul className="text-sm text-blue-800 space-y-1">
                <li>• Chọn danh mục phù hợp nhất với mục đích chiến dịch</li>
                <li>
                  • Danh mục giúp người quyên góp dễ dàng tìm thấy chiến dịch
                </li>
                <li>• Địa điểm rõ ràng tăng niềm tin của người quyên góp</li>
                <li>
                  • Thông tin chính xác giúp chiến dịch được ưu tiên hiển thị
                </li>
              </ul>
            </div>
          </div>
        </motion.div>
      </div>
    </motion.div>
  );
};

export default Category;

```

### src/module/user/hooks/useImageUpload.js
```js
import { useState } from "react";
import { uploadFile } from "@/services/uploadService";
import { toast } from "sonner";

export const useImageUpload = (onSuccess) => {
  const [loading, setLoading] = useState({
    cover: false,
    avatar: false,
  });

  const validateImage = (file) => {
    const validTypes = ["image/jpeg", "image/png", "image/gif"];
    const maxSize = 5 * 1024 * 1024; // 5MB

    if (!validTypes.includes(file.type)) {
      toast.error("Vui lòng tải lên file ảnh (JPG, PNG, GIF)");
      return false;
    }

    if (file.size > maxSize) {
      toast.error("Kích thước ảnh phải nhỏ hơn 5MB");
      return false;
    }

    return true;
  };

  const handleImageUpload = async (file, type) => {
    if (!file) return;

    if (!validateImage(file)) return;

    try {
      setLoading((prev) => ({ ...prev, [type]: true }));
      const { url } = await uploadFile(file);
      await onSuccess({ [type === "avatar" ? "image" : "cover"]: url });
      return url;
    } catch (error) {
      console.error(`Error uploading ${type}:`, error);
      toast.error("Có lỗi xảy ra khi tải ảnh lên!");
      return null;
    } finally {
      setLoading((prev) => ({ ...prev, [type]: false }));
    }
  };

  const handleCoverUpload = (e) =>
    handleImageUpload(e.target.files?.[0], "cover");
  const handleAvatarUpload = (e) =>
    handleImageUpload(e.target.files?.[0], "avatar");

  return {
    loading,
    handleCoverUpload,
    handleAvatarUpload,
  };
};

```

### src/module/user/hooks/useNFTs.js
```js
import { useCallback, useEffect, useState } from "react";
import { fetchTokenMetadata, resolveIPFSUrl } from "@/utils/ipfs";

export const useNFTs = (getUserNFTs) => {
  const [nfts, setNfts] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  const fetchNFTs = useCallback(async () => {
    try {
      setLoading(true);
      setError(null);
      const data = await getUserNFTs();

      const nftsWithMetadata = await Promise.all(
        data.map(async (nft) => {
          try {
            const metadata = await fetchTokenMetadata(nft.tokenURI);
            return {
              ...nft,
              metadata: {
                ...metadata,
                image: resolveIPFSUrl(metadata?.image),
              },
            };
          } catch (err) {
            console.error(
              `Error fetching metadata for NFT ${nft.tokenId}:`,
              err
            );
            return {
              ...nft,
              metadata: {
                name: `NFT #${nft.tokenId}`,
                image: null,
                description: "Metadata unavailable",
              },
            };
          }
        })
      );

      setNfts(nftsWithMetadata);
    } catch (err) {
      console.error("Error fetching NFTs:", err);
      setError("Failed to load NFTs. Please try again later.");
    } finally {
      setLoading(false);
    }
  }, [getUserNFTs]);

  useEffect(() => {
    fetchNFTs();
  }, [fetchNFTs]);

  const refetch = useCallback(() => {
    fetchNFTs();
  }, [fetchNFTs]);

  return {
    nfts,
    loading,
    error,
    refetch,
  };
};

```

### src/module/user/layouts/CreateLayout.jsx
```jsx
import React, { useEffect } from "react";
import { Link, Outlet, useNavigate } from "react-router-dom";
import { ChevronLeft, ChevronRight, Loader2 } from "lucide-react";
import { useMutation } from "@tanstack/react-query";
import { Button } from "@/components/ui/button";
import { Separator } from "@/components/ui/separator";
import useCreateStep from "@/hooks/useCreateStep";
import Auth from "./Auth";
import useCampaign from "@/hooks/useCampaign";
import { toast } from "sonner";
import { createCampaign } from "@/services/campaignService";

const CreateLayout = () => {
  const navigate = useNavigate();
  const { steps, nextStep, prevStep, currentStep, canGoNext, canGoPrev } =
    useCreateStep();
  const { newCampaign } = useCampaign();

  const { mutate: createNewCampaign, isPending } = useMutation({
    mutationFn: createCampaign,
    onSuccess: (data) => {
      toast.success("Chiến dịch tạo thành công!");
    },
    onError: (error) => {
      toast.error(error.message);
    },
  });

  const handleNextStep = () => {
    // Validate current step before moving to next
    if (validateCurrentStep()) {
      nextStep();
    }
  };

  const handlePrevStep = () => {
    prevStep();
  };

  const validateCurrentStep = () => {
    // Add validation logic here based on currentStep
    return true;
  };

  useEffect(() => {
    // Add protection against direct URL access
    const currentPath = window.location.pathname;
    const currentStepIndex = steps.findIndex(
      (step) => step.slug === currentPath
    );

    if (currentStepIndex !== -1 && currentStepIndex !== currentStep) {
      navigate(steps[currentStep].slug, { replace: true });
    }
  }, [currentStep, navigate, steps]);

  const handleFinish = () => {
    createNewCampaign(newCampaign);
  };

  return (
    <div className="bg-[#F4F2EC] grid grid-cols-3 w-screen h-screen">
      <Auth />
      <div className="col-span-1 p-10 flex flex-col h-screen">
        <Link to="/">
          <img src={"/logo.svg"} className="w-[40px] h-[40px]" />
        </Link>
        <div className="flex-1 flex items-center justify-center flex-col ">
          <div>
            <h2 className="text-left text-4xl mb-4 leading-9">
              {steps[currentStep].title}
            </h2>
            <p className="text-left">{steps[currentStep].description}</p>
          </div>
        </div>
      </div>
      <div className="col-span-2 flex rounded-l-[64px] bg-white h-full py-10 flex-col overflow-auto">
        <main className="flex-1 w-full flex items-center justify-center ">
          <Outlet />
        </main>
        <Separator />
        <div className="h-32 flex px-10 bottom-0 py-6 w-full justify-between items-center">
          {canGoPrev() && (
            <Button
              variant="outline"
              size="lg"
              onClick={handlePrevStep}
              className="text-md"
            >
              <ChevronLeft />
              Quay lại
            </Button>
          )}

          {canGoNext() ? (
            <Button onClick={handleNextStep} size="lg" className="text-md">
              Tiếp tục
              <ChevronRight />
            </Button>
          ) : (
            <Button
              size="lg"
              className="text-md"
              onClick={handleFinish}
              disabled={isPending}
            >
              {isPending ? (
                <>
                  <Loader2 className="w-4 h-4 animate-spin mr-2" />
                  Đang xử lý...
                </>
              ) : (
                "Hoàn thành"
              )}
            </Button>
          )}
        </div>
      </div>
    </div>
  );
};

export default CreateLayout;

```

### src/module/user/layouts/MainLayout.jsx
```jsx
import { Outlet, Link } from "react-router-dom";
import Footer from "@/components/Footer/Footer";
import Header from "../components/Header";
import Auth from "./Auth";
import { Separator } from "@/components/ui/separator";
import Brand from "../components/Brand";

export default function MainLayout() {
  return (
    <>
      <Header />
      <div className=" mx-auto py-20">
        <Outlet />
      </div>
      <Brand />
      <Footer />
      {/* <Separator className="mt-10" /> */}
      {/* <div className="py-10 container">
        <span className="font-bold ">@MakeByManhCuong</span>
      </div> */}
      <Auth />
    </>
  );
}

```

### src/module/user/layouts/Auth.jsx
```jsx
import { useProfile } from "@/hooks/useAuth";
import React from "react";

const Auth = () => {
  const { data, isLoading } = useProfile();
  return null;
};

export default Auth;

```

### src/module/user/layouts/AuthLayout.jsx
```jsx
import React from "react";
import { Outlet } from "react-router-dom";

const AuthLayout = () => {
  return (
    <main className="flex items-center justify-center">
      <Outlet />
    </main>
  );
};

export default AuthLayout;

```

### src/module/user/components/AudioPlayer.jsx
```jsx
import { Volume2Icon } from "lucide-react";

const AudioPlayer = ({ audioUrl }) => {
  return (
    <div className="bg-muted/30 p-4 rounded-lg">
      <h3 className="text-lg font-semibold mb-2 flex items-center gap-2">
        <Volume2Icon className="w-5 h-5" />
        Cuộc trò chuyện phân tích về chiến dịch
      </h3>
      <audio controls className="w-full">
        <source src={audioUrl} type="audio/wav" />
        Trình duyệt của bạn không hỗ trợ phát audio.
      </audio>
    </div>
  );
};

export default AudioPlayer;

```

### src/module/user/components/FundCampaignStatus.jsx
```jsx
import { Badge } from "@/components/ui/badge";
import { Clock, CheckCircle2, XCircle } from "lucide-react";
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from "@/components/ui/tooltip";

const CampaignStatus = ({ status }) => {
  const { isActive, isSuccessful, remainingTime } = status;

  const remainingDays = Math.floor(Number(remainingTime) / (24 * 60 * 60));

  return (
    <TooltipProvider>
      <div className="flex flex-col gap-2 p-4 border rounded-lg bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60">
        <div className="flex items-center gap-2">
          <Badge variant={isActive ? "default" : "secondary"}>
            {isActive ? (
              <span className="flex items-center gap-2">
                <span className="relative flex h-2 w-2">
                  <span className="animate-ping absolute inline-flex h-full w-full rounded-full bg-green-400 opacity-75"></span>
                  <span className="relative inline-flex rounded-full h-2 w-2 bg-green-500"></span>
                </span>
                Đang hoạt động
              </span>
            ) : (
              <span className="flex items-center gap-2">
                <span className="h-2 w-2 rounded-full bg-gray-400"></span>
                Đã kết thúc
              </span>
            )}
          </Badge>

          {!isActive && (
            <Badge variant={isSuccessful ? "success" : "destructive"}>
              {isSuccessful ? (
                <span className="flex items-center gap-2">
                  <CheckCircle2 className="h-3 w-3" />
                  Thành công
                </span>
              ) : (
                <span className="flex items-center gap-2">
                  <XCircle className="h-3 w-3" />
                  Chưa đạt mục tiêu
                </span>
              )}
            </Badge>
          )}
        </div>

        {isActive && remainingDays > 0 && (
          <Tooltip>
            <TooltipTrigger>
              <div className="flex items-center gap-2 text-sm text-muted-foreground">
                <Clock className="h-4 w-4" />
                <span>Còn {remainingDays} ngày</span>
              </div>
            </TooltipTrigger>
            <TooltipContent>
              <p>Thời gian còn lại của chiến dịch</p>
            </TooltipContent>
          </Tooltip>
        )}
      </div>
    </TooltipProvider>
  );
};

export default CampaignStatus;

```

### src/module/user/components/HowWork.jsx
```jsx
import { motion } from "framer-motion";
import {
  Heart,
  Maximize,
  Play,
  Shield,
  Sparkles,
  Star,
  Users,
  Volume2,
  Zap,
} from "lucide-react";
import { useState } from "react";

const HowWork = () => {
  const [isPlaying, setIsPlaying] = useState(false);

  const floatingIcon = {
    initial: { opacity: 0, y: 20 },
    animate: {
      opacity: [0.2, 0.6, 0.2],
      y: [0, -30, 0],
      rotate: [0, 10, -10, 0],
      transition: {
        duration: 6,
        repeat: Infinity,
        ease: "easeInOut",
      },
    },
  };

  const FloatingElement = ({ children, delay = 0, duration = 4 }) => (
    <motion.div
      className="absolute"
      initial={{ opacity: 0, scale: 0 }}
      animate={{
        opacity: [0, 0.6, 0],
        scale: [0, 1.2, 0],
        rotate: [0, 180, 360],
      }}
      transition={{
        duration: duration,
        repeat: Infinity,
        delay: delay,
        ease: "easeInOut",
      }}
    >
      {children}
    </motion.div>
  );

  const StatCard = ({ icon, number, label, delay = 0 }) => (
    <motion.div
      initial={{ opacity: 0, y: 30, scale: 0.8 }}
      whileInView={{ opacity: 1, y: 0, scale: 1 }}
      viewport={{ once: true }}
      transition={{ delay, type: "spring", stiffness: 300 }}
      whileHover={{ scale: 1.05, y: -5 }}
      className="bg-white/10 backdrop-blur-md rounded-2xl p-6 border border-primary/20 shadow-xl hover:shadow-primary/25 transition-all duration-300"
    >
      <motion.div
        className="text-primary mb-2"
        whileHover={{ rotate: 10, scale: 1.1 }}
      >
        {icon}
      </motion.div>
      <motion.div
        className="text-2xl md:text-3xl font-bold text-primary mb-1"
        initial={{ opacity: 0 }}
        whileInView={{ opacity: 1 }}
        transition={{ delay: delay + 0.3 }}
      >
        {number}
      </motion.div>
      <div className="text-sm text-muted-foreground font-medium">{label}</div>
    </motion.div>
  );

  return (
    <div className="relative container mx-auto my-8 py-16 md:py-24 px-4 overflow-hidden">
      {/* Background Effects */}
      <div className="absolute inset-0 bg-gradient-to-br  rounded-3xl" />

      {/* Floating Background Icons */}
      <motion.div
        className="absolute top-16 left-8"
        variants={floatingIcon}
        initial="initial"
        animate="animate"
      >
        <Sparkles className="w-8 h-8 text-primary/20" />
      </motion.div>
      <motion.div
        className="absolute top-32 right-12"
        variants={floatingIcon}
        initial="initial"
        animate="animate"
        style={{ animationDelay: "1s" }}
      >
        <Shield className="w-6 h-6 text-primary/20" />
      </motion.div>
      <motion.div
        className="absolute bottom-24 left-16"
        variants={floatingIcon}
        initial="initial"
        animate="animate"
        style={{ animationDelay: "2s" }}
      >
        <Heart className="w-7 h-7 text-primary/20" />
      </motion.div>
      <motion.div
        className="absolute bottom-40 right-8"
        variants={floatingIcon}
        initial="initial"
        animate="animate"
        style={{ animationDelay: "0.5s" }}
      >
        <Zap className="w-6 h-6 text-primary/20" />
      </motion.div>

      {/* Floating Elements Around Video */}
      <div className="absolute inset-0 pointer-events-none">
        <FloatingElement delay={0}>
          <Star className="w-4 h-4 text-primary/40" />
        </FloatingElement>
        <FloatingElement delay={1} duration={5}>
          <div className="w-2 h-2 bg-primary/50 rounded-full" />
        </FloatingElement>
        <FloatingElement delay={2} duration={3}>
          <Heart className="w-3 h-3 text-primary/30" />
        </FloatingElement>
      </div>

      {/* Enhanced Header Section */}
      <div className="max-w-4xl mx-auto text-center space-y-6 mb-12 md:mb-16">
        <motion.div
          initial={{ opacity: 0, y: 30 }}
          whileInView={{ opacity: 1, y: 0 }}
          viewport={{ once: true }}
          className="inline-flex items-center gap-2 px-4 py-2 rounded-full border border-primary/20 bg-primary/5 backdrop-blur-sm mb-4"
        >
          <Play className="w-4 h-4 text-primary" />
          <span className="text-sm font-medium text-primary">
            Video giới thiệu
          </span>
        </motion.div>

        <motion.h2
          initial={{ opacity: 0, y: 20 }}
          whileInView={{ opacity: 1, y: 0 }}
          viewport={{ once: true }}
          className="text-3xl md:text-5xl lg:text-6xl font-bold bg-gradient-to-r from-primary via-primary/80 to-primary bg-clip-text text-transparent leading-tight"
          whileHover={{ scale: 1.02 }}
        >
          Chain4Good hoạt động như thế nào?
        </motion.h2>

        <motion.p
          initial={{ opacity: 0, y: 20 }}
          whileInView={{ opacity: 1, y: 0 }}
          viewport={{ once: true }}
          transition={{ delay: 0.2 }}
          className="text-lg md:text-xl text-muted-foreground max-w-2xl mx-auto leading-relaxed"
        >
          Tìm hiểu cách chúng tôi sử dụng{" "}
          <span className="text-primary font-semibold">blockchain</span> để mang
          lại sự
          <span className="text-primary font-semibold"> minh bạch</span> và{" "}
          <span className="text-primary font-semibold">hiệu quả</span> cho hoạt
          động từ thiện
        </motion.p>

        {/* Stats Section */}
        <motion.div
          initial={{ opacity: 0, y: 30 }}
          whileInView={{ opacity: 1, y: 0 }}
          viewport={{ once: true }}
          transition={{ delay: 0.4 }}
          className="grid grid-cols-2 md:grid-cols-4 gap-4 mt-8 max-w-3xl mx-auto"
        >
          <StatCard
            icon={<Users className="w-6 h-6" />}
            number="1000+"
            label="Người dùng"
            delay={0.1}
          />
          <StatCard
            icon={<Shield className="w-6 h-6" />}
            number="100%"
            label="Minh bạch"
            delay={0.2}
          />
          <StatCard
            icon={<Heart className="w-6 h-6" />}
            number="500+"
            label="Chiến dịch"
            delay={0.3}
          />
          <StatCard
            icon={<Zap className="w-6 h-6" />}
            number="24/7"
            label="Hoạt động"
            delay={0.4}
          />
        </motion.div>
      </div>

      {/* Enhanced Video Section */}
      <motion.div
        initial={{ opacity: 0, scale: 0.9, y: 50 }}
        whileInView={{ opacity: 1, scale: 1, y: 0 }}
        viewport={{ once: true }}
        transition={{ delay: 0.3, type: "spring", stiffness: 200 }}
        className="relative max-w-5xl mx-auto"
      >
        {/* Video Container with Enhanced Styling */}
        <div className="relative group">
          {/* Glow Effect */}
          <div className="absolute -inset-4 bg-gradient-to-r from-primary/20 via-primary/10 to-primary/20 rounded-3xl blur-2xl opacity-0 group-hover:opacity-100 transition-opacity duration-500" />

          {/* Main Video Container */}
          <motion.div
            className="relative aspect-video rounded-2xl overflow-hidden shadow-2xl border-2 border-primary/20 bg-gradient-to-br from-primary/5 to-primary/10"
            whileHover={{ scale: 1.02, y: -5 }}
            transition={{ type: "spring", stiffness: 300 }}
          >
            {/* Loading Overlay */}
            <motion.div
              className="absolute inset-0 bg-gradient-to-br from-primary/20 to-primary/10 flex items-center justify-center"
              initial={{ opacity: 1 }}
              animate={{ opacity: isPlaying ? 0 : 0.3 }}
              transition={{ duration: 0.3 }}
            >
              <motion.div
                className="text-primary/60"
                animate={{ scale: [1, 1.1, 1] }}
                transition={{ duration: 2, repeat: Infinity }}
              >
                <Play className="w-16 h-16 md:w-20 md:h-20" />
              </motion.div>
            </motion.div>

            {/* Video iframe */}
            <iframe
              className="absolute top-0 left-0 w-full h-full"
              src="https://www.youtube.com/embed/s3T8fksKawA?si=LArPaJDEroNRJArG&amp;start=19"
              title="Chain4Good - Nền tảng gây quỹ từ thiện phi tập trung"
              allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share"
              referrerPolicy="strict-origin-when-cross-origin"
              frameBorder="0"
              allowFullScreen
              onLoad={() => setIsPlaying(false)}
            />

            {/* Video Controls Overlay */}
            {/* <motion.div
              className="absolute bottom-4 left-4 right-4 bg-black/50 backdrop-blur-sm rounded-lg p-3 opacity-0 group-hover:opacity-100 transition-opacity duration-300"
              initial={{ y: 20 }}
              whileInView={{ y: 0 }}
            >
              <div className="flex items-center justify-between text-white">
                <div className="flex items-center gap-3">
                  <motion.button
                    whileHover={{ scale: 1.1 }}
                    whileTap={{ scale: 0.95 }}
                    className="p-2 rounded-full bg-white/20 hover:bg-white/30 transition-colors"
                  >
                    <Play className="w-4 h-4" />
                  </motion.button>
                  <motion.button
                    whileHover={{ scale: 1.1 }}
                    whileTap={{ scale: 0.95 }}
                    className="p-2 rounded-full bg-white/20 hover:bg-white/30 transition-colors"
                  >
                    <Volume2 className="w-4 h-4" />
                  </motion.button>
                </div>
                <motion.button
                  whileHover={{ scale: 1.1 }}
                  whileTap={{ scale: 0.95 }}
                  className="p-2 rounded-full bg-white/20 hover:bg-white/30 transition-colors"
                >
                  <Maximize className="w-4 h-4" />
                </motion.button>
              </div>
            </motion.div> */}
          </motion.div>

          {/* Corner Decorations */}
          <motion.div
            className="absolute -top-2 -left-2 w-8 h-8 border-l-2 border-t-2 border-primary/40 rounded-tl-lg"
            initial={{ opacity: 0, scale: 0 }}
            whileInView={{ opacity: 1, scale: 1 }}
            transition={{ delay: 0.5 }}
          />
          <motion.div
            className="absolute -top-2 -right-2 w-8 h-8 border-r-2 border-t-2 border-primary/40 rounded-tr-lg"
            initial={{ opacity: 0, scale: 0 }}
            whileInView={{ opacity: 1, scale: 1 }}
            transition={{ delay: 0.6 }}
          />
          <motion.div
            className="absolute -bottom-2 -left-2 w-8 h-8 border-l-2 border-b-2 border-primary/40 rounded-bl-lg"
            initial={{ opacity: 0, scale: 0 }}
            whileInView={{ opacity: 1, scale: 1 }}
            transition={{ delay: 0.7 }}
          />
          <motion.div
            className="absolute -bottom-2 -right-2 w-8 h-8 border-r-2 border-b-2 border-primary/40 rounded-br-lg"
            initial={{ opacity: 0, scale: 0 }}
            whileInView={{ opacity: 1, scale: 1 }}
            transition={{ delay: 0.8 }}
          />
        </div>
      </motion.div>

      {/* Enhanced Call to Action */}
      <motion.div
        initial={{ opacity: 0, y: 30 }}
        whileInView={{ opacity: 1, y: 0 }}
        viewport={{ once: true }}
        transition={{ delay: 0.6 }}
        className="text-center mt-12 md:mt-16"
      >
        <motion.p
          className="text-lg text-muted-foreground mb-6 max-w-2xl mx-auto"
          initial={{ opacity: 0 }}
          whileInView={{ opacity: 1 }}
          transition={{ delay: 0.7 }}
        >
          Xem video để hiểu rõ hơn về cách chúng tôi đang cách mạng hóa ngành từ
          thiện
        </motion.p>

        <motion.div
          className="flex flex-wrap justify-center gap-4"
          initial={{ opacity: 0, y: 20 }}
          whileInView={{ opacity: 1, y: 0 }}
          transition={{ delay: 0.8 }}
        >
          <motion.button
            className="group relative inline-flex items-center gap-2 px-6 py-3 bg-gradient-to-r from-primary to-primary/90 text-white font-semibold rounded-full shadow-lg hover:shadow-primary/50 transition-all duration-300"
            whileHover={{ scale: 1.05, y: -2 }}
            whileTap={{ scale: 0.98 }}
          >
            <Play className="w-4 h-4 group-hover:scale-110 transition-transform" />
            <span>Bắt đầu ngay</span>
            <div className="absolute inset-0 rounded-full bg-gradient-to-r from-primary to-primary/90 blur-lg opacity-0 group-hover:opacity-50 transition-opacity duration-300 -z-10" />
          </motion.button>

          <motion.button
            className="inline-flex items-center gap-2 px-6 py-3 border border-primary/30 text-primary hover:bg-primary/10 font-semibold rounded-full transition-all duration-300"
            whileHover={{ scale: 1.05, y: -2 }}
            whileTap={{ scale: 0.98 }}
          >
            <Sparkles className="w-4 h-4" />
            <span>Tìm hiểu thêm</span>
          </motion.button>
        </motion.div>
      </motion.div>
    </div>
  );
};

export default HowWork;

```

### src/module/user/components/BehindTheBanner2.jsx
```jsx
import { useState, useCallback } from "react";
import { Badge } from "@/components/ui/badge";
import { Skeleton } from "@/components/ui/skeleton";

// ImageWithSkeleton component for handling individual image loading
const ImageWithSkeleton = ({
  src,
  alt,
  className,
  badgeText,
  badgePosition,
  animationClass,
}) => {
  const [isLoaded, setIsLoaded] = useState(false);
  const [hasError, setHasError] = useState(false);

  const handleImageLoad = useCallback(() => {
    setIsLoaded(true);
  }, []);

  const handleImageError = useCallback(() => {
    setHasError(true);
    setIsLoaded(true); // Stop showing skeleton even on error
  }, []);

  // Default fallback image
  const fallbackSrc = "/hero-animals-2.png";

  return (
    <div className={`${animationClass} relative`}>
      {/* Skeleton Loading */}
      {!isLoaded && (
        <div className="relative">
          <Skeleton className="w-[180px] h-[180px] rounded-full border-[8px] border-muted" />
          {badgeText && (
            <Skeleton
              className={`absolute w-16 h-6 rounded-full ${badgePosition}`}
            />
          )}
        </div>
      )}

      {/* Actual Image */}
      <div
        className={`transition-opacity duration-300 ${
          isLoaded ? "opacity-100" : "opacity-0 absolute"
        }`}
      >
        <img
          src={hasError ? fallbackSrc : src}
          className={className}
          alt={alt}
          onLoad={handleImageLoad}
          onError={handleImageError}
          loading="lazy"
        />
        {badgeText && isLoaded && (
          <Badge className={`absolute ${badgePosition}`} variant="secondary">
            {badgeText}
          </Badge>
        )}
      </div>
    </div>
  );
};

// Mobile ImageWithSkeleton component for smaller images
const MobileImageWithSkeleton = ({ src, alt, animationClass }) => {
  const [isLoaded, setIsLoaded] = useState(false);
  const [hasError, setHasError] = useState(false);

  const handleImageLoad = useCallback(() => {
    setIsLoaded(true);
  }, []);

  const handleImageError = useCallback(() => {
    setHasError(true);
    setIsLoaded(true);
  }, []);

  const fallbackSrc = "/hero-animals-2.png";

  return (
    <div className="relative">
      {/* Skeleton Loading */}
      {!isLoaded && <Skeleton className="w-[80px] h-[80px] rounded-lg" />}

      {/* Actual Image */}
      <img
        src={hasError ? fallbackSrc : src}
        className={`${animationClass} w-[80px] h-[80px] transition-opacity duration-300 ${
          isLoaded ? "opacity-100" : "opacity-0 absolute"
        }`}
        alt={alt}
        onLoad={handleImageLoad}
        onError={handleImageError}
        loading="lazy"
      />
    </div>
  );
};

const BehindTheBanner2 = ({ campaigns }) => {
  // Helper function to safely get campaign data
  const getCampaignData = (index) => {
    const campaign = campaigns?.data?.[index];
    return {
      imageUrl: campaign?.images?.[0]?.url || "/hero-animals-2.png",
      categoryName: campaign?.category?.name || "Danh mục",
    };
  };

  // Loading state for overall campaigns data
  const isLoadingCampaigns = !campaigns?.data || campaigns.data.length === 0;

  return (
    <>
      <div className="absolute inset-0 -z-10 flex items-center justify-center overflow-hidden">
        <div className="flex h-[600px] w-[600px] items-center justify-center rounded-full border border-dashed border-gray-200 md:h-[1300px] md:w-[1300px]">
          <div className="h-[300px] w-[300px] rounded-full border border-dashed md:h-[600px] md:w-[600px]"></div>
        </div>
      </div>

      {/* Desktop layout */}
      <div className="-z-20 -space-y-80 hidden md:flex flex-col items-center py-32 justify-between text-9xl top-0 left-0 right-0 bottom-0 absolute">
        {/* First row */}
        <div className="flex gap-[600px]">
          {isLoadingCampaigns ? (
            <>
              <div className="animate-gentleFloat3 relative">
                <Skeleton className="w-[180px] h-[180px] rounded-full border-[8px] border-muted" />
                <Skeleton className="absolute top-3 -right-8 w-16 h-6 rounded-full" />
              </div>
              <div className="animate-gentleFloat1 relative">
                <Skeleton className="w-[180px] h-[180px] rounded-full border-[8px] border-muted" />
                <Skeleton className="absolute bottom-3 -left-8 w-16 h-6 rounded-full" />
              </div>
            </>
          ) : (
            <>
              <ImageWithSkeleton
                src={getCampaignData(0).imageUrl}
                alt="Campaign 1"
                className="w-[180px] h-[180px] border-primary rounded-full border-[8px] object-cover"
                badgeText={getCampaignData(0).categoryName}
                badgePosition="top-3 -right-8"
                animationClass="animate-gentleFloat3"
              />
              <ImageWithSkeleton
                src={getCampaignData(1).imageUrl}
                alt="Campaign 2"
                className="w-[180px] h-[180px] border-primary rounded-full border-[8px] object-cover"
                badgeText={getCampaignData(1).categoryName}
                badgePosition="bottom-3 -left-8"
                animationClass="animate-gentleFloat1"
              />
            </>
          )}
        </div>

        {/* Second row */}
        <div className="flex gap-[900px]">
          {isLoadingCampaigns ? (
            <>
              <div className="animate-gentleFloat2 relative">
                <Skeleton className="w-[180px] h-[180px] rounded-full border-[8px] border-muted" />
                <Skeleton className="absolute top-3 -left-8 w-16 h-6 rounded-full" />
              </div>
              <div className="animate-gentleFloat3 relative">
                <Skeleton className="w-[180px] h-[180px] rounded-full border-[8px] border-muted" />
                <Skeleton className="absolute bottom-3 -right-8 w-16 h-6 rounded-full" />
              </div>
            </>
          ) : (
            <>
              <ImageWithSkeleton
                src={getCampaignData(2).imageUrl}
                alt="Campaign 3"
                className="w-[180px] h-[180px] border-primary rounded-full border-[8px] object-cover"
                badgeText={getCampaignData(2).categoryName}
                badgePosition="top-3 -left-8"
                animationClass="animate-gentleFloat2"
              />
              <ImageWithSkeleton
                src={getCampaignData(3).imageUrl}
                alt="Campaign 4"
                className="w-[180px] h-[180px] border-primary rounded-full border-[8px] object-cover"
                badgeText={getCampaignData(3).categoryName}
                badgePosition="bottom-3 -right-8"
                animationClass="animate-gentleFloat3"
              />
            </>
          )}
        </div>

        {/* Third row */}
        <div className="flex gap-[500px]">
          {isLoadingCampaigns ? (
            <>
              <div className="animate-gentleFloat1 relative">
                <Skeleton className="w-[180px] h-[180px] rounded-full border-[8px] border-muted" />
                <Skeleton className="absolute -top-8 left-3 w-16 h-6 rounded-full" />
              </div>
              <div className="animate-gentleFloat2 relative">
                <Skeleton className="w-[180px] h-[180px] rounded-full border-[8px] border-muted" />
                <Skeleton className="absolute bottom-8 -right-3 w-16 h-6 rounded-full" />
              </div>
            </>
          ) : (
            <>
              <ImageWithSkeleton
                src={getCampaignData(4).imageUrl}
                alt="Campaign 5"
                className="w-[180px] h-[180px] border-primary rounded-full border-[8px] object-cover"
                badgeText={getCampaignData(4).categoryName}
                badgePosition="-top-8 left-3"
                animationClass="animate-gentleFloat1"
              />
              <ImageWithSkeleton
                src={getCampaignData(5).imageUrl}
                alt="Campaign 6"
                className="w-[180px] h-[180px] border-primary rounded-full border-[8px] object-cover"
                badgeText={getCampaignData(5).categoryName}
                badgePosition="bottom-8 -right-3"
                animationClass="animate-gentleFloat2"
              />
            </>
          )}
        </div>
      </div>

      {/* Mobile layout */}
      <div className="-z-20 blur-2xl flex md:hidden gap-6 flex-col items-center justify-center text-9xl top-0 left-0 right-0 bottom-0 absolute">
        <div className="flex gap-20">
          <MobileImageWithSkeleton
            src="/hero-animals-2.png"
            alt="Hero animals"
            animationClass="animate-gentleFloat"
          />
          <MobileImageWithSkeleton
            src="/hero-business-1.png"
            alt="Hero business"
            animationClass="animate-gentleFloat3"
          />
        </div>
        <div className="flex gap-32">
          <MobileImageWithSkeleton
            src="/hero-education-1.png"
            alt="Hero education 1"
            animationClass="animate-gentleFloat2"
          />
          <MobileImageWithSkeleton
            src="/hero-business-4.png"
            alt="Hero business 4"
            animationClass="animate-gentleFloat3"
          />
        </div>
        <div className="flex gap-20">
          <MobileImageWithSkeleton
            src="/hero-education-2.png"
            alt="Hero education 2"
            animationClass="animate-gentleFloat2"
          />
          <MobileImageWithSkeleton
            src="/hero-education-3.png"
            alt="Hero education 3"
            animationClass="animate-gentleFloat"
          />
        </div>
      </div>
    </>
  );
};

export default BehindTheBanner2;

```

### src/module/user/components/TokenSelectModal.jsx
```jsx
import { Button } from "@/components/ui/button";
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog";
import { TOKEN } from "@/hooks/useCharityDonation";
import { cn } from "@/lib/utils";
import { Check, ChevronDown } from "lucide-react";
import { useEffect, useState } from "react";

const TokenSelectModal = ({ onSelect, selectedToken, campaignAcceptToken }) => {
  const [open, setOpen] = useState(false);

  const getTokenByAddress = (address) => {
    if (!address) return null;
    const match = Object.entries(TOKEN).find(
      ([_, token]) => token.address.toLowerCase() === address.toLowerCase()
    );
    return match ? { id: match[0], ...match[1] } : null;
  };

  useEffect(() => {
    if (campaignAcceptToken) {
      const acceptedToken = getTokenByAddress(campaignAcceptToken);
      if (acceptedToken) {
        onSelect(acceptedToken);
      }
    }
  }, [campaignAcceptToken]);

  const handleSelect = (token) => {
    onSelect(token);
    setOpen(false);
  };

  const tokens = Object.entries(TOKEN)
    .filter(
      ([_, token]) =>
        !campaignAcceptToken ||
        token.address.toLowerCase() === campaignAcceptToken.toLowerCase()
    )
    .map(([id, token]) => ({
      id,
      name: token.name || id,
      symbol: token.symbol || id,
      icon: token.icon || "/icons/default-token.svg",
      description: token.description || `${id} token`,
      address: token.address,
      decimals: token.decimals,
    }));

  const selectedTokenInfo =
    tokens.find((t) => t.id === selectedToken) || tokens[0];

  const isLocked = campaignAcceptToken && tokens.length === 1;

  return (
    <Dialog open={open} onOpenChange={setOpen}>
      <DialogTrigger asChild>
        <Button
          variant="outline"
          className="w-full flex items-center justify-between"
          disabled={isLocked}
        >
          <div className="flex items-center gap-2">
            <img
              src={selectedTokenInfo?.icon}
              alt={selectedTokenInfo?.symbol}
              className="w-6 h-6"
            />
            <span className="font-medium">{selectedTokenInfo?.name}</span>
            <span className="text-sm text-muted-foreground">
              ({selectedTokenInfo?.symbol})
            </span>
          </div>
          {!isLocked && <ChevronDown className="h-4 w-4 opacity-50" />}
        </Button>
      </DialogTrigger>

      <DialogContent className="sm:max-w-[425px]">
        <DialogHeader>
          <DialogTitle>
            {campaignAcceptToken
              ? "Token được chấp nhận cho chiến dịch này"
              : "Chọn token cho chiến dịch"}
          </DialogTitle>
        </DialogHeader>
        <div className="grid gap-2">
          {tokens.map((token) => (
            <button
              key={token.id}
              className={cn(
                "w-full flex items-center gap-4 p-4 rounded-lg border transition-all",
                "hover:border-primary hover:bg-accent/50",
                selectedToken === token.id &&
                  "border-primary bg-accent ring-2 ring-primary/10"
              )}
              onClick={() => handleSelect(token)}
            >
              <img src={token.icon} alt={token.name} className="w-8 h-8" />
              <div className="flex-1 text-left">
                <div className="flex items-center gap-2">
                  <h4 className="font-medium">{token.name}</h4>
                  <span className="text-sm text-muted-foreground">
                    ({token.symbol})
                  </span>
                </div>
                <p className="text-sm text-muted-foreground">
                  {token.description}
                </p>
              </div>
              {selectedToken === token.id && (
                <div className="size-5 rounded-full bg-primary grid place-items-center">
                  <Check className="w-3 h-3 text-primary-foreground" />
                </div>
              )}
            </button>
          ))}
        </div>
      </DialogContent>
    </Dialog>
  );
};

export default TokenSelectModal;

```

### src/module/user/components/CommentBox.jsx
```jsx
import React, { useState } from "react";
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import { Button } from "@/components/ui/button";
import { formatDistance } from "date-fns";
import { vi } from "date-fns/locale";
import { Heart, MessageCircle } from "lucide-react";
import { Skeleton } from "@/components/ui/skeleton";
import { MessageSquare } from "lucide-react";
import CommentForm from "./CommentForm";
import useUserStore from "@/hooks/useUserStore";
import { toast } from "sonner";
import { toggleLikeComment } from "@/services/commentService";
import { useMutation, useQueryClient } from "@tanstack/react-query";
import { cn } from "@/lib/utils";
import { Tooltip, TooltipProvider } from "@/components/ui/tooltip";

const Comment = ({
  comment,
  onReply,
  level = 0,
  parentUser = null,
  activeReplyId,
  setActiveReplyId,
  maxReplies = 2,
  showAllReplies = false,
}) => {
  const [showAll, setShowAll] = useState(false);
  const { user } = useUserStore();
  const isReplyFormVisible = activeReplyId === comment.id;
  const queryClient = useQueryClient();

  const displayedReplies =
    showAll || showAllReplies
      ? comment.replies
      : comment.replies?.slice(0, maxReplies);

  const hasMoreReplies = !showAll && comment.replies?.length > maxReplies;

  const { mutate: handleLike, isPending: isLiking } = useMutation({
    mutationFn: () => toggleLikeComment(comment.id),
    onSuccess: () => {
      queryClient.invalidateQueries(["comments"]);
    },
  });

  const LikeButton = () => {
    const isLiked = comment.Like?.some((like) => like.userId === user?.id);

    return (
      <Button
        variant={isLiked ? "liked" : "ghost"}
        size="sm"
        className={cn(
          isLiked ? "text-red-500" : "text-muted-foreground",
          isLiking && "opacity-50 cursor-not-allowed"
        )}
        onClick={() => {
          if (!user) return toast.warning("Vui lòng đăng nhập!");
          if (isLiking) return;
          handleLike();
        }}
        disabled={isLiking}
      >
        <Heart className={cn("w-4 h-4 mr-2", isLiked && "fill-red-500")} />
        {comment._count.Like}
      </Button>
    );
  };

  // Replace existing like button with new component
  return (
    <>
      <div className={`flex gap-4 ${level > 0 ? "ml-12" : ""}`}>
        {/* <Avatar>
          <AvatarImage src={comment.user.image} />
          <AvatarFallback>{comment.user.name[0]}</AvatarFallback>
        </Avatar> */}
        <div>
          <div className="relative">
            <Avatar className="h-8 w-8 md:h-10 md:w-10">
              <AvatarImage src={comment?.user?.image} />
              <AvatarFallback>CG</AvatarFallback>
            </Avatar>
            <div className="absolute -bottom-1 -right-1 flex">
              {comment?.user?.UserBadge?.map((userBadge, index) => (
                <TooltipProvider key={userBadge.badge.id}>
                  <Tooltip content={userBadge.badge.description}>
                    <img
                      src={userBadge.badge.iconUrl}
                      alt={userBadge.badge.name}
                      className="w-4 h-4 md:w-5 md:h-5"
                      style={{ marginLeft: index > 0 ? "-6px" : "0" }}
                    />
                  </Tooltip>
                </TooltipProvider>
              ))}
            </div>
          </div>
        </div>
        <div className="flex-1 space-y-2">
          <div className="bg-muted p-4 rounded-lg">
            <div className="flex items-center justify-between mb-2">
              <div>
                <span className="font-semibold mr-2">{comment.user.name}</span>
                {comment.parentId && (
                  <span className="text-xs text-muted-foreground mx-2">
                    trả lời
                  </span>
                )}
                <span className="text-xs text-muted-foreground">
                  {formatDistance(new Date(comment.createdAt), new Date(), {
                    addSuffix: true,
                    locale: vi,
                  })}
                </span>
              </div>
            </div>
            <p className="text-sm">
              {level > 1 && parentUser && (
                <span className="text-primary font-medium">
                  @{parentUser.name}{" "}
                </span>
              )}
              {comment.content}
            </p>
          </div>

          <div className="flex items-center gap-4">
            <LikeButton />
            <Button
              variant="ghost"
              size="sm"
              className="text-muted-foreground"
              onClick={() => {
                if (!user) return toast.warning("Vui lòng đăng nhập!");
                setActiveReplyId(isReplyFormVisible ? null : comment.id);
              }}
            >
              <MessageCircle className="w-4 h-4 mr-2" />
              Trả lời
            </Button>
          </div>
        </div>
      </div>

      {isReplyFormVisible && (
        <div className={level > 0 ? "ml-24" : "ml-12"}>
          <CommentForm
            parentId={comment.id}
            onSubmit={(content) => {
              onReply(content, comment.id);
              setActiveReplyId(null); // Close form after submitting
            }}
            autoFocus
            user={user}
            onCancel={() => setActiveReplyId(null)}
          />
        </div>
      )}

      {/* Show replies */}
      {displayedReplies?.map((reply) => (
        <Comment
          key={reply.id}
          comment={reply}
          onReply={onReply}
          level={level + 1}
          parentUser={comment.user}
          activeReplyId={activeReplyId}
          setActiveReplyId={setActiveReplyId}
          showAllReplies={showAll}
        />
      ))}

      {/* Show "View All" button if there are more replies */}
      {hasMoreReplies && (
        <div className={`ml-12 mt-2`}>
          <Button
            variant="ghost"
            size="sm"
            className="text-primary hover:text-primary/80"
            onClick={() => setShowAll(true)}
          >
            Xem tất cả {comment.replies.length} câu trả lời
          </Button>
        </div>
      )}
    </>
  );
};

const CommentSkeleton = () => {
  return (
    <div className="flex gap-4">
      <Skeleton className="h-10 w-10 rounded-full" />
      <div className="flex-1 space-y-2">
        <div className="bg-muted p-4 rounded-lg">
          <div className="space-y-2">
            <Skeleton className="h-4 w-24" />
            <Skeleton className="h-4 w-full" />
          </div>
        </div>
        <div className="flex items-center gap-4">
          <Skeleton className="h-8 w-16" />
          <Skeleton className="h-8 w-16" />
        </div>
      </div>
    </div>
  );
};

const EmptyState = () => {
  return (
    <div className="text-center py-12">
      <div className="flex justify-center mb-4">
        <MessageSquare className="h-12 w-12 text-muted-foreground/50" />
      </div>
      <h3 className="text-lg font-medium mb-2">Chưa có bình luận nào</h3>
      <p className="text-sm text-muted-foreground">
        Hãy là người đầu tiên bình luận về chiến dịch này
      </p>
    </div>
  );
};

const CommentBox = ({
  comments = [],
  onAddComment,
  onReply,
  isLoading = false,
  isSubmitting = false,
}) => {
  const [activeReplyId, setActiveReplyId] = useState(null);
  const [showAllComments, setShowAllComments] = useState(false);

  const commentMap = comments.reduce((acc, comment) => {
    acc[comment.id] = {
      ...comment,
      replies: [],
    };
    return acc;
  }, {});

  comments.forEach((comment) => {
    if (comment.parentId) {
      const parent = commentMap[comment.parentId];
      if (parent) {
        parent.replies.push(commentMap[comment.id]);
      }
    }
  });

  const topLevelComments = Object.values(commentMap).filter(
    (comment) => !comment.parentId
  );

  const displayedComments = showAllComments
    ? topLevelComments
    : topLevelComments.slice(0, 5);

  const hasMoreComments = !showAllComments && topLevelComments.length > 5;

  if (isLoading) {
    return (
      <div className="space-y-6">
        {[1, 2, 3].map((i) => (
          <CommentSkeleton key={i} />
        ))}
      </div>
    );
  }

  if (!comments.length) {
    return (
      <>
        <CommentForm
          onSubmit={(content) => onAddComment(content)}
          isLoading={isSubmitting}
        />
        <EmptyState />;
      </>
    );
  }

  return (
    <div className="space-y-6">
      {/* Always show CommentForm at the top */}
      <CommentForm
        onSubmit={(content) => onAddComment(content)}
        isLoading={isSubmitting}
      />

      {isLoading ? (
        <div className="space-y-6">
          {[1, 2, 3].map((i) => (
            <CommentSkeleton key={i} />
          ))}
        </div>
      ) : !comments.length ? (
        <EmptyState />
      ) : (
        <div className="space-y-6">
          {displayedComments.map((comment) => (
            <Comment
              key={comment.id}
              comment={comment}
              onReply={onReply}
              activeReplyId={activeReplyId}
              setActiveReplyId={setActiveReplyId}
              maxReplies={2}
            />
          ))}

          {hasMoreComments && (
            <div className="text-center pt-4">
              <Button
                variant="ghost"
                className="text-primary hover:text-primary/80"
                onClick={() => setShowAllComments(true)}
              >
                Xem tất cả {topLevelComments.length} bình luận
              </Button>
            </div>
          )}
        </div>
      )}
    </div>
  );
};

export default CommentBox;

```

### src/module/user/components/ProgressList.jsx
```jsx
import { Dialog, DialogContent } from "@/components/ui/dialog";
import { getFileInfo } from "@/lib/utils";
import { getCampaignProgress } from "@/services/campaignService";
import { useQuery } from "@tanstack/react-query";
import { format } from "date-fns";
import { vi } from "date-fns/locale";
import { useState } from "react";
import { CheckCircle2, X, ClipboardList } from "lucide-react"; // Thêm ClipboardList icon
import { Button } from "@/components/ui/button";

const EmptyState = () => {
  return (
    <div className="text-center py-12 border-2 border-dashed rounded-lg">
      <div className="flex justify-center mb-4">
        <ClipboardList className="h-12 w-12 text-muted-foreground/50" />
      </div>
      <h3 className="text-lg font-medium mb-2">Chưa có cập nhật</h3>
      <p className="text-sm text-muted-foreground">
        Chưa có tiến trình nào được cập nhật cho chiến dịch này
      </p>
    </div>
  );
};

const ProgressList = ({ campaignId }) => {
  const [selectedPreview, setSelectedPreview] = useState(null);
  const { data: progressList, isLoading } = useQuery({
    queryKey: ["campaign-progress", campaignId],
    queryFn: () => getCampaignProgress(campaignId),
  });

  const handlePreview = (url) => {
    setSelectedPreview(url);
  };

  if (isLoading) {
    return (
      <div className="space-y-6">
        <h3 className="text-xl font-semibold">Tiến trình chiến dịch</h3>
        <div className="animate-pulse space-y-8">
          {[1, 2].map((i) => (
            <div key={i} className="flex gap-4">
              <div className="w-8 h-8 rounded-full bg-muted" />
              <div className="flex-1 space-y-3">
                <div className="h-4 bg-muted rounded w-1/4" />
                <div className="h-3 bg-muted rounded w-1/6" />
                <div className="space-y-2">
                  <div className="h-3 bg-muted rounded w-full" />
                  <div className="h-3 bg-muted rounded w-full" />
                  <div className="h-3 bg-muted rounded w-2/3" />
                </div>
              </div>
            </div>
          ))}
        </div>
      </div>
    );
  }

  return (
    <>
      <div className="space-y-6">
        <h3 className="text-xl font-semibold">Tiến trình chiến dịch</h3>
        {!progressList?.length ? (
          <EmptyState />
        ) : (
          <div className="relative space-y-8">
            {/* Thêm line xuyên suốt */}
            <div className="absolute left-4 top-0 bottom-0 w-0.5 bg-muted" />

            {progressList?.map((progress, index) => (
              <div key={progress.id} className="relative pl-12 pb-8">
                {/* Circle và line */}
                <div className="absolute left-0 flex items-center justify-center w-8 h-8 bg-background border-2 border-primary rounded-full">
                  <CheckCircle2 className="w-5 h-5 text-primary" />
                </div>

                {/* Content */}
                <div className="space-y-3">
                  <div className="flex flex-col gap-1">
                    <h4 className="font-medium text-lg">{progress.title}</h4>
                    <p className="text-sm text-muted-foreground">
                      {format(new Date(progress.createdAt), "PPP", {
                        locale: vi,
                      })}
                    </p>
                  </div>

                  <div className="pl-4 border-l-2 border-muted">
                    <div
                      className="prose prose-sm max-w-none"
                      dangerouslySetInnerHTML={{ __html: progress.description }}
                    />

                    {/* Images */}
                    {progress.images?.length > 0 && (
                      <div className="grid grid-cols-2 md:grid-cols-3 gap-4 mt-4">
                        {progress.images.map((image) => (
                          <div key={image} className="relative group">
                            <img
                              src={image}
                              alt="Progress"
                              className="rounded-lg object-cover aspect-video cursor-pointer group-hover:opacity-90 transition-opacity"
                              onClick={() => handlePreview(image)}
                            />
                            <div className="absolute inset-0 bg-black/40 opacity-0 group-hover:opacity-100 transition-opacity rounded-lg flex items-center justify-center">
                              <span className="text-white text-sm">
                                Xem ảnh
                              </span>
                            </div>
                          </div>
                        ))}
                      </div>
                    )}

                    {/* Documents */}
                    {progress.documents?.length > 0 && (
                      <div className="mt-4 space-y-2">
                        <p className="text-sm font-medium">
                          Tài liệu đính kèm:
                        </p>
                        <div className="grid grid-cols-1 sm:grid-cols-2 gap-2">
                          {progress.documents.map((doc) => {
                            const {
                              icon: Icon,
                              color,
                              fileName,
                              type,
                            } = getFileInfo(doc);
                            return (
                              <div
                                key={doc}
                                className="flex items-center gap-2 p-2 rounded-lg hover:bg-accent/50 transition-colors cursor-pointer border border-border"
                                onClick={() =>
                                  type === "image"
                                    ? handlePreview(doc)
                                    : window.open(doc, "_blank")
                                }
                              >
                                <Icon className={`w-5 h-5 ${color}`} />
                                <span className="text-sm truncate flex-1">
                                  {fileName}
                                </span>
                              </div>
                            );
                          })}
                        </div>
                      </div>
                    )}
                  </div>
                </div>
              </div>
            ))}
          </div>
        )}
      </div>

      {/* Preview Dialog */}
      <Dialog
        open={!!selectedPreview}
        onOpenChange={() => setSelectedPreview(null)}
      >
        <DialogContent className="max-w-[90vw] h-[90vh] p-0">
          <div className="relative h-full">
            {/* Close button */}
            <Button
              variant="ghost"
              size="icon"
              className="absolute right-2 top-2 z-50"
              onClick={() => setSelectedPreview(null)}
            >
              <X className="h-4 w-4" />
            </Button>

            {/* Preview content */}
            <div className="h-full flex items-center justify-center bg-black/50">
              {getFileInfo(selectedPreview)?.type === "image" ? (
                <img
                  src={selectedPreview}
                  alt="Preview"
                  className="max-h-full max-w-full object-contain"
                />
              ) : getFileInfo(selectedPreview)?.type === "video" ? (
                <video controls className="max-h-full max-w-full">
                  <source
                    src={selectedPreview}
                    type={`video/${getFileInfo(selectedPreview)?.extension}`}
                  />
                </video>
              ) : getFileInfo(selectedPreview)?.type === "audio" ? (
                <div className="w-full max-w-xl p-4 bg-background rounded-lg">
                  <audio controls className="w-full">
                    <source src={selectedPreview} type="audio/mpeg" />
                  </audio>
                </div>
              ) : null}
            </div>
          </div>
        </DialogContent>
      </Dialog>
    </>
  );
};

export default ProgressList;

```

### src/module/user/components/BehindTheBanner.jsx
```jsx
const BehindTheBanner = () => {
  return (
    <>
      <div className="absolute inset-0 -z-10 flex items-center justify-center overflow-hidden ">
        <div className="flex h-[600px] w-[600px] items-center justify-center rounded-full border border-dashed border-gray-200 md:h-[1300px] md:w-[1300px]">
          <div className="h-[300px] w-[300px] rounded-full border border-dashed md:h-[600px] md:w-[600px]"></div>
        </div>
      </div>
      <div className="-z-20 blur-2xl animate-out hidden md:flex gap-10 flex-col items-center justify-center text-9xl top-0 left-0 right-0 bottom-0 absolute">
        {/* Desktop layout */}
        <div className="flex gap-80">
          <img
            src="/hero-animals-2.png"
            className="animate-gentleFloat w-[140px] h-[140px]"
            alt="hero-animals-2.png"
          />
          <img
            src="/hero-business-1.png"
            className="animate-gentleFloat3 w-[140px] h-[140px]"
            alt="hero-business-1.png"
          />
        </div>
        <div className="flex gap-[800px]">
          <img
            src="/hero-education-1.png"
            className="animate-gentleFloat2 w-[140px] h-[140px]"
            alt="hero-education-1.png"
          />
          <img
            src="/hero-business-4.png"
            className="animate-gentleFloat3 w-[140px] h-[140px]"
            alt="hero-business-4.png"
          />
        </div>
        <div className="flex gap-80">
          <img
            src="/hero-education-2.png"
            className="animate-gentleFloat2 w-[140px] h-[140px]"
            alt="hero-education-2.png"
          />
          <img
            src="/hero-education-3.png"
            className="animate-gentleFloat w-[140px] h-[140px]"
            alt="hero-education-3.png"
          />
        </div>
      </div>

      <div className="-z-20 blur-2xl flex md:hidden gap-6 flex-col items-center justify-center text-9xl top-0 left-0 right-0 bottom-0 absolute">
        <div className="flex gap-20">
          <img
            src="/hero-animals-2.png"
            className="animate-gentleFloat w-[80px] h-[80px]"
          />
          <img
            src="/hero-business-1.png"
            className="animate-gentleFloat3 w-[80px] h-[80px]"
          />
        </div>
        <div className="flex gap-32">
          <img
            src="/hero-education-1.png"
            className="animate-gentleFloat2 w-[80px] h-[80px]"
          />
          <img
            src="/hero-business-4.png"
            className="animate-gentleFloat3 w-[80px] h-[80px]"
          />
        </div>
        <div className="flex gap-20">
          <img
            src="/hero-education-2.png"
            className="animate-gentleFloat2 w-[80px] h-[80px]"
          />
          <img
            src="/hero-education-3.png"
            className="animate-gentleFloat w-[80px] h-[80px]"
          />
        </div>
      </div>
    </>
  );
};
export default BehindTheBanner;

```

### src/module/user/components/guide.cms.js
```js

```

### src/module/user/components/CommentForm.jsx
```jsx
import React, { useState } from "react";
import { Button } from "@/components/ui/button";
import { Textarea } from "@/components/ui/textarea";
import { Loader2, Send } from "lucide-react";
import { toast } from "sonner";
import useUserStore from "@/hooks/useUserStore";

const CommentForm = ({
  onSubmit,
  isLoading = false,
  parentId = null,
  autoFocus = false,
  onCancel = null,
}) => {
  const [content, setContent] = useState("");

  const { user } = useUserStore();

  const handleSubmit = (e) => {
    e.preventDefault();

    if (!user) return toast.error("Vui lòng đăng nhập!");
    if (!content.trim()) return;

    onSubmit(content, parentId);
    setContent("");
  };

  return (
    <form onSubmit={handleSubmit} className="space-y-4">
      <Textarea
        value={content}
        onChange={(e) => setContent(e.target.value)}
        placeholder={parentId ? "Viết câu trả lời..." : "Viết bình luận..."}
        className="min-h-[100px]"
        autoFocus={autoFocus}
      />
      <div className="flex justify-end gap-2">
        {onCancel && (
          <Button type="button" variant="ghost" onClick={onCancel}>
            Hủy
          </Button>
        )}
        <Button type="submit" disabled={!content.trim() || isLoading}>
          {isLoading ? (
            <>
              <Loader2 className="w-4 h-4 animate-spin mr-2" />
              Đang gửi...
            </>
          ) : (
            <>
              <Send className="w-4 h-4 mr-2" />
              {parentId ? "Trả lời" : "Bình luận"}
            </>
          )}
        </Button>
      </div>
    </form>
  );
};

export default CommentForm;

```

### src/module/user/components/MetaMaskAccount.jsx
```jsx
import { Button } from "@/components/ui/button";
import { Wallet } from "lucide-react";
import React, { useEffect, useState } from "react";
import { toast } from "sonner";

const MetaMaskAccount = () => {
  const [account, setAccount] = useState(null);

  const getCurrentAccount = async () => {
    if (typeof window.ethereum === "undefined") {
      toast.message(
        "Vui lòng cài MetaMask và mở trang này bằng trình duyệt trong MetaMask."
      );
      return;
    }
    if (window.ethereum) {
      const accounts = await window.ethereum.request({
        method: "eth_requestAccounts",
      });
      setAccount(accounts[0]);
    } else {
      toast.message("Vui lòng cài MetaMask!");
    }
  };

  useEffect(() => {
    getCurrentAccount();
  }, []);

  const shortenAddress = (addr) =>
    addr ? `${addr.slice(0, 6)}...${addr.slice(-4)}` : "";

  return (
    <Button
      variant={account ? "secondary" : "default"}
      className="w-full md:w-40 md:rounded-full font-mono text-xs font-medium transition-all"
      onClick={getCurrentAccount}
    >
      <Wallet className="mr-2" />
      {account ? shortenAddress(account) : "Kết nối ví"}
    </Button>
  );
};

export default MetaMaskAccount;

```

### src/module/user/components/NFTLeaderboard.jsx
```jsx
import { useCharityHearts } from "@/hooks/useNFTContract";
import { useEffect, useState } from "react";
import { Card } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Trophy, Medal, Award } from "lucide-react";
import { Skeleton } from "@/components/ui/skeleton";

export const NFTLeaderboard = () => {
  const [leaderboard, setLeaderboard] = useState(null);
  const { getNFTLeaderboard } = useCharityHearts();

  useEffect(() => {
    const fetchData = async () => {
      const response = await getNFTLeaderboard();
      setLeaderboard(response);
    };
    fetchData();
  }, [getNFTLeaderboard]);

  const getRankIcon = (index) => {
    switch (index) {
      case 0:
        return <Trophy className="h-5 w-5 text-yellow-500" />;
      case 1:
        return <Medal className="h-5 w-5 text-gray-400" />;
      case 2:
        return <Award className="h-5 w-5 text-amber-600" />;
      default:
        return (
          <span className="font-bold text-muted-foreground">#{index + 1}</span>
        );
    }
  };

  if (!leaderboard) {
    return (
      <Card className="p-6">
        <div className="space-y-4">
          <Skeleton className="h-8 w-[200px]" />
          <div className="space-y-3">
            {[1, 2, 3].map((i) => (
              <Skeleton key={i} className="h-16 w-full" />
            ))}
          </div>
        </div>
      </Card>
    );
  }

  return (
    <Card className="p-6 container">
      <div className="space-y-6">
        <div className="flex items-center justify-between">
          <h2 className="text-2xl font-bold">Bảng xếp hạng NFT</h2>
          <Badge variant="outline">Top {leaderboard.length}</Badge>
        </div>

        <div className="divide-y">
          {leaderboard.map((item, index) => (
            <div
              key={item.address}
              className="flex items-center justify-between py-4 hover:bg-muted/50 rounded-lg px-4 transition-colors"
            >
              <div className="flex items-center gap-4">
                <div className="flex items-center justify-center w-8">
                  {getRankIcon(index)}
                </div>
                <div className="space-y-1">
                  <p className="font-mono text-sm">{item.shortAddress}</p>
                  <div className="flex gap-2">
                    <Badge variant="secondary" className="text-xs">
                      Holding: {item.count}
                    </Badge>
                    <Badge variant="outline" className="text-xs">
                      Minted: {item.totalMinted}
                    </Badge>
                  </div>
                </div>
              </div>

              <div className="text-right">
                <span className="text-2xl font-bold text-primary">
                  {item.count}
                </span>
                <span className="text-sm text-muted-foreground ml-1">NFTs</span>
              </div>
            </div>
          ))}
        </div>

        {leaderboard.length === 0 && (
          <div className="text-center py-8 text-muted-foreground">
            <p>Chưa có dữ liệu.</p>
          </div>
        )}
      </div>
    </Card>
  );
};

```

### src/module/user/components/CampaignCard.jsx
```jsx
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import {
  CampaignStatus,
  CampaignStatusColors,
  CampaignStatusLabel,
} from "@/constants/status";
import { cn, formatDate } from "@/lib/utils";
import DOMPurify from "dompurify";
import { motion } from "framer-motion";
import { isNumber } from "lodash";
import {
  AlertCircle,
  Clock,
  Eye,
  Loader2,
  Lock, // Add Lock import
  Pickaxe,
  Target,
} from "lucide-react";
import { useNavigate } from "react-router-dom";
import { useState } from "react";
import TokenSelectModal from "./TokenSelectModal";

const CampaignCard = ({
  campaign,
  handleCreateContract,
  handleCloseCampaign,
  isClosing,
}) => {
  const [selectedToken, setSelectedToken] = useState("ETH");
  const [isCreating, setIsCreating] = useState(false);
  const navigate = useNavigate();
  const isExpired = new Date(campaign.deadline) <= new Date();

  // Update handleCreate to manage internal isCreating state
  const handleCreate = async () => {
    try {
      setIsCreating(true);
      await handleCreateContract(campaign, selectedToken);
    } catch (error) {
      console.error("Error creating contract:", error);
    } finally {
      setIsCreating(false);
    }
  };

  const renderMedia = () => {
    if (campaign.cover.type === "VIDEO") {
      return (
        <video
          src={campaign.cover.url}
          className="w-full h-48 object-cover"
          controls
          muted
        >
          <source src={campaign.cover.url} type="video/mp4" />
          Your browser does not support the video tag.
        </video>
      );
    }

    return (
      <img
        src={campaign.cover.url}
        alt={campaign.title}
        className="w-full h-48 object-cover"
      />
    );
  };

  const handleCardClick = (e) => {
    // Prevent navigation if clicking on the create contract button
    if (e.target.closest("button")) {
      return;
    }
    if (e.target.closest("select")) {
      return;
    }
    navigate(`/fund/${campaign.id}`);
  };

  return (
    <motion.div
      onClick={handleCardClick}
      whileHover={{ y: -5 }}
      whileTap={{ scale: 0.98 }}
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ duration: 0.3 }}
      className={cn(
        "border relative rounded-lg cursor-pointer overflow-hidden shadow-sm hover:shadow-md",
        isExpired && "opacity-75"
      )}
    >
      {renderMedia()}
      <div className="p-4">
        <h3
          className="text-xl font-semibold mb-2 truncate"
          title={campaign.title}
        >
          {campaign.title}
        </h3>
        <div
          className="text-gray-600 text-sm mb-4 line-clamp-2 h-10 overflow-hidden"
          dangerouslySetInnerHTML={{
            __html: DOMPurify.sanitize(campaign.description),
          }}
        />

        <div className="space-y-4">
          <div className="flex justify-between text-sm">
            <div className="flex items-center gap-2">
              <Target className="w-4 h-4" />
            </div>
            <div className="flex items-center gap-2">
              <Clock
                className={cn("w-4 h-4", isExpired && "text-destructive")}
              />
              <span className={cn(isExpired && "text-destructive font-medium")}>
                {isExpired ? "Đã hết hạn" : formatDate(campaign.deadline)}
              </span>
            </div>
          </div>
          {/* <>
            {campaign.status === CampaignStatus.ACTIVE && (
            
            )}
          </> */}
          {/* {campaign.status === CampaignStatus.ACTIVE &&
            isNumber(campaign.chainCampaignId) && (
              <Button
                onClick={(e) => {
                  e.stopPropagation(); // Prevent card click
                  handleCloseCampaign(campaign);
                }}
                className="w-full"
                variant="destructive"
                disabled={isClosing}
              >
                {isClosing ? (
                  <>
                    <Loader2 className="w-4 h-4 animate-spin mr-2" />
                    Đang đóng chiến dịch...
                  </>
                ) : (
                  <>
                    <Lock className="w-4 h-4 mr-2" />
                    Đóng chiến dịch
                  </>
                )}
              </Button>
            )} */}
          {campaign.status === CampaignStatus.APPROVED &&
            !isNumber(campaign.chainCampaignId) && (
              <div className="space-y-4">
                <TokenSelectModal
                  selectedToken={selectedToken}
                  onSelect={(token) => setSelectedToken(token.id)}
                  disabled={isExpired}
                />
                <Button
                  onClick={handleCreate}
                  className="w-full"
                  variant="outline"
                  disabled={isCreating || isExpired}
                >
                  {isExpired ? (
                    <>
                      <AlertCircle className="w-4 h-4 mr-2 text-destructive" />
                      Chiến dịch đã hết hạn
                    </>
                  ) : isCreating ? (
                    <>
                      <Loader2 className="w-4 h-4 animate-spin mr-2" />
                      Đang tạo hợp đồng...
                    </>
                  ) : (
                    <>
                      <Pickaxe className="w-4 h-4 mr-2" />
                      Tạo hợp đồng
                    </>
                  )}
                </Button>
              </div>
            )}
          {isNumber(campaign.chainCampaignId) && (
            <a
              href={`https://sepolia.etherscan.io/tx/${campaign.txHash}`}
              target="_blank"
              rel="noopener noreferrer"
              className="inline-flex items-center justify-center w-full rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 border border-input bg-background hover:bg-accent hover:text-accent-foreground h-10 px-4 py-2"
            >
              <Eye className="w-4 h-4 mr-2" />
              Xem hợp đồng
            </a>
          )}
        </div>
      </div>

      {/* Status badges */}
      <div className="absolute top-4 right-4 flex gap-2">
        {isExpired && <Badge variant="destructive">Đã hết hạn</Badge>}
        <Badge
          style={{ backgroundColor: CampaignStatusColors[campaign.status] }}
        >
          {CampaignStatusLabel[campaign.status]}
        </Badge>
      </div>
    </motion.div>
  );
};

export default CampaignCard;

```

### src/module/user/components/KeyFeature.jsx
```jsx
import { Gem, Origami, Zap } from "lucide-react";
import React, { useMemo } from "react";
import { motion } from "framer-motion";
import PropTypes from 'prop-types';

const FEATURES = [
  {
    icon: <Origami className="w-5 h-5" />,
    text: "Miễn phí",
  },
  {
    icon: <Zap className="w-5 h-5" />,
    text: "Giao dịch nhanh chóng", 
  },
  {
    icon: <Gem className="w-5 h-5" />,
    text: "Đảm bảo tính bảo mật và an toàn",
  },
];

const ANIMATION_CONFIG = {
  container: {
    hidden: { opacity: 0 },
    show: {
      opacity: 1,
      transition: { staggerChildren: 0.2 }
    }
  },
  item: {
    hidden: { opacity: 0, y: 20 },
    show: {
      opacity: 1,
      y: 0,
      transition: {
        type: "spring",
        damping: 15,
        stiffness: 100
      }
    }
  }
};

const KeyFeature = () => {
  // Memoize animation variants để tránh re-render không cần thiết
  const { container, item } = useMemo(() => ANIMATION_CONFIG, []);

  return (
    <motion.div
      initial="hidden"
      whileInView="show" 
      viewport={{ once: true }}
      className="bg-[#F9F4CB] text-primary py-8"
    >
      <div className="container mx-auto px-4">
        <motion.div
          variants={container}
          className="flex flex-col md:flex-row items-center justify-center gap-6 md:gap-4"
        >
          {FEATURES.map((feature, index) => (
            <React.Fragment key={index}>
              <motion.div
                variants={item}
                className="flex items-center gap-2 text-sm md:text-base hover:scale-105 transition-transform"
              >
                {feature.icon}
                <span>{feature.text}</span>
              </motion.div>
              
              {index < FEATURES.length - 1 && (
                <motion.hr
                  initial={{ scaleX: 0 }}
                  whileInView={{ scaleX: 1 }}
                  transition={{ delay: 0.5, duration: 0.5 }}
                  className="hidden md:block w-20 border border-primary border-dashed"
                />
              )}
            </React.Fragment>
          ))}
        </motion.div>
      </div>
    </motion.div>
  );
};

KeyFeature.propTypes = {
  className: PropTypes.string
};

export default React.memo(KeyFeature);

```

### src/module/user/components/FundBox.jsx
```jsx
import CircleProgress from "@/components/CircleProgress/CircleProgress";
import ShareModal from "@/components/ShareModal/ShareModal";
import { Avatar, AvatarFallback } from "@/components/ui/avatar";
import { Button } from "@/components/ui/button";
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog";
import { Input } from "@/components/ui/input";
import { Progress } from "@/components/ui/progress";
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from "@/components/ui/tooltip";
import { TOKEN } from "@/hooks/useCharityDonation";
import useUserStore from "@/hooks/useUserStore";
import { createDonation } from "@/services/donationService";
import { generateNFTMetadata } from "@/utils/nft";
import { AvatarImage } from "@radix-ui/react-avatar";
import { useQueryClient } from "@tanstack/react-query";
import { AnimatePresence, motion } from "framer-motion";
import {
  ChartNoAxesCombined,
  Clock,
  ExternalLink,
  HandHeart,
  Loader2,
} from "lucide-react";
import { useState } from "react";
import { Link } from "react-router-dom";
import { toast } from "sonner";
import TokenSelectModal from "./TokenSelectModal";
import MintNFTModal from "./MintNFTModal";
import ConfirmMintModal from "./ConfirmMintModal";
import { useDonate } from "@/hooks/useDonate";
import TopDonorsModal from "./TopDonorsModal";

const FundBox = ({ campaign, onChainCampaign, donors, isDonorsLoading }) => {
  const [amount, setAmount] = useState("");
  const { user } = useUserStore();
  const [selectedToken, setSelectedToken] = useState(() => {
    if (!onChainCampaign?.tokenAddress) return "ETH";

    const matchingToken = Object.entries(TOKEN).find(
      ([, tokenInfo]) =>
        tokenInfo.address.toLowerCase() ===
        onChainCampaign.tokenAddress.toLowerCase()
    );

    return matchingToken ? matchingToken[0] : "ETH";
  });
  const [isLoading, setIsLoading] = useState(false);
  const [showAll, setShowAll] = useState(false);
  const [mintModalOpen, setMintModalOpen] = useState(false);
  const [showConfirmMint, setShowConfirmMint] = useState(false);
  const [nftMetadata, setNftMetadata] = useState(null);
  const [showTopDonors, setShowTopDonors] = useState(false);
  const { donate, isLoading: donateLoading } = useDonate();
  const queryClient = useQueryClient();

  const handleDonate = async () => {
    if (!amount || Number(amount) <= 0) {
      toast.error("Vui lòng nhập số tiền hợp lệ");
      return;
    }
    if (!user) {
      return toast.error("Vui lòng đăng nhập để sử dụng chức năng");
    }

    try {
      setIsLoading(true);
      const { metadata } = await donate({
        campaign,
        amount,
        selectedToken,
        user,
      });

      setNftMetadata(metadata);
      setShowConfirmMint(true);

      await Promise.all([
        queryClient.invalidateQueries([
          "campaignOnChain",
          campaign.chainCampaignId,
        ]),
        queryClient.invalidateQueries(["donors", campaign.chainCampaignId]),
        queryClient.invalidateQueries(["donationHistory", campaign.id]),
      ]);

      toast.success("Quyên góp thành công!");
      setAmount("");
      setSelectedToken("");
    } catch (error) {
      console.error("Donation error:", error);
      toast.error("Quyên góp thất bại: " + error.message);
    } finally {
      setIsLoading(false);
    }
  };

  const handleConfirmMint = () => {
    setShowConfirmMint(false);
    setMintModalOpen(true);
  };

  const handleDeclineMint = () => {
    setShowConfirmMint(false);
    setNftMetadata(null);
  };

  if (!onChainCampaign) {
    return (
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        className="bg-white shadow-md rounded-lg p-6 flex flex-col gap-6"
      >
        <div className="space-y-4 text-center">
          <div className="size-16 mx-auto rounded-full bg-muted flex items-center justify-center">
            <Loader2 className="h-8 w-8 animate-spin text-muted-foreground" />
          </div>
          <div className="space-y-2">
            <h3 className="font-medium">Đang tải thông tin từ Blockchain</h3>
            <p className="text-sm text-muted-foreground">
              Vui lòng đợi trong giây lát...
            </p>
          </div>
        </div>
      </motion.div>
    );
  }

  const displayDonations = showAll ? donors : donors?.slice(0, 3);
  const progress = onChainCampaign?.totalDonated?.progress || 0;

  return (
    <>
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        className="bg-white shadow-md rounded-lg p-6 flex flex-col gap-6 hover-lift"
      >
        <div className="flex items-center gap-6">
          <div>
            <motion.h3
              className="font-semibold text-2xl"
              initial={{ scale: 0.5 }}
              animate={{ scale: 1 }}
              transition={{ type: "spring", stiffness: 100 }}
            >
              {campaign.status === "FINISHED" &&
                onChainCampaign?.goal.formatted}
              {onChainCampaign?.totalDonated.formatted}{" "}
              {onChainCampaign?.totalDonated?.symbol}
            </motion.h3>
            <div className="text-sm text-muted-foreground flex gap-2 items-center">
              <span className="font-semibold underline">
                {onChainCampaign?.goal.formatted}{" "}
                {onChainCampaign?.goal?.symbol}
              </span>
              <span>·</span>
              <span>{donors?.length || 0} Đóng góp</span>
            </div>
          </div>
          <div className="relative w-24 h-2w-24">
            {campaign.status === "FINISHED" && (
              <CircleProgress progress={100} />
            )}
            {campaign.status !== "FINISHED" && (
              <CircleProgress progress={progress} />
            )}
          </div>
        </div>
        <div className="flex gap-3 flex-col">
          {campaign.status !== "FINISHED" && campaign.chainCampaignId && (
            <>
              <ShareModal campaign={campaign} />
              <Dialog>
                <DialogTrigger asChild>
                  <Button size="lg" className="text-lg font-medium">
                    <HandHeart className="mr-2 h-5 w-5" /> Quyên góp
                  </Button>
                </DialogTrigger>
                <DialogContent className="sm:max-w-[425px]">
                  <DialogHeader>
                    <DialogTitle className="text-2xl font-semibold text-center pb-2">
                      Quyên góp cho chiến dịch
                    </DialogTitle>
                    <p className="text-center text-muted-foreground">
                      Mọi khoản đóng góp đều có ý nghĩa, dù lớn hay nhỏ
                    </p>
                  </DialogHeader>
                  <div className="space-y-6 pt-4">
                    <div className="space-y-4">
                      <div className="bg-muted/50 p-4 rounded-lg space-y-2">
                        <div className="flex justify-between text-sm">
                          <span className="text-muted-foreground">
                            Mục tiêu
                          </span>
                          <span className="font-medium">
                            {onChainCampaign?.goal.formatted}{" "}
                            {onChainCampaign?.goal.symbol}
                          </span>
                        </div>
                        <div className="flex justify-between text-sm">
                          <span className="text-muted-foreground">
                            Đã quyên góp
                          </span>
                          <span className="font-medium">
                            {onChainCampaign?.totalDonated.formatted}{" "}
                            {onChainCampaign?.totalDonated.symbol}
                          </span>
                        </div>
                        <Progress value={progress} className="h-2" />
                      </div>

                      <div className="space-y-2">
                        <label className="text-sm font-medium">
                          Chọn token
                        </label>
                        <TokenSelectModal
                          campaignAcceptToken={onChainCampaign?.tokenAddress}
                          selectedToken={selectedToken}
                          onSelect={(token) => setSelectedToken(token.id)}
                          disabled={isLoading}
                        />
                      </div>

                      <div className="space-y-2">
                        <label htmlFor="amount" className="text-sm font-medium">
                          Số lượng {selectedToken} muốn quyên góp
                        </label>
                        <div className="relative">
                          <Input
                            id="amount"
                            type="number"
                            step="0.01"
                            min="0"
                            value={amount}
                            onChange={(e) => setAmount(e.target.value)}
                            placeholder="0.00"
                            className="pr-12 text-lg"
                          />
                          <div className="absolute inset-y-0 right-3 flex items-center text-sm font-medium text-muted-foreground">
                            {selectedToken}
                          </div>
                        </div>
                        <p className="text-xs text-muted-foreground">
                          Tối thiểu {selectedToken === "ETH" ? "0.01" : "1"}{" "}
                          {selectedToken}
                        </p>
                      </div>
                    </div>

                    <Button
                      className="w-full h-12 text-lg font-medium"
                      onClick={handleDonate}
                      disabled={isLoading || !amount || Number(amount) <= 0}
                    >
                      {isLoading ? (
                        <>
                          <Loader2 className="w-4 h-4 animate-spin mr-2" />
                          Đang xử lý...
                        </>
                      ) : (
                        "Xác nhận quyên góp"
                      )}
                    </Button>

                    <p className="text-xs text-center text-muted-foreground">
                      Bằng cách quyên góp, bạn đồng ý với{" "}
                      <a href="#" className="underline hover:text-primary">
                        điều khoản dịch vụ
                      </a>{" "}
                      của chúng tôi
                    </p>
                  </div>
                </DialogContent>
              </Dialog>
            </>
          )}
          {campaign.status === "FINISHED" && (
            <Button size="lg" className="" variant="outline">
              <Clock /> Chiến dịch gây quỹ đã kết thúc
            </Button>
          )}
        </div>
        <div className="flex gap-4 items-center">
          <span className="size-10 rounded-full bg-slate-200 flex items-center justify-center">
            <ChartNoAxesCombined size={18} />
          </span>
          <span className="text-primary font-semibold">
            {donors?.length || 0} người đã quyên góp
          </span>
        </div>

        <div className="grid grid-cols-1 gap-4" id="donors">
          {isDonorsLoading ? (
            <div className="animate-pulse space-y-4">
              {[1, 2, 3].map((i) => (
                <div key={i} className="flex gap-4 items-center">
                  <div className="size-10 bg-gray-200 rounded-full" />
                  <div className="flex-1 space-y-2">
                    <div className="h-4 bg-gray-200 rounded w-1/4" />
                    <div className="h-4 bg-gray-200 rounded w-1/2" />
                  </div>
                </div>
              ))}
            </div>
          ) : (
            <AnimatePresence>
              {displayDonations?.map((donation, index) => (
                <motion.div
                  key={index}
                  initial={{ opacity: 0, x: -20 }}
                  animate={{ opacity: 1, x: 0 }}
                  exit={{ opacity: 0, x: 20 }}
                  transition={{ delay: index * 0.1 }}
                  className="flex gap-4 items-center hover-scale"
                >
                  <Avatar>
                    <AvatarImage src="/charity.png" alt="Charity" />
                    <AvatarFallback>
                      {donation.address.slice(2, 4).toUpperCase()}
                    </AvatarFallback>
                  </Avatar>
                  <div className="flex flex-col">
                    <TooltipProvider>
                      <Tooltip>
                        <TooltipTrigger>
                          <Link
                            to={`https://sepolia.etherscan.io/address/${donation.address}`}
                            target="_blank"
                            rel="noopener noreferrer"
                            className="flex items-center gap-1 hover:text-primary font-mono"
                          >
                            {donation.short}
                            <ExternalLink className="w-3 h-3" />
                          </Link>
                        </TooltipTrigger>
                        <TooltipContent>{donation.address}</TooltipContent>
                      </Tooltip>
                    </TooltipProvider>
                    <div className="flex items-center gap-2">
                      <p className="font-semibold text-xs">
                        {donation.totalAmount.formatted}{" "}
                        {donation.totalAmount.symbol}
                      </p>
                      <span className="text-xs text-muted-foreground">
                        · {donation.donationCount} lần quyên góp
                      </span>
                      <span className="text-xs text-muted-foreground">
                        · {donation.lastDonationFormatted}
                      </span>
                    </div>
                  </div>
                </motion.div>
              ))}
            </AnimatePresence>
          )}
        </div>

        <div className="flex gap-4">
          <Button
            variant="outline"
            className="flex-1"
            onClick={() => setShowAll(!showAll)}
            disabled={!donors?.length}
          >
            {showAll ? "Ẩn bớt" : "Xem tất cả"}
          </Button>
          <Button
            variant="outline"
            className="flex-1"
            onClick={() => setShowTopDonors(true)}
            disabled={!donors?.length}
          >
            Xem top
          </Button>
        </div>
      </motion.div>
      <ConfirmMintModal
        open={showConfirmMint}
        onOpenChange={setShowConfirmMint}
        onConfirm={handleConfirmMint}
        onDecline={handleDeclineMint}
      />
      <MintNFTModal
        open={mintModalOpen}
        onOpenChange={setMintModalOpen}
        metadata={nftMetadata}
        onSuccess={() => {
          queryClient.invalidateQueries(["userNFTs"]);
        }}
      />
      <TopDonorsModal
        open={showTopDonors}
        onOpenChange={setShowTopDonors}
        donors={donors}
      />
    </>
  );
};

export default FundBox;

```

### src/module/user/components/Topic.jsx
```jsx
import TopicCard from "@/components/Topic/TopicCard";
import React from "react";
import { motion } from "framer-motion";

const Topic = ({ posts }) => {
  const container = {
    hidden: { opacity: 0 },
    show: {
      opacity: 1,
      transition: { staggerChildren: 0.2 },
    },
  };

  const item = {
    hidden: { opacity: 0, y: 20 },
    show: {
      opacity: 1,
      y: 0,
      transition: {
        type: "spring",
        damping: 15,
        stiffness: 100,
      },
    },
  };

  return (
    <div className="container py-6 md:py-10 mx-auto px-4">
      <motion.h2
        initial={{ opacity: 0, y: 20 }}
        whileInView={{ opacity: 1, y: 0 }}
        viewport={{ once: true }}
        dangerouslySetInnerHTML={{ __html: "Bài viết mới nhất" }}
        className="text-xl md:text-2xl lg:text-3xl font-semibold text-center md:text-left mb-4 md:mb-6"
      />
      <motion.div
        variants={container}
        initial="hidden"
        whileInView="show"
        viewport={{ once: true }}
        className="grid gap-6 md:gap-8"
      >
        <motion.div variants={item}>
          <TopicCard layout="horizontal" post={posts?.data?.data[0]} />
        </motion.div>
        <motion.div
          variants={container}
          className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-4 md:gap-6 lg:gap-8"
        >
          {[1, 2, 3].map((index) => (
            <motion.div key={index} variants={item}>
              <TopicCard post={posts?.data?.data[index]} />
            </motion.div>
          ))}
        </motion.div>
      </motion.div>
    </div>
  );
};

export default Topic;

```

### src/module/user/components/Discover.jsx
```jsx
import Card from "@/components/Card/Card";
import { getCampaigns } from "@/services/campaignService";
import { useQuery } from "@tanstack/react-query";
import { motion } from "framer-motion";
import { HeartHandshake } from "lucide-react";

const Discover = ({ campaigns }) => {
  const container = {
    hidden: { opacity: 0 },
    show: {
      opacity: 1,
      transition: {
        staggerChildren: 0.1,
      },
    },
  };

  const item = {
    hidden: { opacity: 0, y: 20 },
    show: {
      opacity: 1,
      y: 0,
      transition: {
        type: "spring",
        damping: 15,
        stiffness: 100,
      },
    },
  };

  // Kiểm tra nếu không có dữ liệu
  if (!campaigns?.data?.length) {
    return (
      <section className="py-10">
        <motion.h2
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          className="font-semibold mb-6 md:mb-10 text-2xl md:text-3xl text-center"
        >
          Khám phá những người gây quỹ lấy cảm hứng từ những gì bạn quan tâm
        </motion.h2>

        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          className="flex flex-col items-center justify-center py-10 text-center"
        >
          <HeartHandshake className="w-16 h-16 text-muted-foreground mb-4" />
          <h3 className="text-xl font-semibold mb-2">Chưa có chiến dịch nào</h3>
          <p className="text-muted-foreground max-w-sm">
            Hãy quay lại sau khi có thêm chiến dịch mới được tạo.
          </p>
        </motion.div>
      </section>
    );
  }

  return (
    <section className="py-10">
      <motion.h2
        initial={{ opacity: 0, y: 20 }}
        whileInView={{ opacity: 1, y: 0 }}
        viewport={{ once: true }}
        className="font-semibold mb-6 md:mb-10 text-2xl md:text-3xl text-center md:text-left"
        dangerouslySetInnerHTML={{
          __html:
            "Khám phá những người gây quỹ lấy cảm hứng từ những gì bạn quan tâm",
        }}
      />

      <motion.div
        variants={container}
        // initial="hidden"
        whileInView="show"
        viewport={{ once: true }}
        className="grid grid-cols-1 md:grid-cols-2 gap-4 md:gap-8"
      >
        {campaigns?.data?.[0] && (
          <motion.div variants={item} className="h-full">
            <Card
              size="lg"
              titleMaxLength={50}
              className="col-span-1 md:col-span-1"
              campaign={campaigns.data[0]}
            />
          </motion.div>
        )}

        <motion.div
          variants={container}
          className="grid grid-cols-1 sm:grid-cols-2 gap-4 md:gap-8"
        >
          {campaigns?.data?.slice(1, 5).map((campaign) => (
            <motion.div key={campaign.id} variants={item}>
              <Card campaign={campaign} titleMaxLength={30} />
            </motion.div>
          ))}
        </motion.div>
      </motion.div>
    </section>
  );
};

export default Discover;

```

### src/module/user/components/Guide.jsx
```jsx
import { Button } from "@/components/ui/button";
import React from "react";
import { motion } from "framer-motion";
import {
  Sparkles,
  Shield,
  Users,
  TrendingUp,
  CheckCircle,
  ArrowRight,
} from "lucide-react";

const Guide = () => {
  const container = {
    hidden: { opacity: 0 },
    show: {
      opacity: 1,
      transition: { staggerChildren: 0.2 },
    },
  };

  const item = {
    hidden: { opacity: 0, x: -50, scale: 0.9 },
    show: {
      opacity: 1,
      x: 0,
      scale: 1,
      transition: {
        type: "spring",
        stiffness: 300,
        damping: 20,
      },
    },
  };

  const floatingIcon = {
    initial: { opacity: 0, y: 20 },
    animate: {
      opacity: [0.3, 0.8, 0.3],
      y: [0, -20, 0],
      transition: {
        duration: 4,
        repeat: Infinity,
        ease: "easeInOut",
      },
    },
  };

  const FloatingParticle = ({ delay = 0 }) => (
    <motion.div
      className="absolute w-2 h-2 bg-primary/30 rounded-full"
      initial={{ opacity: 0, y: 0 }}
      animate={{
        opacity: [0, 1, 0],
        y: [-50, -150],
        x: [0, Math.random() * 40 - 20],
      }}
      transition={{
        duration: 3,
        repeat: Infinity,
        delay: delay,
        ease: "linear",
      }}
    />
  );

  return (
    <div className="relative container mx-auto my-8 py-16 md:py-24 px-4 md:px-6 overflow-hidden">
      {/* Background Gradient Effect */}
      {/* <div className="absolute inset-0 bg-gradient-to-br from-primary/5 via-transparent to-primary/10 rounded-3xl" /> */}

      {/* Floating Background Icons */}
      <motion.div
        className="absolute top-10 left-10"
        variants={floatingIcon}
        initial="initial"
        animate="animate"
      >
        <Sparkles className="w-8 h-8 text-primary/20" />
      </motion.div>
      <motion.div
        className="absolute top-20 right-16"
        variants={floatingIcon}
        initial="initial"
        animate="animate"
        style={{ animationDelay: "1s" }}
      >
        <Shield className="w-6 h-6 text-primary/20" />
      </motion.div>
      <motion.div
        className="absolute bottom-20 left-20"
        variants={floatingIcon}
        initial="initial"
        animate="animate"
        style={{ animationDelay: "2s" }}
      >
        <Users className="w-7 h-7 text-primary/20" />
      </motion.div>
      <motion.div
        className="absolute bottom-32 right-10"
        variants={floatingIcon}
        initial="initial"
        animate="animate"
        style={{ animationDelay: "0.5s" }}
      >
        <TrendingUp className="w-6 h-6 text-primary/20" />
      </motion.div>

      {/* Floating Particles */}
      {[...Array(8)].map((_, i) => (
        <FloatingParticle key={i} delay={i * 0.5} />
      ))}

      {/* Enhanced Main Heading */}
      <motion.div
        initial={{ opacity: 0, y: 30 }}
        whileInView={{ opacity: 1, y: 0 }}
        viewport={{ once: true }}
        className="text-center mb-4"
      >
        <motion.div
          className="inline-flex items-center gap-2 px-4 py-2 rounded-full border border-primary/20 bg-primary/5 backdrop-blur-sm mb-6"
          whileHover={{ scale: 1.05 }}
        >
          <Shield className="w-4 h-4 text-primary" />
          <span className="text-sm font-medium text-primary">
            Quy trình blockchain an toàn
          </span>
        </motion.div>

        <motion.h2
          className="font-bold text-3xl md:text-5xl lg:text-6xl bg-gradient-to-r from-primary via-primary/80 to-primary bg-clip-text text-transparent leading-tight"
          whileHover={{ scale: 1.02 }}
          dangerouslySetInnerHTML={{
            __html:
              "Quyên góp với blockchain dễ dàng<br/> <span class='relative'>bảo mật và minh bạch<span class='absolute inset-0 bg-gradient-to-r from-primary/20 to-transparent blur-xl'></span></span>",
          }}
        />

        <motion.p
          className="text-lg md:text-xl text-muted-foreground mt-4 max-w-2xl mx-auto"
          initial={{ opacity: 0, y: 20 }}
          whileInView={{ opacity: 1, y: 0 }}
          viewport={{ once: true }}
          transition={{ delay: 0.2 }}
        >
          Trải nghiệm quyên góp thế hệ mới với công nghệ blockchain tiên tiến
        </motion.p>
      </motion.div>

      <div className="flex flex-col-reverse lg:flex-row gap-8 md:gap-12 mt-12 md:mt-20">
        {/* Enhanced Image Section */}
        <motion.div
          initial={{ opacity: 0, scale: 0.8, rotateY: -20 }}
          whileInView={{ opacity: 1, scale: 1, rotateY: 0 }}
          viewport={{ once: true }}
          transition={{ duration: 0.8, type: "spring" }}
          className="flex-1 relative"
        >
          <div className="relative bg-gradient-to-br from-primary via-primary/90 to-primary/80 rounded-2xl min-h-[350px] md:min-h-[650px] overflow-hidden shadow-2xl">
            {/* Animated Background Pattern */}
            <div className="absolute inset-0 opacity-10">
              <div className="absolute top-0 left-0 w-32 h-32 bg-white rounded-full -translate-x-16 -translate-y-16 animate-pulse" />
              <div
                className="absolute bottom-0 right-0 w-40 h-40 bg-white rounded-full translate-x-20 translate-y-20 animate-pulse"
                style={{ animationDelay: "1s" }}
              />
            </div>

            <motion.img
              // whileHover={{ y: -15, scale: 1.05 }}
              transition={{ type: "spring", stiffness: 300, damping: 20 }}
              className="absolute bottom-0 left-1/2 -translate-x-1/2 w-[280px] md:w-[380px] drop-shadow-2xl"
              src="/step-3.png"
              alt="Guide illustration"
            />

            {/* Floating Success Badge */}
            <motion.div
              className="absolute top-6 right-6 bg-white/10 backdrop-blur-sm rounded-full p-3"
              animate={{
                rotate: [0, 5, -5, 0],
                scale: [1, 1.1, 1],
              }}
              transition={{
                duration: 3,
                repeat: Infinity,
                ease: "easeInOut",
              }}
            >
              <CheckCircle className="w-6 h-6 text-white" />
            </motion.div>
          </div>
        </motion.div>

        {/* Enhanced Steps Section */}
        <motion.div
          variants={container}
          initial="hidden"
          whileInView="show"
          viewport={{ once: true }}
          className="flex-1 flex gap-8 md:gap-10 flex-col"
        >
          {[
            {
              title:
                "Sử dụng công cụ của chúng tôi để tạo chiến dịch quyên góp",
              description:
                "Giao diện đơn giản của chúng tôi sẽ hướng dẫn bạn thiết lập chiến dịch quyên góp, xác định mục tiêu và cập nhật bất kỳ lúc nào, tất cả đều với sự minh bạch của blockchain.",
              icon: <TrendingUp className="w-5 h-5" />,
            },
            {
              title: "Tiếp cận người quyên góp bằng cách chia sẻ",
              description:
                "Chia sẻ liên kết chiến dịch của bạn và tận dụng sức mạnh của blockchain để thu hút người quyên góp, đảm bảo mỗi khoản đóng góp đều được theo dõi và minh bạch.",
              icon: <Users className="w-5 h-5" />,
            },
            {
              title: "Nhận quyên góp một cách bảo mật",
              description:
                "Thêm thông tin ví của bạn hoặc mời người nhận quyên góp của bạn làm tương tự. Blockchain đảm bảo rằng mỗi khoản quyên góp được xử lý và ghi lại một cách bảo mật.",
              icon: <Shield className="w-5 h-5" />,
            },
          ].map((step, index) => (
            <motion.div
              key={index + 1}
              variants={item}
              className="group relative"
              whileHover={{ x: 10 }}
            >
              {/* Connecting Line */}
              {index < 2 && (
                <div className="absolute left-6 top-16 w-px h-8 bg-gradient-to-b from-primary to-primary/30" />
              )}

              <div className="flex gap-5 items-start">
                <motion.div
                  whileHover={{ scale: 1.15, rotate: 5 }}
                  whileTap={{ scale: 0.95 }}
                  className="relative"
                >
                  <Button
                    variant="outline"
                    className="rounded-full font-bold text-lg md:text-xl h-12 w-12 md:h-14 md:w-14 flex-shrink-0 border-2 border-primary/20 bg-gradient-to-br from-primary/10 to-primary/20 hover:from-primary/20 hover:to-primary/30 transition-all duration-300 shadow-lg group-hover:shadow-primary/25"
                  >
                    {index + 1}
                  </Button>

                  {/* Icon Badge */}
                  <motion.div
                    className="absolute -top-2 -right-2 bg-primary text-white rounded-full p-1.5 shadow-lg"
                    initial={{ scale: 0 }}
                    whileInView={{ scale: 1 }}
                    transition={{ delay: 0.5 + index * 0.1 }}
                  >
                    {step.icon}
                  </motion.div>
                </motion.div>

                <div className="flex-1 group-hover:translate-x-2 transition-transform duration-300">
                  <h3 className="font-bold mb-3 text-xl md:text-2xl lg:text-3xl bg-gradient-to-r from-foreground to-foreground/70 bg-clip-text text-transparent">
                    {step.title}
                  </h3>

                  <p className="text-muted-foreground text-base md:text-lg lg:text-xl leading-relaxed">
                    {step.description}
                  </p>

                  {/* Arrow indicator */}
                  <motion.div
                    className="inline-flex items-center gap-2 mt-3 text-primary font-medium opacity-0 group-hover:opacity-100 transition-opacity duration-300"
                    whileHover={{ x: 5 }}
                  >
                    <span className="text-sm">Tìm hiểu thêm</span>
                    <ArrowRight className="w-4 h-4" />
                  </motion.div>
                </div>
              </div>
            </motion.div>
          ))}
        </motion.div>
      </div>

      {/* Enhanced CTA Section */}
      <motion.div
        initial={{ opacity: 0, y: 30 }}
        whileInView={{ opacity: 1, y: 0 }}
        viewport={{ once: true }}
        transition={{ delay: 0.5 }}
        className="text-center mt-16 md:mt-20"
      >
        <motion.button
          className="group relative inline-flex items-center gap-3 px-8 py-4 bg-gradient-to-r from-primary to-primary/90 text-white font-bold text-lg rounded-full shadow-2xl hover:shadow-primary/50 transition-all duration-300"
          whileHover={{ scale: 1.05, y: -2 }}
          whileTap={{ scale: 0.98 }}
        >
          <Sparkles className="w-5 h-5 group-hover:animate-spin" />
          <span>Bắt đầu quyên góp ngay</span>
          <ArrowRight className="w-5 h-5 group-hover:translate-x-1 transition-transform" />

          {/* Glow effect */}
          <div className="absolute inset-0 rounded-full bg-gradient-to-r from-primary to-primary/90 blur-xl opacity-0 group-hover:opacity-50 transition-opacity duration-300 -z-10" />
        </motion.button>
      </motion.div>
    </div>
  );
};

export default Guide;

```

### src/module/user/components/ConfirmMintModal.jsx
```jsx
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";

const ConfirmMintModal = ({ open, onOpenChange, onConfirm, onDecline }) => {
  return (
    <Dialog open={open} onOpenChange={onOpenChange}>
      <DialogContent className="sm:max-w-[425px]">
        <DialogHeader>
          <DialogTitle className="text-2xl font-semibold text-center pb-2">
            Xác nhận mint NFT
          </DialogTitle>
          <p className="text-center text-muted-foreground">
            Bạn có muốn mint NFT để lưu lại dấu ấn quyên góp này không?
          </p>
        </DialogHeader>

        <div className="space-y-6 pt-4">
          <p className="text-sm text-center">
            NFT sẽ là bằng chứng cho sự đóng góp của bạn trong chiến dịch này
          </p>

          <div className="flex gap-4">
            <Button variant="outline" className="flex-1" onClick={onDecline}>
              Không, cảm ơn
            </Button>
            <Button className="flex-1" onClick={onConfirm}>
              Mint NFT
            </Button>
          </div>
        </div>
      </DialogContent>
    </Dialog>
  );
};

export default ConfirmMintModal;

```

### src/module/user/components/EditProfileForm.jsx
```jsx
import { Button } from "@/components/ui/button";
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import { useState } from "react";
import { Edit, Loader2 } from "lucide-react";

const EditProfileForm = ({ user, onSubmit, isLoading }) => {
  const [formData, setFormData] = useState({
    name: user?.name || "",
    bio: user?.bio || "",
    phoneNumber: user?.phoneNumber || "",
  });

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData((prev) => ({ ...prev, [name]: value }));
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    onSubmit(formData);
  };

  return (
    <Dialog>
      <DialogTrigger asChild>
        <Button variant="outline" size="sm">
          <Edit className="h-4 w-4 mr-2" />
          Chỉnh sửa
        </Button>
      </DialogTrigger>
      <DialogContent>
        <DialogHeader>
          <DialogTitle>Chỉnh sửa thông tin</DialogTitle>
        </DialogHeader>
        <form onSubmit={handleSubmit} className="space-y-4">
          <div className="space-y-2">
            <Label htmlFor="name">Tên</Label>
            <Input
              id="name"
              name="name"
              value={formData.name}
              onChange={handleChange}
              placeholder="Nhập tên của bạn"
            />
          </div>

          <div className="space-y-2">
            <Label htmlFor="bio">Tiểu sử</Label>
            <Textarea
              id="bio"
              name="bio"
              value={formData.bio}
              onChange={handleChange}
              placeholder="Giới thiệu về bản thân"
              rows={4}
            />
          </div>

          <div className="space-y-2">
            <Label htmlFor="phoneNumber">Số điện thoại</Label>
            <Input
              id="phoneNumber"
              name="phoneNumber"
              value={formData.phoneNumber}
              onChange={handleChange}
              placeholder="Nhập số điện thoại"
            />
          </div>

          <div className="flex justify-end gap-2">
            <Button type="submit" disabled={isLoading}>
              {isLoading ? (
                <>
                  <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                  Đang cập nhật...
                </>
              ) : (
                "Cập nhật"
              )}
            </Button>
          </div>
        </form>
      </DialogContent>
    </Dialog>
  );
};

export default EditProfileForm;

```

### src/module/user/components/MintNFTModal.jsx
```jsx
import { Button } from "@/components/ui/button";
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog";
import { useCharityHearts } from "@/hooks/useNFTContract";
import { Loader2 } from "lucide-react";
import { useState } from "react";
import { toast } from "sonner";
import CongratulationModal from "@/components/CongratulationModal";
import { resolveIPFSUrl } from "@/utils/ipfs";
import { NFT_RARITY } from "@/constants/nft";
import { Skeleton } from "@/components/ui/skeleton"; // Thêm import này

const MintNFTModal = ({ open, onOpenChange, metadata, onSuccess }) => {
  const [isLoading, setIsLoading] = useState(false);
  const [showCongrats, setShowCongrats] = useState(false);
  const [imageLoading, setImageLoading] = useState(true);
  const { mintNFT } = useCharityHearts();

  const handleMint = async () => {
    try {
      setIsLoading(true);
      await mintNFT(metadata);
      if (onSuccess) {
        onSuccess();
      }
      onOpenChange(false);
      setShowCongrats(true);
      toast.success("Mint NFT thành công!");
    } catch (error) {
      console.error("Mint NFT error:", error);
      toast.error("Mint NFT thất bại: " + error.message);
    } finally {
      setIsLoading(false);
    }
  };

  // Lấy thông tin rarity từ metadata
  const rarityAttribute = metadata?.attributes?.find(
    (attr) => attr.trait_type === "Rarity"
  );
  const rarityInfo = Object.values(NFT_RARITY).find(
    (r) => r.label === rarityAttribute?.value
  );

  return (
    <>
      <Dialog open={open} onOpenChange={onOpenChange}>
        <DialogContent className="sm:max-w-[425px]">
          <DialogHeader>
            <DialogTitle className="text-2xl font-semibold text-center pb-2">
              Mint NFT Xác Nhận Quyên Góp
            </DialogTitle>
            <p className="text-center text-muted-foreground">
              Bạn có muốn mint NFT để lưu lại dấu ấn quyên góp của lần này
              không?
            </p>
          </DialogHeader>

          <div className="space-y-6 pt-4">
            {/* Preview NFT */}
            {metadata && (
              <div className="space-y-4">
                <div className="relative">
                  {imageLoading && (
                    <Skeleton className="w-full aspect-square rounded-xl absolute inset-0" />
                  )}
                  <img
                    src={resolveIPFSUrl(metadata.image)}
                    alt={metadata.name}
                    className={`w-full aspect-square object-cover rounded-xl ${
                      imageLoading ? "opacity-0" : "opacity-100"
                    }`}
                    onLoad={() => setImageLoading(false)}
                  />
                  <div
                    className="absolute top-2 right-2 px-3 py-1 rounded-full text-sm font-medium"
                    style={{
                      backgroundColor: `${rarityInfo?.color}20`,
                      color: rarityInfo?.color,
                    }}
                  >
                    {rarityAttribute?.value}
                  </div>
                </div>
                <div className="space-y-2">
                  <h3 className="font-medium text-lg text-center">
                    {metadata.name}
                  </h3>
                  <p className="text-sm text-muted-foreground text-center">
                    {metadata.description}
                  </p>
                </div>
              </div>
            )}

            {/* Chi phí mint */}
            <div className="p-4 rounded-lg border bg-muted space-y-2">
              <p className="text-sm font-medium text-center">
                Chi phí mint NFT
              </p>
              <div className="flex justify-between text-sm">
                <span className="text-muted-foreground">
                  Phí gas (ước tính)
                </span>
                <span className="font-medium">~0.001 - 0.003 ETH</span>
              </div>
              <p className="text-xs text-muted-foreground text-center mt-2">
                *Chi phí có thể thay đổi tùy thuộc vào tình trạng mạng lưới
              </p>
            </div>

            {/* Buttons */}
            <div className="flex gap-4">
              <Button
                variant="outline"
                className="flex-1"
                onClick={() => onOpenChange(false)}
                disabled={isLoading}
              >
                Để sau
              </Button>
              <Button
                className="flex-1"
                onClick={handleMint}
                disabled={isLoading}
              >
                {isLoading ? (
                  <>
                    <Loader2 className="w-4 h-4 animate-spin mr-2" />
                    Đang xử lý...
                  </>
                ) : (
                  "Mint NFT"
                )}
              </Button>
            </div>

            <p className="text-xs text-center text-muted-foreground">
              Bằng cách mint NFT, bạn sẽ phải trả phí gas của mạng lưới
              Ethereum. Đảm bảo bạn có đủ ETH trong ví để thực hiện giao dịch.
            </p>
          </div>
        </DialogContent>
      </Dialog>

      <CongratulationModal
        open={showCongrats}
        onOpenChange={setShowCongrats}
        metadata={metadata}
      />
    </>
  );
};

export default MintNFTModal;

```

### src/module/user/components/Banner.jsx
```jsx
import React, { useEffect, useState } from "react";
import { Link } from "react-router-dom";
import { motion } from "framer-motion";
import { Sparkles, TrendingUp, Shield, Users } from "lucide-react";

import { Button } from "@/components/ui/button";

const Banner = () => {
  const [mousePosition, setMousePosition] = useState({ x: 0, y: 0 });

  // Track mouse movement for interactive effects
  useEffect(() => {
    const handleMouseMove = (e) => {
      setMousePosition({
        x: e.clientX / window.innerWidth,
        y: e.clientY / window.innerHeight,
      });
    };

    window.addEventListener("mousemove", handleMouseMove);
    return () => window.removeEventListener("mousemove", handleMouseMove);
  }, []);

  const fadeInUp = {
    initial: { opacity: 0, y: 30 },
    animate: { opacity: 1, y: 0 },
    transition: { duration: 0.6, ease: "easeOut" },
  };

  const staggerContainer = {
    animate: {
      transition: {
        staggerChildren: 0.1,
      },
    },
  };

  const floatingAnimation = {
    animate: {
      y: [-10, 10, -10],
      rotate: [-2, 2, -2],
      transition: {
        duration: 6,
        ease: "easeInOut",
        repeat: Infinity,
      },
    },
  };

  return (
    <div className="relative flex md:min-h-[85vh] py-10 flex-col justify-center overflow-hidden">
      {/* Animated Background Elements */}
      <motion.div
        className="absolute inset-0 opacity-20"
        style={{
          background: `radial-gradient(circle at ${mousePosition.x * 100}% ${
            mousePosition.y * 100
          }%, rgba(59, 130, 246, 0.1) 0%, transparent 50%)`,
        }}
      />

      {/* Floating Elements */}
      <motion.div
        className="absolute top-20 left-10 text-primary/30"
        variants={floatingAnimation}
        animate="animate"
      >
        <Sparkles size={40} />
      </motion.div>

      <motion.div
        className="absolute top-32 right-20 text-primary/30"
        variants={floatingAnimation}
        animate="animate"
        transition={{ delay: 1 }}
      >
        <TrendingUp size={35} />
      </motion.div>

      <motion.div
        className="absolute bottom-32 left-20 text-primary/30"
        variants={floatingAnimation}
        animate="animate"
        transition={{ delay: 2 }}
      >
        <Shield size={32} />
      </motion.div>

      <motion.div
        className="absolute bottom-20 right-10 text-primary/30"
        variants={floatingAnimation}
        animate="animate"
        transition={{ delay: 0.5 }}
      >
        <Users size={38} />
      </motion.div>

      {/* Main Content */}
      <div className="relative z-10 flex flex-1">
        <div className="flex-1"></div>
        <motion.div
          className="flex items-center flex-col gap-6"
          variants={staggerContainer}
          initial="initial"
          animate="animate"
        >
          {/* Badge */}
          <motion.div
            className="inline-flex items-center gap-2 px-4 py-2 bg-gradient-to-r from-blue-50 to-purple-50 border border-blue-200/50 rounded-full backdrop-blur-sm"
            variants={fadeInUp}
          >
            <Sparkles size={16} className="text-primary" />
            <span className="text-sm font-semibold bg-gradient-to-r from-primary to-primary/90 bg-clip-text text-transparent">
              #1 Nền tảng gây quỹ cộng đồng Blockchain
            </span>
            <Sparkles size={16} className="text-primary" />
          </motion.div>

          {/* Main Heading with Enhanced Effects */}
          <motion.h1
            className="md:text-8xl text-5xl font-sans text-center capitalize leading-[52px] font-bold tracking-tight md:leading-[100px] relative"
            initial={{ opacity: 0, scale: 0.8, y: 50 }}
            animate={{ opacity: 1, scale: 1, y: 0 }}
            transition={{
              duration: 1,
              ease: [0, 0.71, 0.2, 1.01],
              scale: {
                type: "spring",
                damping: 8,
                stiffness: 100,
                restDelta: 0.001,
              },
            }}
          >
            {/* Glow Effect */}
            <span className="absolute inset-0 bg-gradient-to-r from-primary via-primary to-primary/60 bg-clip-text text-transparent blur-lg opacity-30">
              <span>Gây quỹ</span>
              <br />
              <span>Minh bạch</span>
              <br />
              <span>với Hợp đồng</span>
              <br />
              <span>Thông minh</span>
            </span>

            {/* Main Text */}
            <span className="relative bg-gradient-to-r from-primary via-primary to-primary/80 bg-clip-text text-transparent">
              <span>Gây quỹ</span>
              <br />
              <span>Minh bạch</span>
              <br />
              <span>với Hợp đồng</span>
              <br />
              <span>Thông minh</span>
            </span>
          </motion.h1>

          {/* Enhanced CTA Button */}
          <motion.div
            initial={{ opacity: 0, y: 30 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ delay: 0.8, duration: 0.6 }}
            className="relative group"
          >
            {/* Button Glow Effect */}
            <div className="absolute -inset-1 bg-gradient-to-r from-primary via-primary to-pink-600 rounded-3xl blur opacity-30 group-hover:opacity-60 transition duration-1000 group-hover:duration-200"></div>

            <Link to={"/create/fundraiser/category"}>
              <Button
                size="xl"
                className="relative font-bold text-lg px-8 py-4 bg-gradient-to-r from-primary to-primary hover:from-blue-700 hover:to-purple-700 rounded-2xl shadow-2xl hover:shadow-blue-500/25 transform hover:scale-105 transition-all duration-300 group"
              >
                <span className="flex items-center gap-2">
                  <Sparkles
                    size={20}
                    className="group-hover:rotate-12 transition-transform duration-300"
                  />
                  Bắt đầu chiến dịch
                  <TrendingUp
                    size={20}
                    className="group-hover:translate-x-1 transition-transform duration-300"
                  />
                </span>
              </Button>
            </Link>
          </motion.div>

          {/* Stats or Features */}
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ delay: 1, duration: 0.6 }}
            className="flex gap-8 mt-4"
          >
            <div className="text-center">
              <div className="text-2xl font-bold bg-gradient-to-r from-primary to-primary/40 bg-clip-text text-transparent">
                1000+
              </div>
              <div className="text-sm text-muted-foreground">Chiến dịch</div>
            </div>
            <div className="text-center">
              <div className="text-2xl font-bold bg-gradient-to-r from-primary to-primary/60 bg-clip-text text-transparent">
                100%
              </div>
              <div className="text-sm text-muted-foreground">Minh bạch</div>
            </div>
            <div className="text-center">
              <div className="text-2xl font-bold bg-gradient-to-r from-primary to-primary/80 bg-clip-text text-transparent">
                24/7
              </div>
              <div className="text-sm text-muted-foreground">Hỗ trợ</div>
            </div>
          </motion.div>
        </motion.div>
        <div className="flex-1"></div>
      </div>

      {/* Enhanced Bottom Section */}
      <motion.div
        className="relative z-10 flex gap-10 pt-16 md:px-0 px-4"
        initial={{ opacity: 0, y: 30 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ delay: 1.2, duration: 0.8 }}
      >
        <div className="flex w-2/5 justify-end">
          <div className="relative">
            <h3 className="font-bold md:text-3xl text-lg bg-gradient-to-r from-gray-900 to-gray-600 bg-clip-text text-transparent leading-relaxed">
              Kết nối từ thiện toàn cầu <br /> với công nghệ Blockchain
            </h3>
            <div className="absolute -bottom-2 left-0 h-1 w-20 bg-gradient-to-r from-blue-500 to-purple-500 rounded-full"></div>
          </div>
        </div>

        <div className="flex w-3/5 justify-start">
          <div className="space-y-4">
            <p className="text-xl text-muted-foreground md:block hidden leading-relaxed">
              <span className="font-semibold text-gray-700">
                Bắt đầu chỉ trong vài phút
              </span>{" "}
              — Với công nghệ Blockchain minh bạch,
              <br />
              bạn có thể dễ dàng tạo chiến dịch, chia sẻ câu chuyện ý nghĩa{" "}
              <br />
              và kết nối mạnh mẽ với cộng đồng để lan tỏa lòng tốt đến mọi
              người.
            </p>
            <p className="text-lg text-muted-foreground md:hidden block">
              <span className="font-semibold text-gray-700">
                Bắt đầu chỉ trong vài phút
              </span>{" "}
              — Với công nghệ Blockchain minh bạch.
            </p>

            <div className="hidden md:flex gap-6 mt-6">
              <div className="flex items-center gap-2 text-sm text-muted-foreground">
                <Shield size={16} className="text-primary" />
                <span>Bảo mật tuyệt đối</span>
              </div>
              <div className="flex items-center gap-2 text-sm text-muted-foreground">
                <TrendingUp size={16} className="text-primary" />
                <span>Minh bạch 100%</span>
              </div>
              <div className="flex items-center gap-2 text-sm text-muted-foreground">
                <Users size={16} className="text-primary" />
                <span>Cộng đồng toàn cầu</span>
              </div>
            </div>
          </div>
        </div>
      </motion.div>

      {/* Floating Particles Effect */}
      <div className="absolute inset-0 overflow-hidden pointer-events-none">
        {[...Array(20)].map((_, i) => (
          <motion.div
            key={i}
            className="absolute w-1 h-1 bg-primary rounded-full opacity-20"
            initial={{
              x: Math.random() * window.innerWidth,
              y: Math.random() * window.innerHeight,
            }}
            animate={{
              y: [null, -100],
              opacity: [0.2, 0, 0.2],
            }}
            transition={{
              duration: Math.random() * 3 + 2,
              repeat: Infinity,
              delay: Math.random() * 2,
            }}
          />
        ))}
      </div>
    </div>
  );
};

export default Banner;

```

### src/module/user/components/Brand.jsx
```jsx
import { BicepsFlexed, Send, ShieldCheck } from "lucide-react";
import React from "react";

const Brand = () => {
  return (
    <div className="bg-primary/10 py-8 md:py-[88px]">
      <div className="container mx-auto px-4 md:px-0">
        <div className="mb-8 md:mb-12 text-lg md:text-[20px] font-semibold leading-6 text-center md:text-left">
          Nhà dễ dàng, mạnh mẽ và đáng tin cậy của bạn để được giúp đỡ
        </div>
        <div className="grid grid-cols-1 md:grid-cols-3 gap-6 md:gap-12">
          <div className="flex gap-4 items-center">
            <Send className="w-8 h-8 md:w-8 md:h-8" strokeWidth={0.75} />
            <div>
              <div className="font-semibold">Dễ dàng</div>
              <span className="text-sm md:text-base text-muted-foreground">
                Quyên góp nhanh chóng và dễ dàng
              </span>
            </div>
          </div>
          <div className="flex gap-4 items-center">
            <BicepsFlexed
              className="w-8 h-8 md:w-8 md:h-8"
              strokeWidth={0.75}
            />
            <div>
              <div className="font-semibold">Mạnh mẽ</div>
              <span className="text-sm md:text-base text-muted-foreground">
                Gửi sự giúp đỡ ngay cho mọi người
              </span>
            </div>
          </div>
          <div className="flex gap-4 items-center">
            <ShieldCheck className="w-8 h-8 md:w-8 md:h-8" strokeWidth={0.75} />
            <div>
              <div className="font-semibold">Đáng tin cậy</div>
              <span className="text-sm md:text-base text-muted-foreground">
                Hợp đồng thông minh
              </span>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default Brand;

```

### src/module/user/components/Forbidden.jsx
```jsx
import React from "react";
import { Button } from "@/components/ui/button";
import { ShieldAlert } from "lucide-react";
import { useNavigate } from "react-router-dom";

const Forbidden = () => {
  const navigate = useNavigate();

  return (
    <div className="min-h-[80vh] flex items-center justify-center px-4">
      <div className="text-center space-y-6">
        <div className="flex justify-center">
          <div className="relative">
            <ShieldAlert className="w-24 h-24 text-destructive animate-pulse" />
            <div className="absolute -right-2 -top-2 bg-destructive text-white text-xl font-bold rounded-full w-10 h-10 flex items-center justify-center">
              !
            </div>
          </div>
        </div>

        <div className="space-y-2">
          <h1 className="text-4xl font-bold text-destructive">403</h1>
          <h2 className="text-2xl font-semibold">Truy cập bị từ chối</h2>
          <p className="text-muted-foreground max-w-md">
            Rất tiếc, bạn không có quyền truy cập vào trang này. Vui lòng liên
            hệ quản trị viên nếu bạn cho rằng đây là một sự nhầm lẫn.
          </p>
        </div>

        <div className="space-x-4">
          <Button variant="outline" onClick={() => navigate(-1)}>
            Quay lại
          </Button>
          <Button onClick={() => navigate("/")}>Về trang chủ</Button>
        </div>
      </div>
    </div>
  );
};

export default Forbidden;

```

### src/module/user/components/CreateProgressDialog.jsx
```jsx
import { Button } from "@/components/ui/button";
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { CKEditor } from "@ckeditor/ckeditor5-react";
import ClassicEditor from "@ckeditor/ckeditor5-build-classic";
import DOMPurify from "dompurify";
import { useState } from "react";
import { useQueryClient, useMutation, useQuery } from "@tanstack/react-query";
import {
  createCampaignProgress,
  getCampaignById,
} from "@/services/campaignService";
import { toast } from "sonner";
import { ImageUpload } from "@/components/ImageUpload";
import { DocumentUpload } from "@/components/DocumentUpload";
import useUserStore from "@/hooks/useUserStore";

const CreateProgressDialog = ({ campaignId }) => {
  const { user } = useUserStore();
  const [open, setOpen] = useState(false);
  const [progress, setProgress] = useState({
    title: "",
    description: "",
    images: [],
    documents: [],
  });

  const queryClient = useQueryClient();

  const { data: campaign } = useQuery({
    queryKey: ["campaign", campaignId],
    queryFn: () => getCampaignById(campaignId),
  });

  const canUpdateProgress = user?.id === campaign?.userId;

  const { mutate: createProgress, isPending } = useMutation({
    mutationFn: (data) => createCampaignProgress(campaignId, data),
    onSuccess: () => {
      queryClient.invalidateQueries(["campaign-progress", campaignId]);
      setOpen(false);
      toast.success("Đã cập nhật tiến trình chiến dịch");
      setProgress({
        title: "",
        description: "",
        images: [],
        documents: [],
      });
    },
    onError: (error) => {
      toast.error("Không thể cập nhật: " + error.message);
    },
  });

  const handleSubmit = (e) => {
    e.preventDefault();
    if (!progress.title || !progress.description) {
      toast.error("Vui lòng điền đầy đủ thông tin");
      return;
    }
    createProgress(progress);
  };

  if (!canUpdateProgress) return null;

  return (
    <Dialog open={open} onOpenChange={setOpen}>
      <DialogTrigger asChild>
        <Button>Cập nhật tiến trình</Button>
      </DialogTrigger>
      <DialogContent className="sm:max-w-[600px]">
        <DialogHeader>
          <DialogTitle>Cập nhật tiến trình chiến dịch</DialogTitle>
        </DialogHeader>
        <form onSubmit={handleSubmit} className="space-y-6">
          <div className="space-y-2">
            <Label>Tiêu đề cập nhật</Label>
            <Input
              value={progress.title}
              onChange={(e) =>
                setProgress({ ...progress, title: e.target.value })
              }
              placeholder="VD: Đã chuyển đến bệnh viện"
            />
          </div>

          <div className="space-y-2">
            <Label>Nội dung chi tiết</Label>
            <Tabs defaultValue="edit" className="w-full">
              <TabsList className="grid w-full grid-cols-2">
                <TabsTrigger value="edit">Chỉnh sửa</TabsTrigger>
                <TabsTrigger value="preview">Xem trước</TabsTrigger>
              </TabsList>

              <TabsContent value="edit">
                <CKEditor
                  editor={ClassicEditor}
                  data={progress.description}
                  onChange={(event, editor) => {
                    const data = editor.getData();
                    setProgress({ ...progress, description: data });
                  }}
                  config={{
                    toolbar: {
                      items: [
                        "heading",
                        "|",
                        "bold",
                        "italic",
                        "link",
                        "bulletedList",
                        "numberedList",
                        "|",
                        "outdent",
                        "indent",
                        "|",
                        "blockQuote",
                        "insertTable",
                        "undo",
                        "redo",
                      ],
                    },
                  }}
                />
              </TabsContent>

              <TabsContent value="preview" className="border rounded-lg p-4">
                {progress.description ? (
                  <div
                    className="prose max-w-none"
                    dangerouslySetInnerHTML={{
                      __html: DOMPurify.sanitize(progress.description),
                    }}
                  />
                ) : (
                  <p className="text-muted-foreground italic">
                    Chưa có nội dung...
                  </p>
                )}
              </TabsContent>
            </Tabs>
          </div>

          <div className="space-y-2">
            <Label>Hình ảnh</Label>
            <ImageUpload
              value={progress.images}
              onChange={(urls) => setProgress({ ...progress, images: urls })}
              multiple
            />
          </div>

          <div className="space-y-2">
            <Label>Tài liệu đính kèm (tùy chọn)</Label>
            <DocumentUpload
              value={progress.documents}
              onChange={(urls) => setProgress({ ...progress, documents: urls })}
              multiple
            />
          </div>

          <Button type="submit" disabled={isPending}>
            {isPending ? "Đang cập nhật..." : "Cập nhật"}
          </Button>
        </form>
      </DialogContent>
    </Dialog>
  );
};

export default CreateProgressDialog;

```

### src/module/user/components/TopicTab.jsx
```jsx
import React from "react";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import Discover from "./Discover";

const TopicTab = () => {
  return (
    <Tabs defaultValue="trending" className="mt-8">
      <div className="w-[500px]">
        <TabsList className="grid grid-cols-3 ">
          <TabsTrigger value="trending">{"Xu hướng"}</TabsTrigger>
          <TabsTrigger value="nearYou">{"Tổ chức phi lợi nhuận"}</TabsTrigger>
          <TabsTrigger value="nonprofits">{"Gần bạn"}</TabsTrigger>
        </TabsList>
      </div>
      <TabsContent value="trending">
        <Discover />
      </TabsContent>
      <TabsContent value="nearYou">
        <Discover />
      </TabsContent>
      <TabsContent value="nonprofits">
        <Discover />
      </TabsContent>
    </Tabs>
  );
};

export default TopicTab;

```

### src/module/user/components/Header.jsx
```jsx
import { Button } from "@/components/ui/button";
import {
  HeartHandshake,
  LogIn,
  Menu,
  MenuIcon,
  Search,
  Wallet,
} from "lucide-react";
import { useEffect, useState } from "react";

import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import {
  NavigationMenu,
  NavigationMenuContent,
  NavigationMenuItem,
  NavigationMenuLink,
  NavigationMenuList,
  NavigationMenuTrigger,
} from "@/components/ui/navigation-menu";
import { Sheet, SheetContent, SheetTrigger } from "@/components/ui/sheet";
import useUserStore from "@/hooks/useUserStore";
import { LogOut, Settings, User } from "lucide-react";
import { Link } from "react-router-dom";
import MetaMaskAccount from "./MetaMaskAccount";
import NotificationList from "@/components/NotificationList";
import { useWallet } from "@/hooks/useWallet";

const Header = () => {
  const [isScrolled, setIsScrolled] = useState(false);
  const { address, isConnected, connect, disconnect } = useWallet();

  useEffect(() => {
    const handleScroll = () => {
      setIsScrolled(window.scrollY > 10);
    };

    window.addEventListener("scroll", handleScroll);
    return () => window.removeEventListener("scroll", handleScroll);
  }, []);

  const handleNaivigation = (path) => {
    window.scrollTo({
      top: 0,
      behavior: "smooth",
    });
    setTimeout(() => {
      window.location.href = path;
    }, 500);
  };
  const { user } = useUserStore();

  const MobileNav = () => (
    <Sheet>
      <SheetTrigger asChild>
        <Button variant="ghost" size="icon" className="md:hidden">
          <Menu className="h-6 w-6" />
        </Button>
      </SheetTrigger>
      <SheetContent side="left" className="w-72 flex flex-col justify-between">
        <div className="flex flex-col gap-4 mt-4">
          <div className="flex flex-col gap-2">
            <div className="flex items-center gap-2">
              {/* <MetaMaskAccount /> */}
            </div>
            <Button
              className="w-full justify-start font-semibold"
              variant={""}
              onClick={() => handleNaivigation("/create/fundraiser/category")}
            >
              <span>Tạo chiến dịch</span>
            </Button>
          </div>

          <div className="border-t pt-4">
            <Link to="/search" className="flex items-center gap-2">
              <Search className="h-5 w-5" />
              <span>Tìm kiếm</span>
            </Link>
          </div>

          <div className="space-y-4">
            <div>
              <h3 className="font-semibold mb-2">Quyên góp</h3>
              <div className="grid gap-2 pl-2">
                <Link to="/discover">Danh mục</Link>
                <Link to="/category">Hỗ trợ khẩn cấp</Link>
                <Link to="/category">Quỹ tác động xã hội</Link>
                <Link to="/category">Không gian ủng hộ</Link>
              </div>
            </div>
            <div>
              <h3 className="font-semibold mb-2">Gây quỹ</h3>
              <div className="grid gap-2 pl-2">
                <Link to="/category">Cách bắt đầu</Link>
                <Link to="/category">Danh mục gây quỹ</Link>
                <Link to="/category">Gây quỹ theo nhóm</Link>
                <Link to="/category">Blog về gây quỹ</Link>
              </div>
            </div>
          </div>
        </div>
        <div>
          {!user && (
            <Button
              variant="outline"
              className="flex gap-1 w-full justify-start"
              onClick={() => handleNaivigation("/sign-in")}
            >
              <LogIn />
              <span>Đăng nhập</span>
            </Button>
          )}
        </div>
      </SheetContent>
    </Sheet>
  );

  return (
    <header
      className={`z-50 h-20 py-4 items-center fixed top-0 left-0 right-0 transition-all duration-300 
        ${
          isScrolled
            ? "bg-white/80 backdrop-blur-lg shadow-md"
            : "bg-transparent"
        }`}
    >
      <div className="flex items-center container mx-auto px-4">
        <div className="flex-1 flex gap-2 items-center">
          <MobileNav />
          <div className="hidden md:flex gap-2">
            <Button
              variant="nav"
              className="flex gap-1"
              onClick={() => handleNaivigation("/search")}
            >
              <Search />
              <span>Tìm kiếm</span>
            </Button>
            <NavigationMenu>
              <NavigationMenuList>
                <NavigationMenuItem>
                  <NavigationMenuTrigger className="bg-transparent rounded-full">
                    <span>Quyên góp</span>
                  </NavigationMenuTrigger>
                  <NavigationMenuContent className="w-fit">
                    <div className="p-3 md:w-[600px] w-fit flex flex-col">
                      <div className="flex gap-2 items-center font-semibold">
                        <img
                          className="size-10"
                          src="/images/heart.png"
                          alt="heart"
                        />
                        <h2 className="text-nowrap text-lg">
                          Khám phá các chiến dịch gây quỹ để ủng hộ
                        </h2>
                      </div>
                      <div className="grid grid-cols-2 gap-4 mt-4">
                        <NavLink
                          href={"/discover"}
                          title={"Danh mục"}
                          sub={"Duyệt các chiến dịch theo danh mục"}
                        />
                        <NavLink
                          href={"/nfts"}
                          title={"NFTs"}
                          sub={"Bảng xếp hạng NFT"}
                        />
                      </div>
                    </div>
                  </NavigationMenuContent>
                </NavigationMenuItem>
                <NavigationMenuItem>
                  <NavigationMenuTrigger className="bg-transparent rounded-full">
                    <span>{"Gây quỹ"}</span>
                  </NavigationMenuTrigger>
                  <NavigationMenuContent className="w-fit">
                    <div className="p-3 md:w-[600px] w-fit flex flex-col">
                      <div className="flex gap-2 items-center font-semibold">
                        <img
                          className="size-10"
                          src="/images/heart.png"
                          alt="heart"
                        />
                        <h2 className="text-nowrap text-lg">
                          {"Bắt đầu gây quỹ, mẹo và tài nguyên"}
                        </h2>
                      </div>
                      <div className="grid grid-cols-2 gap-4 mt-4">
                        <NavLink
                          href={"/category"}
                          title={"Cách bắt đầu một chiến dịch Chain4Good"}
                          sub={
                            "Hướng dẫn từng bước, ví dụ minh họa và hơn thế nữa"
                          }
                        />
                        <NavLink
                          href={"/category"}
                          title={"Danh mục gây quỹ"}
                          sub={"Tìm danh mục phù hợp với bạn"}
                        />
                        <NavLink
                          href={"/category"}
                          title={"Gây quỹ theo nhóm"}
                          sub={"Gây quỹ cùng với một nhóm"}
                        />
                      </div>
                    </div>
                  </NavigationMenuContent>
                </NavigationMenuItem>
              </NavigationMenuList>
            </NavigationMenu>
          </div>
        </div>

        <div>
          <Link to="/">
            <img
              src={"/logo.png"}
              alt="logo"
              className="object-center overflow-hidden w-[100px] md:w-[120px]"
            />
          </Link>
        </div>

        <div className="flex-1 hidden md:flex items-center justify-end gap-3">
          <Button
            className="font-medium text-sm bg-gradient-to-r from-primary/90 to-primary hover:from-primary hover:to-primary/90 text-white shadow-sm transition-all duration-300"
            size="sm"
            onClick={() => handleNaivigation("/create/fundraiser/category")}
          >
            Bắt đầu chiến dịch
          </Button>

          <div className="flex items-center gap-2 bg-white/50 backdrop-blur-sm px-3 py-1.5 rounded-full shadow-sm border border-gray-100">
            {isConnected ? (
              <Button
                variant="ghost"
                size="sm"
                onClick={disconnect}
                className="text-xs font-medium hover:bg-gray-100"
              >
                <Wallet className="w-3.5 h-3.5 mr-1.5 text-primary" />
                {address?.slice(0, 6)}...{address?.slice(-4)}
              </Button>
            ) : (
              <Button
                variant="ghost"
                size="sm"
                onClick={connect}
                className="text-xs font-medium hover:bg-gray-100"
              >
                <Wallet className="w-3.5 h-3.5 mr-1.5 text-primary" />
                Kết nối ví
              </Button>
            )}

            {!user && (
              <Button
                variant="ghost"
                size="sm"
                className="text-xs font-medium hover:bg-gray-100"
                onClick={() => handleNaivigation("/sign-in")}
              >
                <LogIn className="w-3.5 h-3.5 mr-1.5" />
                Đăng nhập
              </Button>
            )}

            <NotificationList />

            {user && (
              <DropdownMenu>
                <DropdownMenuTrigger className="outline-none">
                  <div className="flex items-center gap-2 hover:bg-gray-100 py-1 px-2 rounded-full transition-colors">
                    <Avatar className="h-7 w-7">
                      <AvatarImage
                        src={user.image || "https://github.com/shadcn.png"}
                        alt="@shadcn"
                      />
                      <AvatarFallback>CG</AvatarFallback>
                    </Avatar>
                    <MenuIcon size={16} className="text-gray-600" />
                  </div>
                </DropdownMenuTrigger>
                <DropdownMenuContent align="end" className="w-56">
                  <DropdownMenuLabel>Tài khoản của tôi</DropdownMenuLabel>
                  <DropdownMenuSeparator />
                  <DropdownMenuItem
                    className="cursor-pointer"
                    onClick={() => handleNaivigation("/profile")}
                  >
                    <User className="mr-2 h-4 w-4" />
                    <span>Hồ sơ</span>
                  </DropdownMenuItem>
                  <DropdownMenuItem
                    className="cursor-pointer"
                    onClick={() => handleNaivigation("/my-campaigns")}
                  >
                    <HeartHandshake className="mr-2 h-4 w-4" />
                    <span>Chiến dịch của tôi</span>
                  </DropdownMenuItem>
                  <DropdownMenuItem
                    className="cursor-pointer"
                    onClick={() => handleNaivigation("/settings")}
                  >
                    <Settings className="mr-2 h-4 w-4" />
                    <span>Cài đặt</span>
                  </DropdownMenuItem>
                  <DropdownMenuSeparator />
                  <DropdownMenuItem
                    className="cursor-pointer text-red-600"
                    onClick={() => {
                      const userStore = useUserStore.getState();
                      userStore.logout();
                      handleNaivigation("/logout");
                    }}
                  >
                    <LogOut className="mr-2 h-4 w-4" />
                    <span>Đăng xuất</span>
                  </DropdownMenuItem>
                </DropdownMenuContent>
              </DropdownMenu>
            )}
          </div>
        </div>
      </div>
    </header>
  );
};

const NavLink = ({ href, title, sub }) => {
  return (
    <NavigationMenuLink
      href={href}
      className="cursor-pointer hover:bg-primary/10 rounded-md p-2 flex flex-col"
    >
      <h3 className="font-semibold text-sm md:text-base">{title}</h3>
      <p className="text-muted-foreground text-xs hidden md:block">{sub}</p>
    </NavigationMenuLink>
  );
};

export default Header;

```

### src/module/user/components/ShareModal.jsx
```jsx
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog";

const ShareModal = ({ isOpen, onClose, onOpen }) => {
  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      <DialogContent>
        <DialogHeader>
          <DialogTitle>Are you absolutely sure?</DialogTitle>
          <DialogDescription>
            This action cannot be undone. This will permanently delete your
            account and remove your data from our servers.
          </DialogDescription>
        </DialogHeader>
      </DialogContent>
    </Dialog>
  );
};

export default ShareModal;

```

### src/module/user/components/TopDonorsModal.jsx
```jsx
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog";
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import { ExternalLink, Trophy, Medal, Award } from "lucide-react";
import { Link } from "react-router-dom";
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from "@/components/ui/tooltip";
import { motion } from "framer-motion";

const TopDonorsModal = ({ open, onOpenChange, donors = [] }) => {
  const getRankIcon = (index) => {
    switch (index) {
      case 0:
        return <Trophy className="h-5 w-5 text-yellow-500" />;
      case 1:
        return <Medal className="h-5 w-5 text-gray-400" />;
      case 2:
        return <Award className="h-5 w-5 text-amber-600" />;
      default:
        return null;
    }
  };

  const sortedDonors = [...donors]
    .sort((a, b) => b.totalAmount.raw - a.totalAmount.raw)
    .slice(0, 5);

  return (
    <Dialog open={open} onOpenChange={onOpenChange}>
      <DialogContent className="sm:max-w-[425px]">
        <DialogHeader>
          <DialogTitle className="text-2xl font-semibold text-center pb-2">
            Top 10 Nhà Hảo Tâm
          </DialogTitle>
        </DialogHeader>
        <div className="space-y-4 pt-4">
          {sortedDonors.map((donor, index) => (
            <motion.div
              initial={{ opacity: 0, y: 10 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ delay: index * 0.05 }}
              key={donor.address}
              className="flex items-center gap-4 p-3 rounded-lg hover:bg-accent/50 transition-all"
            >
              <div className="flex items-center justify-center w-8">
                {getRankIcon(index) || (
                  <span className="text-lg font-semibold text-muted-foreground">
                    #{index + 1}
                  </span>
                )}
              </div>
              {/* <Avatar>
                <AvatarImage src="/charity.png" alt="Charity" />
                <AvatarFallback>
                  {donor.address.slice(2, 4).toUpperCase()}
                </AvatarFallback>
              </Avatar> */}
              <div className="flex-1">
                <TooltipProvider>
                  <Tooltip>
                    <TooltipTrigger>
                      <Link
                        to={`https://sepolia.etherscan.io/address/${donor.address}`}
                        target="_blank"
                        rel="noopener noreferrer"
                        className="flex items-center gap-1 hover:text-primary font-mono "
                      >
                        {donor.short}
                        <ExternalLink className="w-3 h-3" />
                      </Link>
                    </TooltipTrigger>
                    <TooltipContent>{donor.address}</TooltipContent>
                  </Tooltip>
                </TooltipProvider>
                <div className="flex items-center gap-2">
                  <p className="font-semibold text-sm">
                    {donor.totalAmount.formatted} {donor.totalAmount.symbol}
                  </p>
                  <span className="text-xs text-muted-foreground">
                    · {donor.donationCount} lần quyên góp
                  </span>
                </div>
              </div>
            </motion.div>
          ))}
        </div>
      </DialogContent>
    </Dialog>
  );
};

export default TopDonorsModal;

```

### src/module/user/components/Profile/NFTGallery.jsx
```jsx
import { Badge } from "@/components/ui/badge";
import { Card, CardContent } from "@/components/ui/card";
import { removeTrailingDot } from "@/lib/utils";
import { memo } from "react";

const NFTGallery = memo(({ nfts }) => {
  const getRarityVariant = (rarity) => {
    switch (rarity?.toLowerCase()) {
      case "phổ biến":
        return "secondary";
      case "hiếm":
        return "blue";
      case "cực hiếm":
        return "destructive";
      case "huyền thoại":
        return "gold";
      default:
        return "outline";
    }
  };

  if (nfts?.length === 0) {
    return (
      <div className="text-center py-10">
        <div className="flex flex-col items-center gap-2">
          <div className="rounded-full bg-muted p-3">
            <img
              src="/empty-nft.png"
              alt="No NFTs"
              className="w-12 h-12 opacity-50"
              onError={(e) => {
                e.target.src =
                  "data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='24' height='24' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'%3E%3Cpath d='M21.44 11.05l-9.19 9.19a6 6 0 0 1-8.49-8.49l9.19-9.19a4 4 0 0 1 5.66 5.66l-9.2 9.19a2 2 0 0 1-2.83-2.83l8.49-8.48'/%3E%3C/svg%3E";
              }}
            />
          </div>
          <h3 className="font-semibold text-lg">Chưa có NFT nào</h3>
          <p className="text-sm text-muted-foreground max-w-[300px]">
            Hãy quyên góp cho các chiến dịch để nhận NFT đặc biệt như một lời
            cảm ơn từ chúng tôi.
          </p>
        </div>
      </div>
    );
  }

  return (
    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
      {nfts.map((nft, index) => (
        <Card key={`${nft.tokenId}-${index}`}>
          <CardContent className="p-4">
            {nft.metadata?.image && (
              <img
                src={removeTrailingDot(nft.metadata.image)}
                alt={nft.metadata.name || `NFT ${index}`}
                className="aspect-square object-cover rounded-lg"
                onError={(e) => {
                  e.target.src =
                    "https://ipfs.io/ipfs/bafybeibavb3eis6ny7g4ts5pvzybpt3jqcdr2v3leyoq63tsrydnd67lqi/20250618_2009_Kindness%20Cartoon%20NFT_simple_compose_01jy1jeem3f8kt7705x6yfdke0.png";
                  console.error("Error loading NFT image");
                }}
              />
            )}
            <h3 className="mt-2 font-semibold">{nft.metadata?.name}</h3>
            <p className="text-sm text-muted-foreground">
              {nft.metadata?.description}
            </p>
            <p className="mt-2 text-xs text-muted-foreground break-all">
              Token ID: {nft.tokenId}
            </p>
            <div className="flex flex-wrap gap-2 mt-2">
              {nft.metadata?.attributes?.map((attr, idx) => (
                <Badge
                  key={idx}
                  variant={
                    attr.trait_type === "Rarity"
                      ? getRarityVariant(attr.value)
                      : "outline"
                  }
                >
                  {attr.trait_type === "Rarity" ? (
                    <span className="flex items-center gap-1">
                      <span>⭐</span> {attr.value}
                    </span>
                  ) : (
                    `${attr.trait_type}: ${attr.value}`
                  )}
                </Badge>
              ))}
            </div>
          </CardContent>
        </Card>
      ))}
    </div>
  );
});

NFTGallery.displayName = "NFTGallery";

export default NFTGallery;

```

### src/module/user/components/Profile/ProfileHeader.jsx
```jsx
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Camera, Loader2 } from "lucide-react";
import { memo } from "react";

const ProfileHeader = memo(({ user, loading, onCoverUpload }) => {
  return (
    <div
      className="relative h-[200px] md:h-[300px] group cursor-pointer"
      style={
        user?.cover
          ? {
              backgroundImage: `url(${user.cover})`,
              backgroundSize: "cover",
              backgroundPosition: "center",
            }
          : {
              background:
                "linear-gradient(to right, var(--primary-light), var(--primary-dark))",
            }
      }
    >
      <div className="absolute inset-0 bg-black/30 opacity-0 group-hover:opacity-100 transition-opacity" />
      <div className="absolute inset-0 flex items-center justify-center">
        <p className="text-white text-sm opacity-0 group-hover:opacity-100 transition-opacity">
          Bấm để thay đổi ảnh bìa
        </p>
      </div>

      <Input
        type="file"
        id="cover-upload"
        className="hidden"
        accept="image/png,image/jpeg,image/gif"
        onChange={onCoverUpload}
        disabled={loading.cover}
      />

      <Label htmlFor="cover-upload" className="absolute inset-0 cursor-pointer">
        {loading.cover && (
          <div className="absolute inset-0 flex items-center justify-center bg-black/50">
            <Loader2 className="h-8 w-8 animate-spin text-white" />
          </div>
        )}
      </Label>

      <div className="absolute bottom-4 right-4 opacity-0 group-hover:opacity-100 transition-opacity">
        <Camera className="h-6 w-6 text-white" />
      </div>
    </div>
  );
});

ProfileHeader.displayName = "ProfileHeader";

export default ProfileHeader;

```

### src/module/user/components/Profile/ProfileInfo.jsx
```jsx
import { Badge } from "@/components/ui/badge";
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { motion } from "framer-motion";
import {
  Check,
  CalendarDays,
  Mail,
  MapPin,
  Phone,
  Camera,
  Loader2,
} from "lucide-react";
import { memo } from "react";
import { formatDate } from "@/lib/utils";
import EditProfileForm from "../EditProfileForm";

const ProfileInfo = memo(
  ({
    user,
    onUpdateProfile,
    isUpdatingProfile,
    loading,
    onAvatarUpload,
    showAvatar = true,
  }) => {
    const renderField = (icon, label, value) => {
      if (!value) return null;
      return (
        <motion.div
          initial={{ opacity: 0, y: 10 }}
          animate={{ opacity: 1, y: 0 }}
          className="flex items-center gap-3 p-3 rounded-lg hover:bg-accent/50 transition-colors"
        >
          <div className="p-2 rounded-full bg-muted">{icon}</div>
          <div>
            <p className="text-xs text-muted-foreground">{label}</p>
            <p className="font-medium">{value}</p>
          </div>
        </motion.div>
      );
    };

    return (
      <motion.div
        initial={{ opacity: 0 }}
        animate={{ opacity: 1 }}
        className="space-y-8"
      >
        <div className="flex flex-col md:flex-row md:items-start md:justify-between gap-6">
          <motion.div
            initial={{ opacity: 0, x: -20 }}
            animate={{ opacity: 1, x: 0 }}
            className="flex items-start gap-6"
          >
            {showAvatar && (
              <div className="relative">
                <Input
                  type="file"
                  id="avatar-upload"
                  className="hidden"
                  accept="image/*"
                  onChange={onAvatarUpload}
                  disabled={loading?.avatar}
                />
                <Label htmlFor="avatar-upload" className="cursor-pointer">
                  <Avatar className="h-24 w-24 md:h-32 md:w-32 border-4 border-background ring-2 ring-primary/10 group">
                    <AvatarImage src={user?.image} />
                    <AvatarFallback className="text-3xl md:text-4xl bg-gradient-to-br from-primary/20 to-primary/10">
                      {user?.name?.charAt(0)}
                    </AvatarFallback>
                    <motion.div
                      whileHover={{ opacity: 1 }}
                      className="absolute inset-0 bg-black/60 rounded-full opacity-0 transition-opacity flex items-center justify-center"
                    >
                      {loading?.avatar ? (
                        <Loader2 className="h-8 w-8 text-white animate-spin" />
                      ) : (
                        <Camera className="h-8 w-8 text-white" />
                      )}
                    </motion.div>
                  </Avatar>
                </Label>
              </div>
            )}
            <div className="space-y-4">
              <div className="space-y-2">
                <h2 className="text-2xl md:text-3xl font-bold tracking-tight">
                  {user?.name}
                </h2>
                <div className="flex flex-wrap gap-2">
                  <Badge variant="outline" className="px-3 py-1">
                    {user?.roleId === 2 ? "User" : "Admin"}
                  </Badge>
                  {user?.isVerified && (
                    <Badge variant="secondary" className="gap-1.5 px-3 py-1">
                      <Check className="h-3.5 w-3.5" />
                      Email đã xác minh
                    </Badge>
                  )}
                </div>
              </div>

              <div className="space-y-3">
                <h3 className="text-sm font-medium text-muted-foreground">
                  Huy hiệu đạt được
                </h3>
                <div className="flex flex-wrap gap-3">
                  {user?.UserBadge?.map((userBadge) => {
                    // Determine badge variant based on badge type or name
                    const getBadgeVariant = (badge) => {
                      const name = badge.name.toLowerCase();
                      if (name.includes("premium")) return "premium";
                      if (name.includes("achievement")) return "achievement";
                      if (name.includes("special")) return "special";
                      if (name.includes("diamond")) return "diamond";
                      if (name.includes("royal")) return "royal";
                      return "special"; // default to special variant
                    };

                    return (
                      <motion.div
                        initial={{ opacity: 0, scale: 0.8 }}
                        animate={{ opacity: 1, scale: 1 }}
                        transition={{ duration: 0.3, delay: 0.1 }}
                        whileHover={{ scale: 1.05 }}
                        className="cursor-pointer"
                      >
                        <Badge
                          key={userBadge.id}
                          variant={getBadgeVariant(userBadge.badge)}
                          size="badge"
                          className="group hover:shadow-2xl transition-all duration-300 ease-in-out border-2 border-white/20 backdrop-blur-sm"
                        >
                          <img
                            src={userBadge.badge.iconUrl}
                            alt={userBadge.badge.name}
                            className="h-6 w-6 mr-3 group-hover:scale-110 transition-transform duration-200 drop-shadow-sm"
                          />
                          <div className="flex flex-col items-start">
                            <span className="font-semibold text-sm leading-tight">
                              {userBadge.badge.name}
                            </span>
                            <span
                              className="text-xs opacity-80 leading-tight"
                              title={`Được trao ngày ${new Date(
                                userBadge.awardedAt
                              ).toLocaleDateString("vi-VN")}`}
                            >
                              {new Date(userBadge.awardedAt).toLocaleDateString(
                                "vi-VN"
                              )}
                            </span>
                          </div>
                        </Badge>
                      </motion.div>
                    );
                  })}
                </div>
              </div>
            </div>
          </motion.div>

          <EditProfileForm
            user={user}
            onSubmit={onUpdateProfile}
            isLoading={isUpdatingProfile}
          />
        </div>

        {user?.bio && (
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            className="space-y-3 p-4 rounded-xl bg-muted/50"
          >
            <h3 className="font-semibold">Bio</h3>
            <p className="text-sm text-muted-foreground leading-relaxed">
              {user.bio}
            </p>
          </motion.div>
        )}

        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          className="grid gap-4 md:grid-cols-2"
        >
          {renderField(<Mail className="h-4 w-4" />, "Email", user?.email)}
          {renderField(
            <Phone className="h-4 w-4" />,
            "Phone",
            user?.phoneNumber
          )}
          {renderField(
            <MapPin className="h-4 w-4" />,
            "Địa chỉ ví",
            user?.address
          )}
          {renderField(
            <CalendarDays className="h-4 w-4" />,
            "Tham gia",
            formatDate(user?.createdAt)
          )}
        </motion.div>
      </motion.div>
    );
  }
);

ProfileInfo.displayName = "ProfileInfo";

export default ProfileInfo;

```

### src/module/user/components/Fund/FundMedia.jsx
```jsx
import VideoPlayer from "@/components/VideoPlayer/VideoPlayer";
import FundCampaignStatus from "../FundCampaignStatus";

const FundMedia = ({ cover, campaignStatus, onImageClick }) => {
  const renderMedia = (cover) => {
    if (!cover) return null;

    if (cover.type === "VIDEO") {
      return <VideoPlayer src={cover.url} />;
    }

    return (
      <img
        className="rounded-lg shadow-md w-full h-96 object-cover"
        src={cover.url}
        onClick={() => onImageClick(cover.url)}
        alt="Campaign cover"
      />
    );
  };

  return (
    <div className="relative">
      {renderMedia(cover)}
      {campaignStatus && (
        <div className="absolute top-4 left-4">
          <FundCampaignStatus status={campaignStatus} />
        </div>
      )}
    </div>
  );
};

export default FundMedia;

```

### src/module/user/components/Fund/FundGallery.jsx
```jsx
import {
  Carousel,
  CarouselContent,
  CarouselItem,
  CarouselNext,
  CarouselPrevious,
} from "@/components/ui/carousel";

const FundGallery = ({ images, onImageClick }) => {
  return (
    <Carousel className="w-full">
      <CarouselContent className="ml-2 md:ml-4">
        {images?.map((image, index) => (
          <CarouselItem
            key={index}
            className="pl-2 md:pl-4 basis-1/2 md:basis-1/3 lg:basis-1/4"
          >
            <div
              className="rounded-md aspect-square overflow-hidden cursor-pointer"
              onClick={() => onImageClick(image.url)}
            >
              <img
                src={image.url}
                alt=""
                className="object-cover w-full h-full"
              />
            </div>
          </CarouselItem>
        ))}
      </CarouselContent>
      <CarouselPrevious className="hidden md:flex" />
      <CarouselNext className="hidden md:flex" />
    </Carousel>
  );
};

export default FundGallery;

```

### src/module/user/components/Fund/FundHeader.jsx
```jsx
import { Link2Icon } from "lucide-react";
import { Link } from "react-router-dom";

const FundHeader = ({ campaign }) => {
  return (
    <Link
      to={`https://sepolia.etherscan.io/tx/${campaign?.txHash}`}
      className="text-2xl md:text-4xl font-semibold pb-4 md:pb-6 flex items-center gap-1"
    >
      {campaign.title} <Link2Icon />
    </Link>
  );
};

export default FundHeader;

```

### src/module/user/components/Fund/FundCreator.jsx
```jsx
import { Avatar, AvatarFallback } from "@/components/ui/avatar";
import { AvatarImage } from "@radix-ui/react-avatar";
import { Tooltip, TooltipProvider } from "@/components/ui/tooltip";

const FundCreator = ({ campaign, onChainCampaign }) => {
  return (
    <div className="flex gap-3 md:gap-4 items-center mt-4 pb-4">
      <div className="relative">
        <Avatar className="h-8 w-8 md:h-10 md:w-10 object-cover">
          <AvatarImage
            src={campaign?.user?.image}
            className="object-cover w-full h-full"
          />
          <AvatarFallback>CG</AvatarFallback>
        </Avatar>
        <div className="absolute -bottom-1 -right-1 flex">
          {campaign?.user?.UserBadge?.map((userBadge, index) => (
            <TooltipProvider key={userBadge.badge.id}>
              <Tooltip content={userBadge.badge.description}>
                <img
                  src={userBadge.badge.iconUrl}
                  alt={userBadge.badge.name}
                  className="w-4 h-4 md:w-5 md:h-5 object-cover"
                  style={{ marginLeft: index > 0 ? "-6px" : "0" }}
                />
              </Tooltip>
            </TooltipProvider>
          ))}
        </div>
      </div>
      <div>
        <div className="text-sm md:text-base">
          <strong>{campaign?.user?.name}</strong> đang tổ chức buổi gây quỹ
        </div>
        <p className="text-muted-foreground text-xs md:text-sm">
          {onChainCampaign?.creator}
        </p>
      </div>
    </div>
  );
};

export default FundCreator;

```

### src/module/user/components/Fund/Box/FundBoxHeader.jsx
```jsx

```

### src/module/user/components/Fund/Box/FundBoxActions.jsx
```jsx

```

### src/module/user/components/Fund/Box/FundBoxDonorList.jsx
```jsx

```

### src/module/user/components/Fund/Box/FundBox.jsx
```jsx

```

### src/module/user/components/Fund/Box/FundBoxDonateDialog.jsx
```jsx
import { useState } from "react";
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
  DialogFooter,
} from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Label } from "@/components/ui/label";
import { HandHeart, Loader2 } from "lucide-react";
import { toast } from "sonner";

const FundBoxDonateDialog = ({
  onChainCampaign,
  progress,
  onDonate,
  isLoading,
}) => {
  const [amount, setAmount] = useState("");
  const [selectedToken, setSelectedToken] = useState("ETH");
  const [open, setOpen] = useState(false);

  const handleSubmit = async () => {
    if (!amount || Number(amount) <= 0) {
      toast.error("Vui lòng nhập số tiền hợp lệ");
      return;
    }

    try {
      await onDonate(amount, selectedToken);
      setOpen(false);
      setAmount("");
    } catch (error) {
      console.error("Donation error:", error);
    }
  };

  const getMaxAmount = () => {
    if (!onChainCampaign?.goal || onChainCampaign.isNoLimit) return Infinity;
    const remaining =
      Number(onChainCampaign.goal.eth) -
      Number(onChainCampaign.totalDonated.eth);
    return remaining > 0 ? remaining : 0;
  };

  return (
    <Dialog open={open} onOpenChange={setOpen}>
      <DialogTrigger asChild>
        <Button size="lg" className="text-lg font-medium">
          <HandHeart className="mr-2 h-5 w-5" /> Quyên góp
        </Button>
      </DialogTrigger>

      <DialogContent className="sm:max-w-[425px]">
        <DialogHeader>
          <DialogTitle>Quyên góp cho chiến dịch</DialogTitle>
        </DialogHeader>

        <div className="grid gap-4 py-4">
          <div className="grid grid-cols-4 items-center gap-4">
            <Label htmlFor="token" className="text-right">
              Token
            </Label>
            <Select
              value={selectedToken}
              onValueChange={setSelectedToken}
              disabled={isLoading}
            >
              <SelectTrigger className="col-span-3">
                <SelectValue placeholder="Chọn token" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="ETH">ETH</SelectItem>
                <SelectItem value="USDC">USDC</SelectItem>
                <SelectItem value="WETH">WETH</SelectItem>
              </SelectContent>
            </Select>
          </div>

          <div className="grid grid-cols-4 items-center gap-4">
            <Label htmlFor="amount" className="text-right">
              Số lượng
            </Label>
            <div className="col-span-3">
              <Input
                id="amount"
                type="number"
                value={amount}
                onChange={(e) => {
                  const value = e.target.value;
                  if (value === "" || Number(value) >= 0) {
                    setAmount(value);
                  }
                }}
                placeholder={`Tối đa ${getMaxAmount()} ${selectedToken}`}
                disabled={isLoading}
                step="0.000001"
                min="0"
                max={getMaxAmount()}
              />
            </div>
          </div>

          {progress >= 100 && !onChainCampaign?.isNoLimit && (
            <p className="text-sm text-red-500 col-span-4 text-center">
              Chiến dịch đã đạt mục tiêu
            </p>
          )}
        </div>

        <DialogFooter>
          <Button
            onClick={handleSubmit}
            disabled={
              isLoading ||
              !amount ||
              Number(amount) <= 0 ||
              (!onChainCampaign?.isNoLimit && progress >= 100)
            }
          >
            {isLoading ? (
              <>
                <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                Đang xử lý...
              </>
            ) : (
              "Xác nhận"
            )}
          </Button>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  );
};

export default FundBoxDonateDialog;

```

### src/module/user/components/Fund/Box/FundBoxProgress.jsx
```jsx

```

### src/services/coverService.js
```js
import { CoverV1 } from "@/constants/linkApis";
import queryString from "query-string";
import requestInstance from "@/services/axiosInstance";

export const createCover = async (media, type) => {
  const url = queryString.stringifyUrl({
    url: CoverV1.CREATE_COVER,
  });
  const { data } = await requestInstance.post(url, {
    url: media,
    type: type ?? "IMAGE",
  });
  return data;
};

```

### src/services/axiosInstance.js
```js
import axios from "axios";
import Cookies from "js-cookie";

let isRefreshing = false;
let failedQueue = [];

const processQueue = (error, token = null) => {
  failedQueue.forEach((prom) => {
    if (error) {
      prom.reject(error);
    } else {
      prom.resolve(token);
    }
  });
  failedQueue = [];
};

const instance = axios.create({
  baseURL:
    import.meta.env.VITE_APP_BACKEND_URL || "https://api.chain4good.io.vn",
  withCredentials: true,
});

instance.interceptors.request.use((config) => {
  const accessToken = Cookies.get("access_token");
  if (accessToken) {
    config.headers.Authorization = `Bearer ${accessToken}`;
  }
  return config;
});

instance.interceptors.response.use(
  (response) => response,
  async (error) => {
    const originalRequest = error.config;

    // Helper function to extract error data
    const getErrorData = (error) => {
      const response = error?.response?.data;
      if (typeof response === "object") {
        return response;
      }
      return {
        message: typeof response === "string" ? response : "Có lỗi xảy ra",
        status: error?.response?.status,
        error: true,
      };
    };

    if (error?.response?.status === 401 && !originalRequest._retry) {
      if (originalRequest.url === "/auth/login") {
        return Promise.reject(getErrorData(error));
      }

      if (isRefreshing) {
        return new Promise((resolve, reject) => {
          failedQueue.push({ resolve, reject });
        })
          .then(() => instance(originalRequest))
          .catch((err) => Promise.reject(getErrorData(err)));
      }

      originalRequest._retry = true;
      isRefreshing = true;

      try {
        await instance.post("/auth/refresh");
        processQueue(null);
        isRefreshing = false;
        return instance(originalRequest);
      } catch (refreshError) {
        processQueue(refreshError, null);
        isRefreshing = false;
        Cookies.remove("access_token");
        window.location.href = "/sign-in";
        return Promise.reject(getErrorData(refreshError));
      }
    }

    return Promise.reject(getErrorData(error));
  }
);

export default instance;

```

### src/services/countryService.js
```js
import { AuthV1, CategoryV1, CountryV1 } from "@/constants/linkApis";
import queryString from "query-string";
import requestInstance from "@/services/axiosInstance";

export const getCountries = async () => {
  const url = queryString.stringifyUrl({
    url: CountryV1.GET_COUNTRIES,
  });
  const { data } = await requestInstance.get(url);
  return data;
};

```

### src/services/campaignService.js
```js
import { CampaignV1 } from "@/constants/linkApis";
import requestInstance from "@/services/axiosInstance";
import queryString from "query-string";

export const createCampaign = async (values) => {
  const url = queryString.stringifyUrl({
    url: CampaignV1.CREATE_CAMPAIGN,
  });
  const { data } = await requestInstance.post(url, values);
  return data;
};

// export const getCampaigns = async () => {
//   const url = queryString.stringifyUrl({
//     url: CampaignV1.GET_CAMPAIGNS,
//   });
//   const { data } = await requestInstance.get(url);
//   return data;
// };

export const getCampaignById = async (id) => {
  const url = queryString.stringifyUrl({
    url: `${CampaignV1.GET_CAMPAIGN}/${id}`,
  });
  const { data } = await requestInstance.get(url);
  return data;
};

export const getMyCampaigns = async (page, limit) => {
  const url = queryString.stringifyUrl({
    url: CampaignV1.GET_MY_CAMPAIGNS,
    query: {
      page,
      limit,
    },
  });
  const { data } = await requestInstance.get(url);
  return data;
};

export const updateCampaign = async (id, values) => {
  const url = queryString.stringifyUrl({
    url: `${CampaignV1.UPDATE_CAMPAIGN}/${id}`,
  });
  const { data } = await requestInstance.patch(url, values);
  return data;
};

export const calculateEthGoal = async (amount) => {
  const url = queryString.stringifyUrl({
    url: CampaignV1.GET_CALCULATE_ETH_GOAL,
    query: {
      vndAmount: amount,
    },
  });
  const { data } = await requestInstance.get(url);
  return data;
};

export const getCampaignsByCategoryId = async (id, page, limit) => {
  const url = queryString.stringifyUrl({
    url: `${CampaignV1.GET_CAMPAIGNS}`,
    query: {
      categoryId: id,
      page,
      limit,
    },
  });
  const { data } = await requestInstance.get(url);
  return data;
};

export const getCampaigns = async (filters) => {
  // Add artificial delay
  // await new Promise((resolve) => setTimeout(resolve, 1500)); // 1.5 second delay

  const url = queryString.stringifyUrl({
    url: CampaignV1.GET_CAMPAIGNS_VALID,
    query: {
      ...filters,
    },
  });
  const { data } = await requestInstance.get(url);
  return data;
};

export const calculateGoal = async (amount, token) => {
  const url = queryString.stringifyUrl({
    url: CampaignV1.GET_CALCULATE_GOAL,
    query: {
      vndAmount: amount,
      token,
    },
  });
  const { data } = await requestInstance.get(url);
  return data;
};

export const createCampaignProgress = async (campaignId, progressData) => {
  const url = queryString.stringifyUrl({
    url: `${CampaignV1.CREATE_CAMPAIGN_PROGRESS}${campaignId}/progress`,
  });
  const { data } = await requestInstance.post(url, progressData);
  return data;
};

export const getCampaignProgress = async (campaignId) => {
  const url = queryString.stringifyUrl({
    url: `${CampaignV1.GET_CAMPAIGN_PROGRESS}${campaignId}/progress`,
  });
  const { data } = await requestInstance.get(url);
  return data;
};

```

### src/services/fundraiseTypeService.js
```js
import {
  AuthV1,
  CategoryV1,
  CountryV1,
  FundraiseTypeV1,
} from "@/constants/linkApis";
import queryString from "query-string";
import requestInstance from "@/services/axiosInstance";

export const getFundraiseTypes = async () => {
  const url = queryString.stringifyUrl({
    url: FundraiseTypeV1.GET_FUNDRAISE_TYPES,
  });
  const { data } = await requestInstance.get(url);
  return data;
};

```

### src/services/topicService.js
```js
import { TopicV1 } from "@/constants/linkApis";
import queryString from "query-string";
import requestInstance from "@/services/axiosInstance";

export const getTopics = async () => {
  const url = queryString.stringifyUrl({
    url: TopicV1.GET_TOPICS,
  });
  const { data } = await requestInstance.get(url);
  return data;
};

export const createTopic = async (data) => {
  const url = queryString.stringifyUrl({
    url: TopicV1.CREATE_TOPIC,
  });
  const response = await requestInstance.post(url, data);
  return response;
};

export const updateTopic = async (id, data) => {
  const url = queryString.stringifyUrl({
    url: `${TopicV1.UPDATE_TOPIC}/${id}`,
  });
  const response = await requestInstance.patch(url, data);
  return response;
};

export const deleteTopic = async (id) => {
  const url = queryString.stringifyUrl({
    url: `${TopicV1.DELETE_TOPIC}/${id}`,
  });
  const response = await requestInstance.delete(url);
  return response;
};

```

### src/services/reportService.js
```js
import { ReportV1 } from "@/constants/linkApis";
import queryString from "query-string";
import requestInstance from "@/services/axiosInstance";

export const createReport = async (values) => {
  const url = queryString.stringifyUrl({
    url: ReportV1.CREATE_REPORT,
  });
  const { data } = await requestInstance.post(url, values);
  return data;
};

```

### src/services/categoryService.js
```js
import { AuthV1, CategoryV1 } from "@/constants/linkApis";
import queryString from "query-string";
import requestInstance from "@/services/axiosInstance";

export const getCategories = async () => {
  const url = queryString.stringifyUrl({
    url: CategoryV1.GET_CATEGORIES,
  });
  const { data } = await requestInstance.get(url);
  return { data };
};

export const getCategoryById = async (id) => {
  const url = queryString.stringifyUrl({
    url: `${CategoryV1.GET_CATEGORY}/${id}`,
  });
  const { data } = await requestInstance.get(url);
  return data;
};

```

### src/services/commentService.js
```js
import { CommentV1 } from "@/constants/linkApis";
import queryString from "query-string";
import requestInstance from "@/services/axiosInstance";
export const getCommentsByCampaign = async (id) => {
  const url = queryString.stringifyUrl({
    url: `${CommentV1.GET_COMMENT_BY_CAMPAIGN}/${id}`,
  });
  const { data } = await requestInstance.get(url);
  return data;
};

export const createComment = async (values) => {
  const url = queryString.stringifyUrl({
    url: CommentV1.CREATE_COMMENT,
  });
  const { data } = await requestInstance.post(url, values);
  return data;
};

export const toggleLikeComment = async (id) => {
  const url = queryString.stringifyUrl({
    url: `${CommentV1.LIKE_COMMENT}${id}/like`,
  });
  const { data } = await requestInstance.post(url);
  return data;
};

```

### src/services/postService.js
```js
import { PostV1 } from "@/constants/linkApis";
import queryString from "query-string";
import requestInstance from "@/services/axiosInstance";

export const createPost = async (data) => {
  const url = queryString.stringifyUrl({
    url: PostV1.CREATE_POST,
  });
  const response = await requestInstance.post(url, data);
  return response;
};

export const updatePost = async (id, data) => {
  const url = queryString.stringifyUrl({
    url: `${PostV1.UPDATE_POST}/${id}`,
  });
  const response = await requestInstance.patch(url, data);
  return response;
};

export const deletePost = async (id) => {
  const url = queryString.stringifyUrl({
    url: `${PostV1.DELETE_POST}/${id}`,
  });
  const response = await requestInstance.delete(url);
  return response;
};

export const getPostById = async (id) => {
  const url = queryString.stringifyUrl({
    url: `${PostV1.GET_POST}/${id}`,
  });
  const response = await requestInstance.get(url);
  return response;
};

export const getPosts = async (filters) => {
  const url = queryString.stringifyUrl({
    url: PostV1.GET_POSTS,
    query: {
      ...filters,
    },
  });
  const response = await requestInstance.get(url);
  return response;
};

export const getPostBySlug = async (slug) => {
  const url = queryString.stringifyUrl({
    url: `${PostV1.GET_POST_BY_SLUG}/${slug}`,
  });
  const response = await requestInstance.get(url);
  return response;
};

```

### src/services/uploadService.js
```js
import { UploadV1 } from "@/constants/linkApis";
import requestInstance from "@/services/axiosInstance";
import queryString from "query-string";

export const uploadFile = async (file) => {
  const url = queryString.stringifyUrl({
    url: UploadV1.UPLOADS,
  });
  const formData = new FormData();
  formData.append("file", file);
  const { data } = await requestInstance.post(url, formData);
  return data;
};

```

### src/services/notificationService.js
```js
import { NotificationV1 } from "@/constants/linkApis";
import queryString from "query-string";
import requestInstance from "@/services/axiosInstance";
export const markAsRead = async (id) => {
  const url = queryString.stringifyUrl({
    url: `${NotificationV1.READ_NOTIFICATION}/${id}/read`,
  });
  const { data } = await requestInstance.patch(url);
  return data;
};

export const getNotifications = async (filters) => {
  const url = queryString.stringifyUrl({
    url: NotificationV1.GET_NOTIFICATIONS,
    query: {
      ...filters,
    },
  });
  const { data } = await requestInstance.get(url);
  return data;
};

export const markAllAsRead = async () => {
  const url = queryString.stringifyUrl({
    url: NotificationV1.MARK_ALL_AS_READ,
  });
  const { data } = await requestInstance.patch(url);
  return data;
};

export const getUnreadNotifications = async () => {
  const url = queryString.stringifyUrl({
    url: NotificationV1.UNREAD_COUNT,
  });
  const { data } = await requestInstance.get(url);
  return data;
};

```

### src/services/userService.js
```js
import { UserV1 } from "@/constants/linkApis";
import requestInstance from "@/services/axiosInstance";
import queryString from "query-string";

export const updateUser = async (id, values) => {
  const url = queryString.stringifyUrl({
    url: UserV1.UPDATE_USER + `/${id}`,
  });
  const { data } = await requestInstance.patch(url, values);
  return data;
};

export const updateUserImage = async (userId, data) => {
  const url = queryString.stringifyUrl({
    url: `${UserV1.UPDATE_USER}/${userId}`,
  });
  const response = await requestInstance.patch(url, data);
  return response.data;
};

```

### src/services/aiService.js
```js
import { AiV1 } from "@/constants/linkApis";
import queryString from "query-string";
import requestInstance from "@/services/axiosInstance";
export const analyzeCampaign = async (values) => {
  const url = queryString.stringifyUrl({
    url: AiV1.AI_ANALYZE_CAMPAIGN,
  });
  const { data } = await requestInstance.post(url, values);
  return data;
};

export const optimizeCampaign = async (values) => {
  const url = queryString.stringifyUrl({
    url: AiV1.AI_OPTIMIZE_CAMPAIGN,
  });
  const { data } = await requestInstance.post(url, values);
  return data;
};

export const recommendations = async () => {
  const url = queryString.stringifyUrl({
    url: AiV1.AI_RECOMMENDATIONS,
  });
  const { data } = await requestInstance.get(url);
  return data;
};

export const generateCampaignAudio = async (campaignId) => {
  const url = queryString.stringifyUrl({
    url: AiV1.AI_CAMPAIGN_AUDIO + campaignId + "/audio",
  });
  const { data } = await requestInstance.get(url);
  return data;
};

```

### src/services/authService.js
```js
import { AuthV1 } from "@/constants/linkApis";
import useUserStore from "@/hooks/useUserStore";
import requestInstance from "@/services/axiosInstance";
import queryString from "query-string";

export const signup = async (data) => {
  const url = queryString.stringifyUrl({
    url: AuthV1.REGISTER,
  });
  const response = await requestInstance.post(url, data);
  const userStore = useUserStore.getState();
  userStore.setUserData(response.data.data);
  return response;
};

export const signin = async (data) => {
  const url = queryString.stringifyUrl({
    url: AuthV1.LOGIN,
  });
  const response = await requestInstance.post(url, data);
  return response;
};

export const getProfile = async () => {
  const url = queryString.stringifyUrl({
    url: AuthV1.GET_PROFILE,
  });
  const response = await requestInstance.get(url);
  const userStore = useUserStore.getState();
  userStore.setUser(response.data);
  return response;
};

export const logout = async () => {
  const url = queryString.stringifyUrl({
    url: AuthV1.LOGOUT,
  });
  const { data } = await requestInstance.post(url);
  return data;
};

export const verifyEmail = async (otp) => {
  const url = queryString.stringifyUrl({
    url: AuthV1.VERIFY_EMAIL,
  });
  const userStore = useUserStore.getState();
  const userData = userStore.userData;
  const response = await requestInstance.post(url, {
    email: userData.email,
    code: otp,
    userData: {
      ...userData,
    },
  });
  return response;
};
export const resendVerificationEmail = async () => {
  const url = queryString.stringifyUrl({
    url: AuthV1.RESEND_VERIFICATION_EMAIL,
  });
  const userStore = useUserStore.getState();
  const userData = userStore.userData;
  const response = await requestInstance.post(url, {
    email: userData.email,
  });
  return response;
};

export const loginWithWeb3 = async (address, signature) => {
  const url = queryString.stringifyUrl({
    url: AuthV1.WEB3_LOGIN,
  });
  const response = await requestInstance.post(url, {
    address,
    signature,
  });
  const userStore = useUserStore.getState();
  userStore.setUserData(response.data.data);
  return response;
};

```

### src/services/donationService.js
```js
import { DonationV1 } from "@/constants/linkApis";
import queryString from "query-string";
import requestInstance from "@/services/axiosInstance";

export const createDonation = async (values) => {
  const url = queryString.stringifyUrl({
    url: DonationV1.CREATE_DONATION,
  });
  const { data } = await requestInstance.post(url, {
    ...values,
    token: values.token || "ETH", // Thêm thông tin token
  });
  return data;
};

export const getDonations = async () => {
  const url = queryString.stringifyUrl({
    url: DonationV1.GET_DONATIONS,
  });
  const { data } = await requestInstance.get(url);
  return data;
};

export const getDonationById = async (id) => {
  const url = queryString.stringifyUrl({
    url: `${DonationV1.GET_DONATION}/${id}`,
  });
  const { data } = await requestInstance.get(url);
  return data;
};

export const updateDonation = async (id, values) => {
  const url = queryString.stringifyUrl({
    url: `${DonationV1.UPDATE_DONATION}/${id}`,
  });
  const { data } = await requestInstance.patch(url, values);
  return data;
};

export const deleteDonation = async (id) => {
  const url = queryString.stringifyUrl({
    url: `${DonationV1.DELETE_DONATION}/${id}`,
  });
  const { data } = await requestInstance.delete(url);
  return data;
};

export const getDonationHistory = async (id, params = {}) => {
  const url = queryString.stringifyUrl({
    url: `/campaigns/${id}/donation-history`,
    query: {
      ...params,
    },
  });
  const response = await requestInstance.get(url);
  return response.data;
};

```

### src/utils/helper.js
```js
export function randomizePosition(min, max) {
  return Math.floor(Math.random() * (max - min + 1)) + min;
}
export const formatVND = (value) => {
  const number = value.replace(/\D/g, "");
  if (number === "") return "";
  return parseInt(number).toLocaleString("vi-VN");
};

```

### src/utils/metamask.js
```js
export const getCurrentAccount = async () => {
  if (window.ethereum) {
    const accounts = await window.ethereum.request({
      method: "eth_requestAccounts",
    });
    return accounts[0];
  } else {
    throw new Error("MetaMask chưa được cài");
  }
};

```

### src/utils/ipfs.js
```js
export const fetchTokenMetadata = async (tokenURI) => {
  try {
    const ipfsHash = tokenURI.split("ipfs://")[1];

    const gateways = [
      `https://ipfs.io/ipfs/${ipfsHash}`,
      `https://gateway.pinata.cloud/ipfs/${ipfsHash}`,
      `https://cloudflare-ipfs.com/ipfs/${ipfsHash}`,
    ];

    for (const gateway of gateways) {
      try {
        const response = await fetch(gateway);
        if (response.ok) {
          return await response.json();
        }
      } catch (err) {
        console.warn(`Gateway ${gateway} failed:`, err);
        continue;
      }
    }

    throw new Error("All IPFS gateways failed");
  } catch (error) {
    console.error("Error fetching token metadata:", error);
    return null;
  }
};

export const resolveIPFSUrl = (url) => {
  if (!url) return "";

  if (url.includes(".ipfs.w3s.link")) {
    return url.replace("ipfs://", "https://");
  }

  if (url.startsWith("ipfs://")) {
    const hash = url.replace("ipfs://", "");
    return `https://ipfs.io/ipfs/${hash}`;
  }

  return url;
};

```

### src/utils/nft.js
```js
import { NFT_RARITY } from "@/constants/nft";
import { randomizePosition } from "./helper";

export const getNFTRarityByChance = () => {
  // Validate rarity chances before proceeding
  validateNFTRarity();

  const random = Math.random() * 100; // Random từ 0-100
  let accumulatedChance = 0;

  // Định nghĩa thứ tự check từ common đến legendary
  const rarityOrder = ["COMMON", "UNCOMMON", "RARE", "EPIC", "LEGENDARY"];

  for (const rarity of rarityOrder) {
    const chance = parseFloat(NFT_RARITY[rarity].chance); // Convert "50%" -> 50
    accumulatedChance += chance;

    if (random <= accumulatedChance) {
      return NFT_RARITY[rarity];
    }
  }

  return NFT_RARITY.COMMON; // Fallback về Common nếu có lỗi
};

// Sử dụng trong generateNFTMetadata
export const generateNFTMetadata = (donorName, donationAmount) => {
  try {
    const rarity = getNFTRarityByChance();
    const images = rarity.images;

    const randomImageIndex = randomizePosition(0, images.length - 1);
    const image = images[randomImageIndex];

    const ipfsHash = image.split("ipfs.w3s.link/")[0].split("https://")[1];
    const ipfsUri = `ipfs://${ipfsHash}`;

    return {
      name: `Charity Donor NFT - ${rarity.label}`,
      description: `NFT tặng cho nhà hảo tâm ${donorName} đã quyên góp ${donationAmount}.`,
      image: ipfsUri,
      attributes: [
        {
          trait_type: "Rarity",
          value: rarity.label,
        },
        {
          trait_type: "Donor",
          value: donorName,
        },
        {
          trait_type: "Donation Amount",
          value: donationAmount,
        },
      ],
    };
  } catch (error) {
    console.error("Error in NFT rarity validation:", error);
    throw error;
  }
};

export const validateNFTRarity = () => {
  const totalChance = Object.values(NFT_RARITY).reduce(
    (sum, rarity) => sum + parseFloat(rarity.chance),
    0
  );

  if (Math.abs(totalChance - 100) > 0.01) {
    throw new Error(
      `Total chance must be 100%. Current total: ${totalChance}%`
    );
  }
  return true;
};

// Test distribution
export function testDistribution(iterations = 10000) {
  const distribution = {
    COMMON: 0,
    UNCOMMON: 0,
    RARE: 0,
    EPIC: 0,
    LEGENDARY: 0,
  };

  for (let i = 0; i < iterations; i++) {
    const result = getNFTRarityByChance();
    distribution[
      Object.keys(NFT_RARITY).find((key) => NFT_RARITY[key].id === result.id)
    ]++;
  }

  // Log percentages
  Object.entries(distribution).forEach(([key, value]) => {
    console.log(`${key}: ${(value / iterations) * 100}`);
  });
}

```

### src/components/ScrollAnimation.jsx
```jsx
/* eslint-disable react-refresh/only-export-components */
import { motion } from "framer-motion";

export const fadeInUp = {
  initial: { opacity: 0, y: 60 },
  animate: { opacity: 1, y: 0 },
  transition: { duration: 0.6, ease: "easeOut" },
};

export const fadeInLeft = {
  initial: { opacity: 0, x: -60 },
  animate: { opacity: 1, x: 0 },
  transition: { duration: 0.6, ease: "easeOut" },
};

export const FadeInWhenVisible = ({ children }) => {
  return (
    <motion.div
      initial="initial"
      whileInView="animate"
      viewport={{ once: true, margin: "-100px" }}
      variants={fadeInUp}
    >
      {children}
    </motion.div>
  );
};

```

### src/components/DonateDialog.jsx
```jsx
import { useCharityDonation } from "@/hooks/useCharityDonation";
import { useState } from "react";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { toast } from "sonner";

const DonateDialog = ({ campaignId }) => {
  const { donateToken } = useCharityDonation();
  const [amount, setAmount] = useState("");
  const [isLoading, setIsLoading] = useState(false);

  const handleDonate = async () => {
    try {
      setIsLoading(true);

      // USDC token address on Ethereum
      const USDC_ADDRESS = "0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48";

      await donateToken(
        campaignId,
        USDC_ADDRESS,
        amount,
        6 // USDC has 6 decimals
      );

      toast.success("Quyên góp thành công!");
      setAmount("");
    } catch (error) {
      console.error("Donation error:", error);
      toast.error("Không thể quyên góp: " + error.message);
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="space-y-4">
      <Input
        type="number"
        value={amount}
        onChange={(e) => setAmount(e.target.value)}
        placeholder="Nhập số lượng token..."
        disabled={isLoading}
      />
      <Button
        onClick={handleDonate}
        disabled={!amount || isLoading}
        className="w-full"
      >
        {isLoading ? "Đang xử lý..." : "Quyên góp"}
      </Button>
    </div>
  );
};

export default DonateDialog;

```

### src/components/ImageUpload.jsx
```jsx
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Button } from "@/components/ui/button";
import { ImagePlus, Loader2, X } from "lucide-react";
import { useState } from "react";
import { uploadFile } from "@/services/uploadService";
import { validateFile } from "@/lib/utils";
import { toast } from "sonner";

export const ImageUpload = ({ value = [], onChange, multiple = false }) => {
  const [loading, setLoading] = useState(false);

  const handleUpload = async (e) => {
    const files = Array.from(e.target.files || []);
    if (!files.length) return;

    try {
      setLoading(true);
      const validFiles = files.filter((file) => validateFile(file));
      if (!validFiles.length) return;

      const uploadPromises = validFiles.map((file) => uploadFile(file));
      const results = await Promise.all(uploadPromises);
      const urls = results.map((result) => result.url);

      if (multiple) {
        onChange([...value, ...urls]);
      } else {
        onChange([urls[0]]);
      }
    } catch (error) {
      console.error("Error uploading images:", error);
      toast.error("Có lỗi xảy ra khi tải ảnh lên");
    } finally {
      setLoading(false);
    }
  };

  const removeImage = (index) => {
    const newImages = value.filter((_, i) => i !== index);
    onChange(newImages);
  };

  return (
    <div className="space-y-4">
      <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
        {value.map((image, index) => (
          <div key={index} className="relative aspect-square">
            <img
              src={image}
              alt=""
              className="w-full h-full object-cover rounded-lg"
            />
            <Button
              size="icon"
              variant="destructive"
              className="absolute -top-2 -right-2 w-6 h-6"
              onClick={() => removeImage(index)}
            >
              <X className="w-4 h-4" />
            </Button>
          </div>
        ))}
        <div>
          <Input
            type="file"
            accept="image/*"
            className="hidden"
            id="image-upload"
            multiple={multiple}
            onChange={handleUpload}
            disabled={loading}
          />
          <Label
            htmlFor="image-upload"
            className="block aspect-square cursor-pointer border-2 border-dashed rounded-lg hover:border-primary transition-colors"
          >
            <div className="flex flex-col items-center justify-center h-full space-y-2">
              {loading ? (
                <Loader2 className="w-8 h-8 animate-spin text-primary" />
              ) : (
                <ImagePlus className="w-8 h-8 text-gray-400" />
              )}
              <span className="text-sm text-gray-500">
                {loading ? "Đang tải lên..." : "Thêm hình ảnh"}
              </span>
            </div>
          </Label>
        </div>
      </div>
    </div>
  );
};

```

### src/components/LoadingSpinner.jsx
```jsx
import { Loader2 } from "lucide-react";

const LoadingSpinner = ({ message = "Đang tải...", className = "" }) => {
  return (
    <div className={`flex flex-col items-center gap-4 ${className}`}>
      <Loader2 className="h-8 w-8 animate-spin text-primary" />
      <p className="text-muted-foreground animate-pulse">{message}</p>
    </div>
  );
};

export default LoadingSpinner;

```

### src/components/ReportCampaignButton.jsx
```jsx
import { Button } from "@/components/ui/button";
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
  DialogFooter,
} from "@/components/ui/dialog";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import { RadioGroup, RadioGroupItem } from "@/components/ui/radio-group";
import { Flag } from "lucide-react";
import { useState } from "react";
import { useMutation } from "@tanstack/react-query";
import { createReport } from "@/services/reportService";
import { toast } from "sonner";
import { ReportType } from "@/constants/enums";

const ReportCampaignButton = ({ campaignId }) => {
  const [content, setContent] = useState("");
  const [type, setType] = useState("");
  const [isOpen, setIsOpen] = useState(false);

  const { mutate: submitReport, isPending } = useMutation({
    mutationFn: createReport,
    onSuccess: () => {
      toast.success("Báo cáo đã được gửi thành công!");
      setIsOpen(false);
      setContent("");
      setType("");
    },
    onError: (error) => {
      toast.error("Không thể gửi báo cáo: " + error.message);
    },
  });

  const handleSubmit = () => {
    if (!type) {
      toast.error("Vui lòng chọn loại báo cáo");
      return;
    }
    if (!content.trim()) {
      toast.error("Vui lòng nhập nội dung báo cáo");
      return;
    }

    submitReport({
      campaignId: Number(campaignId),
      content: content.trim(),
      type,
    });
  };

  return (
    <Dialog open={isOpen} onOpenChange={setIsOpen}>
      <DialogTrigger asChild>
        <Button variant="ghost" size="sm" className="gap-2">
          <Flag className="h-4 w-4" />
          Báo cáo chiến dịch
        </Button>
      </DialogTrigger>
      <DialogContent>
        <DialogHeader>
          <DialogTitle>Báo cáo chiến dịch</DialogTitle>
        </DialogHeader>

        <div className="space-y-4 py-4">
          <div className="space-y-2">
            <Label>Loại báo cáo</Label>
            <RadioGroup
              value={type}
              onValueChange={setType}
              className="flex flex-col space-y-2"
            >
              <div className="flex items-center space-x-2">
                <RadioGroupItem value={ReportType.SPAM} id="spam" />
                <Label htmlFor="spam">Spam</Label>
              </div>
              <div className="flex items-center space-x-2">
                <RadioGroupItem value={ReportType.ILLEGAL} id="illegal" />
                <Label htmlFor="illegal">Vi phạm pháp luật</Label>
              </div>
            </RadioGroup>
          </div>

          <div className="space-y-2">
            <Label htmlFor="content">Nội dung báo cáo</Label>
            <Textarea
              id="content"
              placeholder="Vui lòng mô tả chi tiết lý do bạn báo cáo chiến dịch này..."
              value={content}
              onChange={(e) => setContent(e.target.value)}
              rows={5}
            />
          </div>
        </div>

        <DialogFooter>
          <Button type="submit" onClick={handleSubmit} disabled={isPending}>
            {isPending ? "Đang gửi..." : "Gửi báo cáo"}
          </Button>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  );
};

export default ReportCampaignButton;

```

### src/components/DocumentUpload.jsx
```jsx
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Button } from "@/components/ui/button";
import { FileUp, Loader2, X, File } from "lucide-react";
import { useState } from "react";
import { uploadFile } from "@/services/uploadService";
import { toast } from "sonner";

export const DocumentUpload = ({ value = [], onChange, multiple = false }) => {
  const [loading, setLoading] = useState(false);

  const handleUpload = async (e) => {
    const files = Array.from(e.target.files || []);
    if (!files.length) return;

    try {
      setLoading(true);
      const uploadPromises = files.map((file) => uploadFile(file));
      const results = await Promise.all(uploadPromises);
      const urls = results.map((result) => result.url);

      if (multiple) {
        onChange([...value, ...urls]);
      } else {
        onChange([urls[0]]);
      }
    } catch (error) {
      console.error("Error uploading documents:", error);
      toast.error("Có lỗi xảy ra khi tải tài liệu lên");
    } finally {
      setLoading(false);
    }
  };

  const removeDocument = (index) => {
    const newDocs = value.filter((_, i) => i !== index);
    onChange(newDocs);
  };

  return (
    <div className="space-y-4">
      <div className="grid gap-4">
        {value.map((doc, index) => (
          <div
            key={index}
            className="flex items-center justify-between p-3 border rounded-lg"
          >
            <div className="flex items-center gap-2">
              <File className="w-5 h-5 text-blue-500" />
              <a
                href={doc}
                target="_blank"
                rel="noopener noreferrer"
                className="text-sm text-blue-500 hover:underline"
              >
                Tài liệu {index + 1}
              </a>
            </div>
            <Button
              size="icon"
              variant="ghost"
              className="w-8 h-8"
              onClick={() => removeDocument(index)}
            >
              <X className="w-4 h-4" />
            </Button>
          </div>
        ))}
        <div>
          <Input
            type="file"
            className="hidden"
            id="document-upload"
            multiple={multiple}
            onChange={handleUpload}
            disabled={loading}
          />
          <Label
            htmlFor="document-upload"
            className="block cursor-pointer border-2 border-dashed rounded-lg p-4 hover:border-primary transition-colors"
          >
            <div className="flex flex-col items-center justify-center space-y-2">
              {loading ? (
                <Loader2 className="w-8 h-8 animate-spin text-primary" />
              ) : (
                <FileUp className="w-8 h-8 text-gray-400" />
              )}
              <span className="text-sm text-gray-500">
                {loading ? "Đang tải lên..." : "Thêm tài liệu"}
              </span>
            </div>
          </Label>
        </div>
      </div>
    </div>
  );
};

```

### src/components/GenerateAudioButton.jsx
```jsx
import { Button } from "@/components/ui/button";
import { Loader2, Volume2Icon } from "lucide-react";
import { useState } from "react";
import { toast } from "sonner";
import { generateCampaignAudio } from "@/services/aiService";
import { useQueryClient } from "@tanstack/react-query";

const GenerateAudioButton = ({ campaignId }) => {
  const [isGenerating, setIsGenerating] = useState(false);
  const queryClient = useQueryClient();

  const handleGenerateAudio = async () => {
    try {
      setIsGenerating(true);
      await generateCampaignAudio(campaignId);

      toast.success("Audio đã được tạo thành công!");
    } catch (error) {
      toast.error("Không thể tạo audio: " + error.message);
    } finally {
      await queryClient.refetchQueries({
        queryKey: ["campaign", campaignId],
        exact: true,
        type: "active",
      });
      setIsGenerating(false);
    }
  };

  return (
    <Button
      onClick={handleGenerateAudio}
      variant="outline"
      size="sm"
      disabled={isGenerating}
      className="gap-2"
    >
      {isGenerating ? (
        <>
          <Loader2 className="h-4 w-4 animate-spin" />
          Đang tạo audio...
        </>
      ) : (
        <>
          <Volume2Icon className="h-4 w-4" />
          Tạo cuộc trò chuyện
        </>
      )}
    </Button>
  );
};

export default GenerateAudioButton;

```

### src/components/CongratulationModal.jsx
```jsx
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";
import { useEffect } from "react";
import confetti from "canvas-confetti";
import { NFT_RARITY } from "@/constants/nft";
import { resolveIPFSUrl } from "@/utils/ipfs";
import { motion } from "framer-motion";

const CongratulationModal = ({ open, onOpenChange, metadata }) => {
  useEffect(() => {
    if (open) {
      const colors = ["#00ff00", "#ff0000", "#0000ff"];

      // Pháo hoa từ giữa màn hình
      confetti({
        particleCount: 100,
        spread: 70,
        origin: { y: 0.6 },
        colors: colors,
      });

      // Pháo hoa từ 2 bên
      setTimeout(() => {
        confetti({
          particleCount: 50,
          angle: 60,
          spread: 55,
          origin: { x: 0 },
          colors: colors,
        });

        confetti({
          particleCount: 50,
          angle: 120,
          spread: 55,
          origin: { x: 1 },
          colors: colors,
        });
      }, 250);
    }
  }, [open]);

  if (!metadata) return null;

  // Lấy thông tin rarity từ attributes
  const rarityAttribute = metadata.attributes.find(
    (attr) => attr.trait_type === "Rarity"
  );
  const rarityInfo = Object.values(NFT_RARITY).find(
    (r) => r.label === rarityAttribute?.value
  );

  return (
    <Dialog open={open} onOpenChange={onOpenChange}>
      <DialogContent className="sm:max-w-[425px]">
        <DialogHeader>
          <DialogTitle
            className="text-2xl font-semibold text-center pb-2"
            style={{ color: rarityInfo?.color }}
          >
            🎉 Chúc mừng! 🎉
          </DialogTitle>
        </DialogHeader>

        <div className="space-y-6 pt-4">
          <motion.div
            initial={{ scale: 0.5, opacity: 0 }}
            animate={{ scale: 1, opacity: 1 }}
            transition={{ duration: 0.5 }}
            className="relative"
          >
            <img
              src={resolveIPFSUrl(metadata.image)}
              alt={metadata.name}
              className="w-full rounded-lg shadow-lg"
            />
            <div
              className="absolute top-2 right-2 px-3 py-1 rounded-full text-sm font-semibold"
              style={{
                backgroundColor: `${rarityInfo?.color}20`,
                color: rarityInfo?.color,
              }}
            >
              {rarityAttribute?.value}
            </div>
          </motion.div>

          <div className="space-y-2 text-center">
            <h3 className="font-semibold text-lg">{metadata.name}</h3>
            <p className="text-muted-foreground">{metadata.description}</p>
          </div>

          <Button onClick={() => onOpenChange(false)} className="w-full">
            Đóng
          </Button>
        </div>
      </DialogContent>
    </Dialog>
  );
};

export default CongratulationModal;

```

### src/components/TextSplit/TextSplit.jsx
```jsx
import { animate } from 'motion'
import React, { useRef } from 'react'

const TextSplit = ({text, ...props}) => {
  const containerRef = useRef(null)

  useEffect(() => {
      document.fonts.ready.then(() => {
          if (!containerRef.current) return
          containerRef.current.style.visibility = "visible"
          const { words } = splitText(
              containerRef.current.querySelector("h1")!
          )
          animate(
              words,
              { opacity: [0, 1], y: [10, 0] },
              {
                  type: "spring",
                  duration: 2,
                  bounce: 0,
                  delay: stagger(0.05),
              }
          )
      })
  }, [])

  return (
      <div className="container" ref={containerRef}>
          <h1 className="h1" {...props}>
              {text}
          </h1>
      </div>
  )
}

export default TextSplit

```

### src/components/CreateCampaign/CreateCampaign.jsx
```jsx
import React, { useState } from "react";
import { ethers } from "ethers";
import { useCharityDonation } from "@/hooks/useCharityDonation";

const CreateCampaign = () => {
  const { createCampaign } = useCharityDonation();

  const [title, setTitle] = useState("");
  const [tokenAddress, setTokenAddress] = useState(
    "0x0000000000000000000000000000000000000000"
  ); // Default ETH
  const [goal, setGoal] = useState("");
  const [duration, setDuration] = useState("");
  const [isNoLimit, setIsNoLimit] = useState(false);
  const [loading, setLoading] = useState(false);
  const [success, setSuccess] = useState("");

  const handleSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);
    setSuccess("");
    try {
      const parsedGoal = ethers.parseEther(goal); // goal in ETH or tokens
      const parsedDuration = parseInt(duration) * 60; // assume duration in minutes

      await createCampaign(
        title,
        tokenAddress,
        parsedGoal,
        parsedDuration,
        isNoLimit
      );
      setSuccess("Chiến dịch đã được tạo thành công!");
    } catch (err) {
      console.error(err);
      alert(err?.message || "Có lỗi xảy ra");
    }
    setLoading(false);
  };

  return (
    <form
      onSubmit={handleSubmit}
      className="p-4 border rounded shadow-md max-w-md mx-auto"
    >
      <h2 className="text-xl font-bold mb-4">Tạo chiến dịch từ thiện</h2>

      <label className="block mb-2">
        Tiêu đề:
        <input
          type="text"
          value={title}
          onChange={(e) => setTitle(e.target.value)}
          className="w-full border px-2 py-1 rounded mt-1"
          required
        />
      </label>

      <label className="block mb-2">
        Địa chỉ Token (0x0 cho ETH):
        <input
          type="text"
          value={tokenAddress}
          onChange={(e) => setTokenAddress(e.target.value)}
          className="w-full border px-2 py-1 rounded mt-1"
          required
        />
      </label>

      <label className="block mb-2">
        Mục tiêu (ví dụ: 1.5):
        <input
          type="number"
          value={goal}
          onChange={(e) => setGoal(e.target.value)}
          className="w-full border px-2 py-1 rounded mt-1"
          required
          step="any"
        />
      </label>

      <label className="block mb-2">
        Thời hạn (phút):
        <input
          type="number"
          value={duration}
          onChange={(e) => setDuration(e.target.value)}
          className="w-full border px-2 py-1 rounded mt-1"
          required
        />
      </label>

      <label className="flex items-center mb-4">
        <input
          type="checkbox"
          checked={isNoLimit}
          onChange={(e) => setIsNoLimit(e.target.checked)}
          className="mr-2"
        />
        Không giới hạn (bỏ qua mục tiêu)
      </label>

      <button
        type="submit"
        className="bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700 disabled:opacity-50"
        disabled={loading}
      >
        {loading ? "Đang tạo..." : "Tạo chiến dịch"}
      </button>

      {success && <p className="text-green-600 mt-3">{success}</p>}
    </form>
  );
};

export default CreateCampaign;

```

### src/components/Icons/ZaloSvg.jsx
```jsx
import React from "react";

const ZaloSvg = (props) => {
  return (
    <svg
      xmlns="http://www.w3.org/2000/svg"
      viewBox="0 0 48 48"
      width="48px"
      height="48px"
      {...props}
    >
      <path
        fill="#2962ff"
        d="M15,36V6.827l-1.211-0.811C8.64,8.083,5,13.112,5,19v10c0,7.732,6.268,14,14,14h10 c4.722,0,8.883-2.348,11.417-5.931V36H15z"
      />
      <path
        fill="#eee"
        d="M29,5H19c-1.845,0-3.601,0.366-5.214,1.014C10.453,9.25,8,14.528,8,19 c0,6.771,0.936,10.735,3.712,14.607c0.216,0.301,0.357,0.653,0.376,1.022c0.043,0.835-0.129,2.365-1.634,3.742 c-0.162,0.148-0.059,0.419,0.16,0.428c0.942,0.041,2.843-0.014,4.797-0.877c0.557-0.246,1.191-0.203,1.729,0.083 C20.453,39.764,24.333,40,28,40c4.676,0,9.339-1.04,12.417-2.916C42.038,34.799,43,32.014,43,29V19C43,11.268,36.732,5,29,5z"
      />
      <path
        fill="#2962ff"
        d="M36.75,27C34.683,27,33,25.317,33,23.25s1.683-3.75,3.75-3.75s3.75,1.683,3.75,3.75 S38.817,27,36.75,27z M36.75,21c-1.24,0-2.25,1.01-2.25,2.25s1.01,2.25,2.25,2.25S39,24.49,39,23.25S37.99,21,36.75,21z"
      />
      <path
        fill="#2962ff"
        d="M31.5,27h-1c-0.276,0-0.5-0.224-0.5-0.5V18h1.5V27z"
      />
      <path
        fill="#2962ff"
        d="M27,19.75v0.519c-0.629-0.476-1.403-0.769-2.25-0.769c-2.067,0-3.75,1.683-3.75,3.75 S22.683,27,24.75,27c0.847,0,1.621-0.293,2.25-0.769V26.5c0,0.276,0.224,0.5,0.5,0.5h1v-7.25H27z M24.75,25.5 c-1.24,0-2.25-1.01-2.25-2.25S23.51,21,24.75,21S27,22.01,27,23.25S25.99,25.5,24.75,25.5z"
      />
      <path
        fill="#2962ff"
        d="M21.25,18h-8v1.5h5.321L13,26h0.026c-0.163,0.211-0.276,0.463-0.276,0.75V27h7.5 c0.276,0,0.5-0.224,0.5-0.5v-1h-5.321L21,19h-0.026c0.163-0.211,0.276-0.463,0.276-0.75V18z"
      />
    </svg>
  );
};

export default ZaloSvg;

```

### src/components/Icons/HeartDonateSvg.jsx
```jsx
import React from "react";

const HeartDonateSvg = () => {
  return (
    <svg
      aria-hidden="true"
      class="hrt-icon hrt-icon--large"
      focusable="false"
      viewBox="0 0 24 24"
    >
      <use href="/_next/static/images/core-df55c1862092b9c0b58bb2ef70e513712d74cb3a460950b367eede29e993e2ae.svg#donor"></use>
    </svg>
  );
};

export default HeartDonateSvg;

```

### src/components/Icons/GoogleIconSvg.jsx
```jsx
import React from "react";

const GoogleIconSvg = ({ ...rest }) => {
  return (
    <>
      <svg
        xmlns="http://www.w3.org/2000/svg"
        x="0px"
        y="0px"
        width="100"
        height="100"
        viewBox="0 0 48 48"
        {...rest}
      >
        <path
          fill="#fbc02d"
          d="M43.611,20.083H42V20H24v8h11.303c-1.649,4.657-6.08,8-11.303,8c-6.627,0-12-5.373-12-12	s5.373-12,12-12c3.059,0,5.842,1.154,7.961,3.039l5.657-5.657C34.046,6.053,29.268,4,24,4C12.955,4,4,12.955,4,24s8.955,20,20,20	s20-8.955,20-20C44,22.659,43.862,21.35,43.611,20.083z"
        ></path>
        <path
          fill="#e53935"
          d="M6.306,14.691l6.571,4.819C14.655,15.108,18.961,12,24,12c3.059,0,5.842,1.154,7.961,3.039	l5.657-5.657C34.046,6.053,29.268,4,24,4C16.318,4,9.656,8.337,6.306,14.691z"
        ></path>
        <path
          fill="#4caf50"
          d="M24,44c5.166,0,9.86-1.977,13.409-5.192l-6.19-5.238C29.211,35.091,26.715,36,24,36	c-5.202,0-9.619-3.317-11.283-7.946l-6.522,5.025C9.505,39.556,16.227,44,24,44z"
        ></path>
        <path
          fill="#1565c0"
          d="M43.611,20.083L43.595,20L42,20H24v8h11.303c-0.792,2.237-2.231,4.166-4.087,5.571	c0.001-0.001,0.002-0.001,0.003-0.002l6.19,5.238C36.971,39.205,44,34,44,24C44,22.659,43.862,21.35,43.611,20.083z"
        ></path>
      </svg>
    </>
  );
};

export default GoogleIconSvg;

```

### src/components/Icons/FacebookSvg.jsx
```jsx
import React from "react";

const FacebookSvg = ({ ...rest }) => {
  return (
    <svg
      xmlns="http://www.w3.org/2000/svg"
      x="0px"
      y="0px"
      width="100"
      height="100"
      viewBox="0 0 48 48"
      {...rest}
    >
      <path fill="#039be5" d="M24 5A19 19 0 1 0 24 43A19 19 0 1 0 24 5Z"></path>
      <path
        fill="#fff"
        d="M26.572,29.036h4.917l0.772-4.995h-5.69v-2.73c0-2.075,0.678-3.915,2.619-3.915h3.119v-4.359c-0.548-0.074-1.707-0.236-3.897-0.236c-4.573,0-7.254,2.415-7.254,7.917v3.323h-4.701v4.995h4.701v13.729C22.089,42.905,23.032,43,24,43c0.875,0,1.729-0.08,2.572-0.194V29.036z"
      ></path>
    </svg>
  );
};

export default FacebookSvg;

```

### src/components/NotificationProvider/index.jsx
```jsx
import { useSocket } from "@/hooks/useSocket";
import {
  getNotifications,
  getUnreadNotifications,
  markAllAsRead,
  markAsRead,
} from "@/services/notificationService";
import React, { useContext, useEffect, useState } from "react";

const NotificationContext = React.createContext({
  notifications: [],
  unreadCount: 0,
  markAsReadNotification: async () => {},
  markAllAsReadNotification: async () => {},
});

export const NotificationProvider = ({ children }) => {
  const [unreadCount, setUnreadCount] = useState(0);
  const { notifications, setNotifications } = useSocket();
  const [filters, setFilters] = useState({
    page: 1,
    limit: 10,
  });

  const markAsReadNotification = async (id) => {
    try {
      await markAsRead(id);
      setUnreadCount((prev) => Math.max(0, prev - 1));
    } catch (error) {
      console.error("Error marking notification as read:", error);
    }
  };

  const markAllAsReadNotification = async () => {
    try {
      await markAllAsRead();
      setUnreadCount(0);
    } catch (error) {
      console.error("Error marking all notifications as read:", error);
    }
  };

  useEffect(() => {
    const fetchUnreadCount = async () => {
      const data = await getUnreadNotifications();
      setUnreadCount(data);
    };
    fetchUnreadCount();
  }, []);

  useEffect(() => {
    const fetchNotifications = async () => {
      const { data } = await getNotifications(filters);
      setNotifications(data);
      const unreadData = await getUnreadNotifications();
      setUnreadCount(unreadData);
    };
    fetchNotifications();
  }, [filters, setNotifications]);

  return (
    <NotificationContext.Provider
      value={{
        notifications,
        unreadCount,
        markAsReadNotification,
        markAllAsReadNotification,
      }}
    >
      {children}
    </NotificationContext.Provider>
  );
};

// eslint-disable-next-line react-refresh/only-export-components
export const useNotification = () => useContext(NotificationContext);

```

### src/components/AnalyzeButton/index.jsx
```jsx
import { Button } from "@/components/ui/button";
import { Brain } from "lucide-react";

const AnalyzeButton = ({ onClick, isAnalyzing }) => {
  return (
    <Button
      onClick={onClick}
      disabled={isAnalyzing}
      variant="outline"
      className="w-full mb-4"
    >
      <Brain className={`mr-2 h-4 w-4 ${isAnalyzing ? "animate-pulse" : ""}`} />
      {isAnalyzing ? "Đang phân tích..." : "Phân tích bằng AI"}
    </Button>
  );
};

export default AnalyzeButton;

```

### src/components/ProgressBar/ProgressBar.jsx
```jsx
const ProgressBar = ({ value, max, tokenSymbol }) => {
  const percentage = (value / max) * 100 > 100 ? 100 : (value / max) * 100;
  console.log(tokenSymbol);

  return (
    <div className="w-full">
      <div className="w-full bg-gray-200 rounded-full h-2 relative">
        <div
          className="h-2 rounded-full bg-gradient-to-r from-green-500 to-green-700"
          style={{ width: `${percentage}%` }}
        />
      </div>
      <div className="flex justify-between mt-1">
        <p className=" text-black font-semibold">
          {percentage === 100
            ? "Đã hoàn thành"
            : `${value.toLocaleString()} ${tokenSymbol}`}
        </p>
        <p>
          <span className="text-gray-500">
            {max.toLocaleString()} {tokenSymbol}
          </span>
        </p>
      </div>
    </div>
  );
};

export default ProgressBar;

```

### src/components/VideoPlayer/VideoPlayer.jsx
```jsx
import React, { useState, useRef } from "react";
import { Play, Pause, Volume2, VolumeX, Maximize2 } from "lucide-react";
import { cn } from "@/lib/utils";
import { Button } from "@/components/ui/button";
import { Slider } from "@/components/ui/slider";

const VideoPlayer = ({ src, onVideoClick }) => {
  const [isPlaying, setIsPlaying] = useState(false);
  const [isMuted, setIsMuted] = useState(true);
  const [progress, setProgress] = useState(0);
  const [duration, setDuration] = useState(0);
  const videoRef = useRef(null);

  const togglePlay = (e) => {
    e.stopPropagation();
    if (isPlaying) {
      videoRef.current.pause();
    } else {
      videoRef.current.play();
    }
    setIsPlaying(!isPlaying);
  };

  const toggleMute = (e) => {
    e.stopPropagation();
    videoRef.current.muted = !isMuted;
    setIsMuted(!isMuted);
  };

  const handleTimeUpdate = () => {
    const progress =
      (videoRef.current.currentTime / videoRef.current.duration) * 100;
    setProgress(progress);
  };

  const handleLoadedMetadata = () => {
    setDuration(videoRef.current.duration);
  };

  const handleSeek = (value) => {
    const time = (value[0] / 100) * duration;
    videoRef.current.currentTime = time;
    setProgress(value[0]);
  };

  const formatTime = (time) => {
    const minutes = Math.floor(time / 60);
    const seconds = Math.floor(time % 60);
    return `${minutes}:${seconds < 10 ? "0" : ""}${seconds}`;
  };

  const toggleFullScreen = (e) => {
    e.stopPropagation();
    if (!document.fullscreenElement) {
      videoRef.current.requestFullscreen();
    } else {
      document.exitFullscreen();
    }
  };

  return (
    <div className="relative group" onClick={onVideoClick}>
      <video
        ref={videoRef}
        className="rounded-lg shadow-md w-full h-96 object-cover cursor-pointer"
        autoPlay
        muted={isMuted}
        onTimeUpdate={handleTimeUpdate}
        onLoadedMetadata={handleLoadedMetadata}
      >
        <source src={src} type="video/mp4" />
        Your browser does not support the video tag.
      </video>

      {/* Custom Controls */}
      <div className="absolute bottom-0 left-0 right-0 p-4 bg-gradient-to-t from-black/70 to-transparent opacity-0 group-hover:opacity-100 transition-opacity">
        <div className="flex flex-col gap-2">
          {/* Progress bar */}
          <Slider
            value={[progress]}
            max={100}
            step={0.1}
            className="cursor-pointer"
            onValueChange={handleSeek}
          />

          <div className="flex items-center justify-between">
            <div className="flex items-center gap-2">
              {/* Play/Pause button */}
              <Button
                variant="ghost"
                size="icon"
                className="text-white hover:bg-white/20"
                onClick={togglePlay}
              >
                {isPlaying ? (
                  <Pause className="h-5 w-5" />
                ) : (
                  <Play className="h-5 w-5" />
                )}
              </Button>

              {/* Mute button */}
              <Button
                variant="ghost"
                size="icon"
                className="text-white hover:bg-white/20"
                onClick={toggleMute}
              >
                {isMuted ? (
                  <VolumeX className="h-5 w-5" />
                ) : (
                  <Volume2 className="h-5 w-5" />
                )}
              </Button>

              {/* Time display */}
              <span className="text-white text-sm">
                {formatTime(videoRef.current?.currentTime || 0)} /{" "}
                {formatTime(duration)}
              </span>
            </div>

            {/* Fullscreen button */}
            <Button
              variant="ghost"
              size="icon"
              className="text-white hover:bg-white/20"
              onClick={toggleFullScreen}
            >
              <Maximize2 className="h-5 w-5" />
            </Button>
          </div>
        </div>
      </div>
    </div>
  );
};

export default VideoPlayer;

```

### src/components/ui/tabs.jsx
```jsx
import * as React from "react";
import * as TabsPrimitive from "@radix-ui/react-tabs";

import { cn } from "@/lib/utils";

const Tabs = TabsPrimitive.Root;

const TabsList = React.forwardRef(
  ({ className, size = "md", ...props }, ref) => {
    const sizeClasses = {
      sm: "h-7 rounded-md p-0.5 text-sm",
      md: "h-9 rounded-lg p-1 text-muted-foreground",
      lg: "h-11 rounded-xl p-2 text-lg",
    };

    return (
      <TabsPrimitive.List
        ref={ref}
        className={cn(
          "inline-flex items-center justify-center bg-muted",
          sizeClasses[size] || sizeClasses.md,
          className
        )}
        {...props}
      />
    );
  }
);
TabsList.displayName = TabsPrimitive.List.displayName;

const TabsTrigger = React.forwardRef(
  ({ className, size = "md", ...props }, ref) => {
    const sizeClasses = {
      sm: "px-2 py-0.5 text-xs",
      md: "px-3 py-1 text-sm",
      lg: "px-4 py-2 text-base",
    };

    return (
      <TabsPrimitive.Trigger
        ref={ref}
        className={cn(
          "inline-flex items-center justify-center whitespace-nowrap rounded-md font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow",
          sizeClasses[size] || sizeClasses.md,
          className
        )}
        {...props}
      />
    );
  }
);
TabsTrigger.displayName = TabsPrimitive.Trigger.displayName;

const TabsContent = React.forwardRef(({ className, ...props }, ref) => (
  <TabsPrimitive.Content
    ref={ref}
    className={cn(
      "mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2",
      className
    )}
    {...props}
  />
));
TabsContent.displayName = TabsPrimitive.Content.displayName;

export { Tabs, TabsList, TabsTrigger, TabsContent };

```

### src/components/ui/dialog.jsx
```jsx
"use client"

import * as React from "react"
import * as DialogPrimitive from "@radix-ui/react-dialog"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const Dialog = DialogPrimitive.Root

const DialogTrigger = DialogPrimitive.Trigger

const DialogPortal = DialogPrimitive.Portal

const DialogClose = DialogPrimitive.Close

const DialogOverlay = React.forwardRef(({ className, ...props }, ref) => (
  <DialogPrimitive.Overlay
    ref={ref}
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props} />
))
DialogOverlay.displayName = DialogPrimitive.Overlay.displayName

const DialogContent = React.forwardRef(({ className, children, ...props }, ref) => (
  <DialogPortal>
    <DialogOverlay />
    <DialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className
      )}
      {...props}>
      {children}
      <DialogPrimitive.Close
        className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground">
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </DialogPrimitive.Close>
    </DialogPrimitive.Content>
  </DialogPortal>
))
DialogContent.displayName = DialogPrimitive.Content.displayName

const DialogHeader = ({
  className,
  ...props
}) => (
  <div
    className={cn("flex flex-col space-y-1.5 text-center sm:text-left", className)}
    {...props} />
)
DialogHeader.displayName = "DialogHeader"

const DialogFooter = ({
  className,
  ...props
}) => (
  <div
    className={cn("flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2", className)}
    {...props} />
)
DialogFooter.displayName = "DialogFooter"

const DialogTitle = React.forwardRef(({ className, ...props }, ref) => (
  <DialogPrimitive.Title
    ref={ref}
    className={cn("text-lg font-semibold leading-none tracking-tight", className)}
    {...props} />
))
DialogTitle.displayName = DialogPrimitive.Title.displayName

const DialogDescription = React.forwardRef(({ className, ...props }, ref) => (
  <DialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props} />
))
DialogDescription.displayName = DialogPrimitive.Description.displayName

export {
  Dialog,
  DialogPortal,
  DialogOverlay,
  DialogTrigger,
  DialogClose,
  DialogContent,
  DialogHeader,
  DialogFooter,
  DialogTitle,
  DialogDescription,
}

```

### src/components/ui/hover-card.jsx
```jsx
"use client"

import * as React from "react"
import * as HoverCardPrimitive from "@radix-ui/react-hover-card"

import { cn } from "@/lib/utils"

const HoverCard = HoverCardPrimitive.Root

const HoverCardTrigger = HoverCardPrimitive.Trigger

const HoverCardContent = React.forwardRef(({ className, align = "center", sideOffset = 4, ...props }, ref) => (
  <HoverCardPrimitive.Content
    ref={ref}
    align={align}
    sideOffset={sideOffset}
    className={cn(
      "z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]",
      className
    )}
    {...props} />
))
HoverCardContent.displayName = HoverCardPrimitive.Content.displayName

export { HoverCard, HoverCardTrigger, HoverCardContent }

```

### src/components/ui/dropdown-menu.jsx
```jsx
import * as React from "react"
import * as DropdownMenuPrimitive from "@radix-ui/react-dropdown-menu"
import { Check, ChevronRight, Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const DropdownMenu = DropdownMenuPrimitive.Root

const DropdownMenuTrigger = DropdownMenuPrimitive.Trigger

const DropdownMenuGroup = DropdownMenuPrimitive.Group

const DropdownMenuPortal = DropdownMenuPrimitive.Portal

const DropdownMenuSub = DropdownMenuPrimitive.Sub

const DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup

const DropdownMenuSubTrigger = React.forwardRef(({ className, inset, children, ...props }, ref) => (
  <DropdownMenuPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
      inset && "pl-8",
      className
    )}
    {...props}>
    {children}
    <ChevronRight className="ml-auto" />
  </DropdownMenuPrimitive.SubTrigger>
))
DropdownMenuSubTrigger.displayName =
  DropdownMenuPrimitive.SubTrigger.displayName

const DropdownMenuSubContent = React.forwardRef(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]",
      className
    )}
    {...props} />
))
DropdownMenuSubContent.displayName =
  DropdownMenuPrimitive.SubContent.displayName

const DropdownMenuContent = React.forwardRef(({ className, sideOffset = 4, ...props }, ref) => (
  <DropdownMenuPrimitive.Portal>
    <DropdownMenuPrimitive.Content
      ref={ref}
      sideOffset={sideOffset}
      className={cn(
        "z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md",
        "data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]",
        className
      )}
      {...props} />
  </DropdownMenuPrimitive.Portal>
))
DropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName

const DropdownMenuItem = React.forwardRef(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&>svg]:size-4 [&>svg]:shrink-0",
      inset && "pl-8",
      className
    )}
    {...props} />
))
DropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName

const DropdownMenuCheckboxItem = React.forwardRef(({ className, children, checked, ...props }, ref) => (
  <DropdownMenuPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    checked={checked}
    {...props}>
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.CheckboxItem>
))
DropdownMenuCheckboxItem.displayName =
  DropdownMenuPrimitive.CheckboxItem.displayName

const DropdownMenuRadioItem = React.forwardRef(({ className, children, ...props }, ref) => (
  <DropdownMenuPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}>
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.RadioItem>
))
DropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName

const DropdownMenuLabel = React.forwardRef(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Label
    ref={ref}
    className={cn("px-2 py-1.5 text-sm font-semibold", inset && "pl-8", className)}
    {...props} />
))
DropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName

const DropdownMenuSeparator = React.forwardRef(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props} />
))
DropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName

const DropdownMenuShortcut = ({
  className,
  ...props
}) => {
  return (
    <span
      className={cn("ml-auto text-xs tracking-widest opacity-60", className)}
      {...props} />
  );
}
DropdownMenuShortcut.displayName = "DropdownMenuShortcut"

export {
  DropdownMenu,
  DropdownMenuTrigger,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuCheckboxItem,
  DropdownMenuRadioItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuShortcut,
  DropdownMenuGroup,
  DropdownMenuPortal,
  DropdownMenuSub,
  DropdownMenuSubContent,
  DropdownMenuSubTrigger,
  DropdownMenuRadioGroup,
}

```

### src/components/ui/toggle.jsx
```jsx
import * as React from "react"
import * as TogglePrimitive from "@radix-ui/react-toggle"
import { cva } from "class-variance-authority";

import { cn } from "@/lib/utils"

const toggleVariants = cva(
  "inline-flex items-center justify-center gap-2 rounded-md text-sm font-medium transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
  {
    variants: {
      variant: {
        default: "bg-transparent",
        outline:
          "border border-input bg-transparent shadow-sm hover:bg-accent hover:text-accent-foreground",
      },
      size: {
        default: "h-9 px-2 min-w-9",
        sm: "h-8 px-1.5 min-w-8",
        lg: "h-10 px-2.5 min-w-10",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

const Toggle = React.forwardRef(({ className, variant, size, ...props }, ref) => (
  <TogglePrimitive.Root
    ref={ref}
    className={cn(toggleVariants({ variant, size, className }))}
    {...props} />
))

Toggle.displayName = TogglePrimitive.Root.displayName

export { Toggle, toggleVariants }

```

### src/components/ui/avatar.jsx
```jsx
"use client"

import * as React from "react"
import * as AvatarPrimitive from "@radix-ui/react-avatar"

import { cn } from "@/lib/utils"

const Avatar = React.forwardRef(({ className, ...props }, ref) => (
  <AvatarPrimitive.Root
    ref={ref}
    className={cn("relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full", className)}
    {...props} />
))
Avatar.displayName = AvatarPrimitive.Root.displayName

const AvatarImage = React.forwardRef(({ className, ...props }, ref) => (
  <AvatarPrimitive.Image
    ref={ref}
    className={cn("aspect-square h-full w-full", className)}
    {...props} />
))
AvatarImage.displayName = AvatarPrimitive.Image.displayName

const AvatarFallback = React.forwardRef(({ className, ...props }, ref) => (
  <AvatarPrimitive.Fallback
    ref={ref}
    className={cn(
      "flex h-full w-full items-center justify-center rounded-full bg-muted",
      className
    )}
    {...props} />
))
AvatarFallback.displayName = AvatarPrimitive.Fallback.displayName

export { Avatar, AvatarImage, AvatarFallback }

```

### src/components/ui/input.jsx
```jsx
import * as React from "react"

import { cn } from "@/lib/utils"

const Input = React.forwardRef(({ className, type, ...props }, ref) => {
  return (
    <input
      type={type}
      className={cn(
        "flex h-9 w-full rounded-md border border-input bg-transparent px-3 py-1 text-base shadow-sm transition-colors file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
        className
      )}
      ref={ref}
      {...props} />
  );
})
Input.displayName = "Input"

export { Input }

```

### src/components/ui/badge.jsx
```jsx
import * as React from "react";
import { cva } from "class-variance-authority";

import { cn } from "@/lib/utils";

const badgeVariants = cva(
  "inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2",
  {
    variants: {
      variant: {
        default:
          "border-transparent bg-primary text-primary-foreground hover:bg-primary/80",
        secondary:
          "border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80",
        destructive:
          "border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80",
        outline: "text-foreground",
        blue: "border-transparent bg-blue-500 text-white hover:bg-blue-600",
        gold: "border-transparent bg-yellow-500 text-white hover:bg-yellow-600",
        premium:
          "border-transparent bg-gradient-to-r from-purple-500 via-pink-500 to-red-500 text-white hover:from-purple-600 hover:via-pink-600 hover:to-red-600 shadow-lg hover:shadow-xl transition-all duration-300",
        achievement:
          "border-transparent bg-gradient-to-r from-amber-400 via-yellow-500 to-orange-500 text-white hover:from-amber-500 hover:via-yellow-600 hover:to-orange-600 shadow-lg hover:shadow-xl transition-all duration-300",
        special:
          "border-transparent bg-gradient-to-r from-emerald-400 via-teal-500 to-cyan-500 text-white hover:from-emerald-500 hover:via-teal-600 hover:to-cyan-600 shadow-lg hover:shadow-xl transition-all duration-300",
        diamond:
          "border-transparent bg-gradient-to-r from-slate-400 via-gray-300 to-zinc-400 text-gray-800 hover:from-slate-500 hover:via-gray-400 hover:to-zinc-500 shadow-lg hover:shadow-xl transition-all duration-300",
        royal:
          "border-transparent bg-gradient-to-r from-indigo-500 via-purple-600 to-pink-600 text-white hover:from-indigo-600 hover:via-purple-700 hover:to-pink-700 shadow-lg hover:shadow-xl transition-all duration-300",
      },
      size: {
        default: "px-2.5 py-0.5 text-xs",
        sm: "px-2 py-0.5 text-xs",
        lg: "px-4 py-2 text-sm",
        xl: "px-6 py-3 text-base",
        // Special size for UserBadge
        badge: "px-4 py-2.5 text-sm font-medium",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
);

function Badge({ className, variant, size, ...props }) {
  return (
    <div
      className={cn(badgeVariants({ variant, size }), className)}
      {...props}
    />
  );
}

export { Badge, badgeVariants };

```

### src/components/ui/label.jsx
```jsx
import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"
import { cva } from "class-variance-authority";

import { cn } from "@/lib/utils"

const labelVariants = cva(
  "text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
)

const Label = React.forwardRef(({ className, ...props }, ref) => (
  <LabelPrimitive.Root ref={ref} className={cn(labelVariants(), className)} {...props} />
))
Label.displayName = LabelPrimitive.Root.displayName

export { Label }

```

### src/components/ui/sheet.jsx
```jsx
"use client";
import * as React from "react"
import * as SheetPrimitive from "@radix-ui/react-dialog"
import { cva } from "class-variance-authority";
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const Sheet = SheetPrimitive.Root

const SheetTrigger = SheetPrimitive.Trigger

const SheetClose = SheetPrimitive.Close

const SheetPortal = SheetPrimitive.Portal

const SheetOverlay = React.forwardRef(({ className, ...props }, ref) => (
  <SheetPrimitive.Overlay
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
    ref={ref} />
))
SheetOverlay.displayName = SheetPrimitive.Overlay.displayName

const sheetVariants = cva(
  "fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=closed]:duration-300 data-[state=open]:duration-500 data-[state=open]:animate-in data-[state=closed]:animate-out",
  {
    variants: {
      side: {
        top: "inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top",
        bottom:
          "inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom",
        left: "inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm",
        right:
          "inset-y-0 right-0 h-full w-3/4 border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm",
      },
    },
    defaultVariants: {
      side: "right",
    },
  }
)

const SheetContent = React.forwardRef(({ side = "right", className, children, ...props }, ref) => (
  <SheetPortal>
    <SheetOverlay />
    <SheetPrimitive.Content ref={ref} className={cn(sheetVariants({ side }), className)} {...props}>
      <SheetPrimitive.Close
        className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary">
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </SheetPrimitive.Close>
      {children}
    </SheetPrimitive.Content>
  </SheetPortal>
))
SheetContent.displayName = SheetPrimitive.Content.displayName

const SheetHeader = ({
  className,
  ...props
}) => (
  <div
    className={cn("flex flex-col space-y-2 text-center sm:text-left", className)}
    {...props} />
)
SheetHeader.displayName = "SheetHeader"

const SheetFooter = ({
  className,
  ...props
}) => (
  <div
    className={cn("flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2", className)}
    {...props} />
)
SheetFooter.displayName = "SheetFooter"

const SheetTitle = React.forwardRef(({ className, ...props }, ref) => (
  <SheetPrimitive.Title
    ref={ref}
    className={cn("text-lg font-semibold text-foreground", className)}
    {...props} />
))
SheetTitle.displayName = SheetPrimitive.Title.displayName

const SheetDescription = React.forwardRef(({ className, ...props }, ref) => (
  <SheetPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props} />
))
SheetDescription.displayName = SheetPrimitive.Description.displayName

export {
  Sheet,
  SheetPortal,
  SheetOverlay,
  SheetTrigger,
  SheetClose,
  SheetContent,
  SheetHeader,
  SheetFooter,
  SheetTitle,
  SheetDescription,
}

```

### src/components/ui/tooltip.jsx
```jsx
"use client"

import * as React from "react"
import * as TooltipPrimitive from "@radix-ui/react-tooltip"

import { cn } from "@/lib/utils"

const TooltipProvider = TooltipPrimitive.Provider

const Tooltip = TooltipPrimitive.Root

const TooltipTrigger = TooltipPrimitive.Trigger

const TooltipContent = React.forwardRef(({ className, sideOffset = 4, ...props }, ref) => (
  <TooltipPrimitive.Portal>
    <TooltipPrimitive.Content
      ref={ref}
      sideOffset={sideOffset}
      className={cn(
        "z-50 overflow-hidden rounded-md bg-primary px-3 py-1.5 text-xs text-primary-foreground animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]",
        className
      )}
      {...props} />
  </TooltipPrimitive.Portal>
))
TooltipContent.displayName = TooltipPrimitive.Content.displayName

export { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }

```

### src/components/ui/table.jsx
```jsx
import * as React from "react"

import { cn } from "@/lib/utils"

const Table = React.forwardRef(({ className, ...props }, ref) => (
  <div className="relative w-full overflow-auto">
    <table
      ref={ref}
      className={cn("w-full caption-bottom text-sm", className)}
      {...props} />
  </div>
))
Table.displayName = "Table"

const TableHeader = React.forwardRef(({ className, ...props }, ref) => (
  <thead ref={ref} className={cn("[&_tr]:border-b", className)} {...props} />
))
TableHeader.displayName = "TableHeader"

const TableBody = React.forwardRef(({ className, ...props }, ref) => (
  <tbody
    ref={ref}
    className={cn("[&_tr:last-child]:border-0", className)}
    {...props} />
))
TableBody.displayName = "TableBody"

const TableFooter = React.forwardRef(({ className, ...props }, ref) => (
  <tfoot
    ref={ref}
    className={cn("border-t bg-muted/50 font-medium [&>tr]:last:border-b-0", className)}
    {...props} />
))
TableFooter.displayName = "TableFooter"

const TableRow = React.forwardRef(({ className, ...props }, ref) => (
  <tr
    ref={ref}
    className={cn(
      "border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted",
      className
    )}
    {...props} />
))
TableRow.displayName = "TableRow"

const TableHead = React.forwardRef(({ className, ...props }, ref) => (
  <th
    ref={ref}
    className={cn(
      "h-10 px-2 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0 [&>[role=checkbox]]:translate-y-[2px]",
      className
    )}
    {...props} />
))
TableHead.displayName = "TableHead"

const TableCell = React.forwardRef(({ className, ...props }, ref) => (
  <td
    ref={ref}
    className={cn(
      "p-2 align-middle [&:has([role=checkbox])]:pr-0 [&>[role=checkbox]]:translate-y-[2px]",
      className
    )}
    {...props} />
))
TableCell.displayName = "TableCell"

const TableCaption = React.forwardRef(({ className, ...props }, ref) => (
  <caption
    ref={ref}
    className={cn("mt-4 text-sm text-muted-foreground", className)}
    {...props} />
))
TableCaption.displayName = "TableCaption"

export {
  Table,
  TableHeader,
  TableBody,
  TableFooter,
  TableHead,
  TableRow,
  TableCell,
  TableCaption,
}

```

### src/components/ui/alert.jsx
```jsx
import * as React from "react"
import { cva } from "class-variance-authority";

import { cn } from "@/lib/utils"

const alertVariants = cva(
  "relative w-full rounded-lg border px-4 py-3 text-sm [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground [&>svg~*]:pl-7",
  {
    variants: {
      variant: {
        default: "bg-background text-foreground",
        destructive:
          "border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

const Alert = React.forwardRef(({ className, variant, ...props }, ref) => (
  <div
    ref={ref}
    role="alert"
    className={cn(alertVariants({ variant }), className)}
    {...props} />
))
Alert.displayName = "Alert"

const AlertTitle = React.forwardRef(({ className, ...props }, ref) => (
  <h5
    ref={ref}
    className={cn("mb-1 font-medium leading-none tracking-tight", className)}
    {...props} />
))
AlertTitle.displayName = "AlertTitle"

const AlertDescription = React.forwardRef(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("text-sm [&_p]:leading-relaxed", className)}
    {...props} />
))
AlertDescription.displayName = "AlertDescription"

export { Alert, AlertTitle, AlertDescription }

```

### src/components/ui/loading.jsx
```jsx
import { Loader2 } from "lucide-react";

export const LoadingSpinner = ({ message = "Đang tải...", className = "" }) => {
  return (
    <div className="container mx-auto min-h-[400px] flex items-center justify-center">
      <div className={`flex flex-col items-center gap-4 ${className}`}>
        <Loader2 className="h-8 w-8 animate-spin text-primary" />
        <p className="text-muted-foreground animate-pulse">{message}</p>
      </div>
    </div>
  );
};

```

### src/components/ui/sidebar.jsx
```jsx
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva } from "class-variance-authority";
import { PanelLeft } from "lucide-react"

import { useIsMobile } from "@/hooks/use-mobile"
import { cn } from "@/lib/utils"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Separator } from "@/components/ui/separator"
import {
  Sheet,
  SheetContent,
  SheetDescription,
  SheetHeader,
  SheetTitle,
} from "@/components/ui/sheet"
import { Skeleton } from "@/components/ui/skeleton"
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from "@/components/ui/tooltip"

const SIDEBAR_COOKIE_NAME = "sidebar_state"
const SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7
const SIDEBAR_WIDTH = "16rem"
const SIDEBAR_WIDTH_MOBILE = "18rem"
const SIDEBAR_WIDTH_ICON = "3rem"
const SIDEBAR_KEYBOARD_SHORTCUT = "b"

const SidebarContext = React.createContext(null)

function useSidebar() {
  const context = React.useContext(SidebarContext)
  if (!context) {
    throw new Error("useSidebar must be used within a SidebarProvider.")
  }

  return context
}

const SidebarProvider = React.forwardRef((
  {
    defaultOpen = true,
    open: openProp,
    onOpenChange: setOpenProp,
    className,
    style,
    children,
    ...props
  },
  ref
) => {
  const isMobile = useIsMobile()
  const [openMobile, setOpenMobile] = React.useState(false)

  // This is the internal state of the sidebar.
  // We use openProp and setOpenProp for control from outside the component.
  const [_open, _setOpen] = React.useState(defaultOpen)
  const open = openProp ?? _open
  const setOpen = React.useCallback((value) => {
    const openState = typeof value === "function" ? value(open) : value
    if (setOpenProp) {
      setOpenProp(openState)
    } else {
      _setOpen(openState)
    }

    // This sets the cookie to keep the sidebar state.
    document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`
  }, [setOpenProp, open])

  // Helper to toggle the sidebar.
  const toggleSidebar = React.useCallback(() => {
    return isMobile
      ? setOpenMobile((open) => !open)
      : setOpen((open) => !open);
  }, [isMobile, setOpen, setOpenMobile])

  // Adds a keyboard shortcut to toggle the sidebar.
  React.useEffect(() => {
    const handleKeyDown = (event) => {
      if (
        event.key === SIDEBAR_KEYBOARD_SHORTCUT &&
        (event.metaKey || event.ctrlKey)
      ) {
        event.preventDefault()
        toggleSidebar()
      }
    }

    window.addEventListener("keydown", handleKeyDown)
    return () => window.removeEventListener("keydown", handleKeyDown);
  }, [toggleSidebar])

  // We add a state so that we can do data-state="expanded" or "collapsed".
  // This makes it easier to style the sidebar with Tailwind classes.
  const state = open ? "expanded" : "collapsed"

  const contextValue = React.useMemo(() => ({
    state,
    open,
    setOpen,
    isMobile,
    openMobile,
    setOpenMobile,
    toggleSidebar,
  }), [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar])

  return (
    <SidebarContext.Provider value={contextValue}>
      <TooltipProvider delayDuration={0}>
        <div
          style={
            {
              "--sidebar-width": SIDEBAR_WIDTH,
              "--sidebar-width-icon": SIDEBAR_WIDTH_ICON,
              ...style
            }
          }
          className={cn(
            "group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar",
            className
          )}
          ref={ref}
          {...props}>
          {children}
        </div>
      </TooltipProvider>
    </SidebarContext.Provider>
  );
})
SidebarProvider.displayName = "SidebarProvider"

const Sidebar = React.forwardRef((
  {
    side = "left",
    variant = "sidebar",
    collapsible = "offcanvas",
    className,
    children,
    ...props
  },
  ref
) => {
  const { isMobile, state, openMobile, setOpenMobile } = useSidebar()

  if (collapsible === "none") {
    return (
      <div
        className={cn(
          "flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground",
          className
        )}
        ref={ref}
        {...props}>
        {children}
      </div>
    );
  }

  if (isMobile) {
    return (
      <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>
        <SheetContent
          data-sidebar="sidebar"
          data-mobile="true"
          className="w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden"
          style={
            {
              "--sidebar-width": SIDEBAR_WIDTH_MOBILE
            }
          }
          side={side}>
          <SheetHeader className="sr-only">
            <SheetTitle>Sidebar</SheetTitle>
            <SheetDescription>Displays the mobile sidebar.</SheetDescription>
          </SheetHeader>
          <div className="flex h-full w-full flex-col">{children}</div>
        </SheetContent>
      </Sheet>
    );
  }

  return (
    <div
      ref={ref}
      className="group peer hidden text-sidebar-foreground md:block"
      data-state={state}
      data-collapsible={state === "collapsed" ? collapsible : ""}
      data-variant={variant}
      data-side={side}>
      {/* This is what handles the sidebar gap on desktop */}
      <div
        className={cn(
          "relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear",
          "group-data-[collapsible=offcanvas]:w-0",
          "group-data-[side=right]:rotate-180",
          variant === "floating" || variant === "inset"
            ? "group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]"
            : "group-data-[collapsible=icon]:w-[--sidebar-width-icon]"
        )} />
      <div
        className={cn(
          "fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex",
          side === "left"
            ? "left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]"
            : "right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]",
          // Adjust the padding for floating and inset variants.
          variant === "floating" || variant === "inset"
            ? "p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]"
            : "group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l",
          className
        )}
        {...props}>
        <div
          data-sidebar="sidebar"
          className="flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow">
          {children}
        </div>
      </div>
    </div>
  );
})
Sidebar.displayName = "Sidebar"

const SidebarTrigger = React.forwardRef(({ className, onClick, ...props }, ref) => {
  const { toggleSidebar } = useSidebar()

  return (
    <Button
      ref={ref}
      data-sidebar="trigger"
      variant="ghost"
      size="icon"
      className={cn("h-7 w-7", className)}
      onClick={(event) => {
        onClick?.(event)
        toggleSidebar()
      }}
      {...props}>
      <PanelLeft />
      <span className="sr-only">Toggle Sidebar</span>
    </Button>
  );
})
SidebarTrigger.displayName = "SidebarTrigger"

const SidebarRail = React.forwardRef(({ className, ...props }, ref) => {
  const { toggleSidebar } = useSidebar()

  return (
    <button
      ref={ref}
      data-sidebar="rail"
      aria-label="Toggle Sidebar"
      tabIndex={-1}
      onClick={toggleSidebar}
      title="Toggle Sidebar"
      className={cn(
        "absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex",
        "[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize",
        "[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize",
        "group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar",
        "[[data-side=left][data-collapsible=offcanvas]_&]:-right-2",
        "[[data-side=right][data-collapsible=offcanvas]_&]:-left-2",
        className
      )}
      {...props} />
  );
})
SidebarRail.displayName = "SidebarRail"

const SidebarInset = React.forwardRef(({ className, ...props }, ref) => {
  return (
    <main
      ref={ref}
      className={cn(
        "relative flex w-full flex-1 flex-col bg-background",
        "md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow",
        className
      )}
      {...props} />
  );
})
SidebarInset.displayName = "SidebarInset"

const SidebarInput = React.forwardRef(({ className, ...props }, ref) => {
  return (
    <Input
      ref={ref}
      data-sidebar="input"
      className={cn(
        "h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring",
        className
      )}
      {...props} />
  );
})
SidebarInput.displayName = "SidebarInput"

const SidebarHeader = React.forwardRef(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="header"
      className={cn("flex flex-col gap-2 p-2", className)}
      {...props} />
  );
})
SidebarHeader.displayName = "SidebarHeader"

const SidebarFooter = React.forwardRef(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="footer"
      className={cn("flex flex-col gap-2 p-2", className)}
      {...props} />
  );
})
SidebarFooter.displayName = "SidebarFooter"

const SidebarSeparator = React.forwardRef(({ className, ...props }, ref) => {
  return (
    <Separator
      ref={ref}
      data-sidebar="separator"
      className={cn("mx-2 w-auto bg-sidebar-border", className)}
      {...props} />
  );
})
SidebarSeparator.displayName = "SidebarSeparator"

const SidebarContent = React.forwardRef(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="content"
      className={cn(
        "flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden",
        className
      )}
      {...props} />
  );
})
SidebarContent.displayName = "SidebarContent"

const SidebarGroup = React.forwardRef(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="group"
      className={cn("relative flex w-full min-w-0 flex-col p-2", className)}
      {...props} />
  );
})
SidebarGroup.displayName = "SidebarGroup"

const SidebarGroupLabel = React.forwardRef(({ className, asChild = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "div"

  return (
    <Comp
      ref={ref}
      data-sidebar="group-label"
      className={cn(
        "flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0",
        "group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0",
        className
      )}
      {...props} />
  );
})
SidebarGroupLabel.displayName = "SidebarGroupLabel"

const SidebarGroupAction = React.forwardRef(({ className, asChild = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "button"

  return (
    <Comp
      ref={ref}
      data-sidebar="group-action"
      className={cn(
        "absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0",
        // Increases the hit area of the button on mobile.
        "after:absolute after:-inset-2 after:md:hidden",
        "group-data-[collapsible=icon]:hidden",
        className
      )}
      {...props} />
  );
})
SidebarGroupAction.displayName = "SidebarGroupAction"

const SidebarGroupContent = React.forwardRef(({ className, ...props }, ref) => (
  <div
    ref={ref}
    data-sidebar="group-content"
    className={cn("w-full text-sm", className)}
    {...props} />
))
SidebarGroupContent.displayName = "SidebarGroupContent"

const SidebarMenu = React.forwardRef(({ className, ...props }, ref) => (
  <ul
    ref={ref}
    data-sidebar="menu"
    className={cn("flex w-full min-w-0 flex-col gap-1", className)}
    {...props} />
))
SidebarMenu.displayName = "SidebarMenu"

const SidebarMenuItem = React.forwardRef(({ className, ...props }, ref) => (
  <li
    ref={ref}
    data-sidebar="menu-item"
    className={cn("group/menu-item relative", className)}
    {...props} />
))
SidebarMenuItem.displayName = "SidebarMenuItem"

const sidebarMenuButtonVariants = cva(
  "peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0",
  {
    variants: {
      variant: {
        default: "hover:bg-sidebar-accent hover:text-sidebar-accent-foreground",
        outline:
          "bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]",
      },
      size: {
        default: "h-8 text-sm",
        sm: "h-7 text-xs",
        lg: "h-12 text-sm group-data-[collapsible=icon]:!p-0",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

const SidebarMenuButton = React.forwardRef((
  {
    asChild = false,
    isActive = false,
    variant = "default",
    size = "default",
    tooltip,
    className,
    ...props
  },
  ref
) => {
  const Comp = asChild ? Slot : "button"
  const { isMobile, state } = useSidebar()

  const button = (
    <Comp
      ref={ref}
      data-sidebar="menu-button"
      data-size={size}
      data-active={isActive}
      className={cn(sidebarMenuButtonVariants({ variant, size }), className)}
      {...props} />
  )

  if (!tooltip) {
    return button
  }

  if (typeof tooltip === "string") {
    tooltip = {
      children: tooltip,
    }
  }

  return (
    <Tooltip>
      <TooltipTrigger asChild>{button}</TooltipTrigger>
      <TooltipContent
        side="right"
        align="center"
        hidden={state !== "collapsed" || isMobile}
        {...tooltip} />
    </Tooltip>
  );
})
SidebarMenuButton.displayName = "SidebarMenuButton"

const SidebarMenuAction = React.forwardRef(({ className, asChild = false, showOnHover = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "button"

  return (
    <Comp
      ref={ref}
      data-sidebar="menu-action"
      className={cn(
        "absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0",
        // Increases the hit area of the button on mobile.
        "after:absolute after:-inset-2 after:md:hidden",
        "peer-data-[size=sm]/menu-button:top-1",
        "peer-data-[size=default]/menu-button:top-1.5",
        "peer-data-[size=lg]/menu-button:top-2.5",
        "group-data-[collapsible=icon]:hidden",
        showOnHover &&
          "group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0",
        className
      )}
      {...props} />
  );
})
SidebarMenuAction.displayName = "SidebarMenuAction"

const SidebarMenuBadge = React.forwardRef(({ className, ...props }, ref) => (
  <div
    ref={ref}
    data-sidebar="menu-badge"
    className={cn(
      "pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground",
      "peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground",
      "peer-data-[size=sm]/menu-button:top-1",
      "peer-data-[size=default]/menu-button:top-1.5",
      "peer-data-[size=lg]/menu-button:top-2.5",
      "group-data-[collapsible=icon]:hidden",
      className
    )}
    {...props} />
))
SidebarMenuBadge.displayName = "SidebarMenuBadge"

const SidebarMenuSkeleton = React.forwardRef(({ className, showIcon = false, ...props }, ref) => {
  // Random width between 50 to 90%.
  const width = React.useMemo(() => {
    return `${Math.floor(Math.random() * 40) + 50}%`;
  }, [])

  return (
    <div
      ref={ref}
      data-sidebar="menu-skeleton"
      className={cn("flex h-8 items-center gap-2 rounded-md px-2", className)}
      {...props}>
      {showIcon && (
        <Skeleton className="size-4 rounded-md" data-sidebar="menu-skeleton-icon" />
      )}
      <Skeleton
        className="h-4 max-w-[--skeleton-width] flex-1"
        data-sidebar="menu-skeleton-text"
        style={
          {
            "--skeleton-width": width
          }
        } />
    </div>
  );
})
SidebarMenuSkeleton.displayName = "SidebarMenuSkeleton"

const SidebarMenuSub = React.forwardRef(({ className, ...props }, ref) => (
  <ul
    ref={ref}
    data-sidebar="menu-sub"
    className={cn(
      "mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5",
      "group-data-[collapsible=icon]:hidden",
      className
    )}
    {...props} />
))
SidebarMenuSub.displayName = "SidebarMenuSub"

const SidebarMenuSubItem = React.forwardRef(({ ...props }, ref) => <li ref={ref} {...props} />)
SidebarMenuSubItem.displayName = "SidebarMenuSubItem"

const SidebarMenuSubButton = React.forwardRef(
  ({ asChild = false, size = "md", isActive, className, ...props }, ref) => {
    const Comp = asChild ? Slot : "a"

    return (
      <Comp
        ref={ref}
        data-sidebar="menu-sub-button"
        data-size={size}
        data-active={isActive}
        className={cn(
          "flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground",
          "data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground",
          size === "sm" && "text-xs",
          size === "md" && "text-sm",
          "group-data-[collapsible=icon]:hidden",
          className
        )}
        {...props} />
    );
  }
)
SidebarMenuSubButton.displayName = "SidebarMenuSubButton"

export {
  Sidebar,
  SidebarContent,
  SidebarFooter,
  SidebarGroup,
  SidebarGroupAction,
  SidebarGroupContent,
  SidebarGroupLabel,
  SidebarHeader,
  SidebarInput,
  SidebarInset,
  SidebarMenu,
  SidebarMenuAction,
  SidebarMenuBadge,
  SidebarMenuButton,
  SidebarMenuItem,
  SidebarMenuSkeleton,
  SidebarMenuSub,
  SidebarMenuSubButton,
  SidebarMenuSubItem,
  SidebarProvider,
  SidebarRail,
  SidebarSeparator,
  SidebarTrigger,
  useSidebar,
}

```

### src/components/ui/scroll-area.jsx
```jsx
import * as React from "react"
import * as ScrollAreaPrimitive from "@radix-ui/react-scroll-area"

import { cn } from "@/lib/utils"

const ScrollArea = React.forwardRef(({ className, children, ...props }, ref) => (
  <ScrollAreaPrimitive.Root
    ref={ref}
    className={cn("relative overflow-hidden", className)}
    {...props}>
    <ScrollAreaPrimitive.Viewport className="h-full w-full rounded-[inherit]">
      {children}
    </ScrollAreaPrimitive.Viewport>
    <ScrollBar />
    <ScrollAreaPrimitive.Corner />
  </ScrollAreaPrimitive.Root>
))
ScrollArea.displayName = ScrollAreaPrimitive.Root.displayName

const ScrollBar = React.forwardRef(({ className, orientation = "vertical", ...props }, ref) => (
  <ScrollAreaPrimitive.ScrollAreaScrollbar
    ref={ref}
    orientation={orientation}
    className={cn(
      "flex touch-none select-none transition-colors",
      orientation === "vertical" &&
        "h-full w-2.5 border-l border-l-transparent p-[1px]",
      orientation === "horizontal" &&
        "h-2.5 flex-col border-t border-t-transparent p-[1px]",
      className
    )}
    {...props}>
    <ScrollAreaPrimitive.ScrollAreaThumb className="relative flex-1 rounded-full bg-border" />
  </ScrollAreaPrimitive.ScrollAreaScrollbar>
))
ScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName

export { ScrollArea, ScrollBar }

```

### src/components/ui/breadcrumb.jsx
```jsx
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { ChevronRight, MoreHorizontal } from "lucide-react"

import { cn } from "@/lib/utils"

const Breadcrumb = React.forwardRef(
  ({ ...props }, ref) => <nav ref={ref} aria-label="breadcrumb" {...props} />
)
Breadcrumb.displayName = "Breadcrumb"

const BreadcrumbList = React.forwardRef(({ className, ...props }, ref) => (
  <ol
    ref={ref}
    className={cn(
      "flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5",
      className
    )}
    {...props} />
))
BreadcrumbList.displayName = "BreadcrumbList"

const BreadcrumbItem = React.forwardRef(({ className, ...props }, ref) => (
  <li
    ref={ref}
    className={cn("inline-flex items-center gap-1.5", className)}
    {...props} />
))
BreadcrumbItem.displayName = "BreadcrumbItem"

const BreadcrumbLink = React.forwardRef(({ asChild, className, ...props }, ref) => {
  const Comp = asChild ? Slot : "a"

  return (
    <Comp
      ref={ref}
      className={cn("transition-colors hover:text-foreground", className)}
      {...props} />
  );
})
BreadcrumbLink.displayName = "BreadcrumbLink"

const BreadcrumbPage = React.forwardRef(({ className, ...props }, ref) => (
  <span
    ref={ref}
    role="link"
    aria-disabled="true"
    aria-current="page"
    className={cn("font-normal text-foreground", className)}
    {...props} />
))
BreadcrumbPage.displayName = "BreadcrumbPage"

const BreadcrumbSeparator = ({
  children,
  className,
  ...props
}) => (
  <li
    role="presentation"
    aria-hidden="true"
    className={cn("[&>svg]:w-3.5 [&>svg]:h-3.5", className)}
    {...props}>
    {children ?? <ChevronRight />}
  </li>
)
BreadcrumbSeparator.displayName = "BreadcrumbSeparator"

const BreadcrumbEllipsis = ({
  className,
  ...props
}) => (
  <span
    role="presentation"
    aria-hidden="true"
    className={cn("flex h-9 w-9 items-center justify-center", className)}
    {...props}>
    <MoreHorizontal className="h-4 w-4" />
    <span className="sr-only">More</span>
  </span>
)
BreadcrumbEllipsis.displayName = "BreadcrumbElipssis"

export {
  Breadcrumb,
  BreadcrumbList,
  BreadcrumbItem,
  BreadcrumbLink,
  BreadcrumbPage,
  BreadcrumbSeparator,
  BreadcrumbEllipsis,
}

```

### src/components/ui/sonner.jsx
```jsx
"use client";
import { useTheme } from "next-themes"
import { Toaster as Sonner } from "sonner"

const Toaster = ({
  ...props
}) => {
  const { theme = "system" } = useTheme()

  return (
    <Sonner
      theme={theme}
      className="toaster group"
      toastOptions={{
        classNames: {
          toast:
            "group toast group-[.toaster]:bg-background group-[.toaster]:text-foreground group-[.toaster]:border-border group-[.toaster]:shadow-lg",
          description: "group-[.toast]:text-muted-foreground",
          actionButton:
            "group-[.toast]:bg-primary group-[.toast]:text-primary-foreground",
          cancelButton:
            "group-[.toast]:bg-muted group-[.toast]:text-muted-foreground",
        },
      }}
      {...props} />
  );
}

export { Toaster }

```

### src/components/ui/textarea.jsx
```jsx
import * as React from "react"

import { cn } from "@/lib/utils"

const Textarea = React.forwardRef(({ className, ...props }, ref) => {
  return (
    <textarea
      className={cn(
        "flex min-h-[60px] w-full rounded-md border border-input bg-transparent px-3 py-2 text-base shadow-sm placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
        className
      )}
      ref={ref}
      {...props} />
  );
})
Textarea.displayName = "Textarea"

export { Textarea }

```

### src/components/ui/progress.jsx
```jsx
"use client"

import * as React from "react"
import * as ProgressPrimitive from "@radix-ui/react-progress"

import { cn } from "@/lib/utils"

const Progress = React.forwardRef(({ className, value, ...props }, ref) => (
  <ProgressPrimitive.Root
    ref={ref}
    className={cn(
      "relative h-2 w-full overflow-hidden rounded-full bg-primary/20",
      className
    )}
    {...props}>
    <ProgressPrimitive.Indicator
      className="h-full w-full flex-1 bg-primary transition-all"
      style={{ transform: `translateX(-${100 - (value || 0)}%)` }} />
  </ProgressPrimitive.Root>
))
Progress.displayName = ProgressPrimitive.Root.displayName

export { Progress }

```

### src/components/ui/checkbox.jsx
```jsx
import * as React from "react"
import * as CheckboxPrimitive from "@radix-ui/react-checkbox"
import { Check } from "lucide-react"

import { cn } from "@/lib/utils"

const Checkbox = React.forwardRef(({ className, ...props }, ref) => (
  <CheckboxPrimitive.Root
    ref={ref}
    className={cn(
      "peer h-4 w-4 shrink-0 rounded-sm border border-primary shadow focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground",
      className
    )}
    {...props}>
    <CheckboxPrimitive.Indicator className={cn("flex items-center justify-center text-current")}>
      <Check className="h-4 w-4" />
    </CheckboxPrimitive.Indicator>
  </CheckboxPrimitive.Root>
))
Checkbox.displayName = CheckboxPrimitive.Root.displayName

export { Checkbox }

```

### src/components/ui/input-otp.jsx
```jsx
import * as React from "react"
import { OTPInput, OTPInputContext } from "input-otp"
import { Minus } from "lucide-react"

import { cn } from "@/lib/utils"

const InputOTP = React.forwardRef(({ className, containerClassName, ...props }, ref) => (
  <OTPInput
    ref={ref}
    containerClassName={cn("flex items-center gap-2 has-[:disabled]:opacity-50", containerClassName)}
    className={cn("disabled:cursor-not-allowed", className)}
    {...props} />
))
InputOTP.displayName = "InputOTP"

const InputOTPGroup = React.forwardRef(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("flex items-center", className)} {...props} />
))
InputOTPGroup.displayName = "InputOTPGroup"

const InputOTPSlot = React.forwardRef(({ index, className, ...props }, ref) => {
  const inputOTPContext = React.useContext(OTPInputContext)
  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]

  return (
    <div
      ref={ref}
      className={cn(
        "relative flex h-9 w-9 items-center justify-center border-y border-r border-input text-sm shadow-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md",
        isActive && "z-10 ring-1 ring-ring",
        className
      )}
      {...props}>
      {char}
      {hasFakeCaret && (
        <div
          className="pointer-events-none absolute inset-0 flex items-center justify-center">
          <div className="h-4 w-px animate-caret-blink bg-foreground duration-1000" />
        </div>
      )}
    </div>
  );
})
InputOTPSlot.displayName = "InputOTPSlot"

const InputOTPSeparator = React.forwardRef(({ ...props }, ref) => (
  <div ref={ref} role="separator" {...props}>
    <Minus />
  </div>
))
InputOTPSeparator.displayName = "InputOTPSeparator"

export { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }

```

### src/components/ui/drawer.jsx
```jsx
"use client"

import * as React from "react"
import { Drawer as DrawerPrimitive } from "vaul"

import { cn } from "@/lib/utils"

const Drawer = ({
  shouldScaleBackground = true,
  ...props
}) => (
  <DrawerPrimitive.Root shouldScaleBackground={shouldScaleBackground} {...props} />
)
Drawer.displayName = "Drawer"

const DrawerTrigger = DrawerPrimitive.Trigger

const DrawerPortal = DrawerPrimitive.Portal

const DrawerClose = DrawerPrimitive.Close

const DrawerOverlay = React.forwardRef(({ className, ...props }, ref) => (
  <DrawerPrimitive.Overlay
    ref={ref}
    className={cn("fixed inset-0 z-50 bg-black/80", className)}
    {...props} />
))
DrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName

const DrawerContent = React.forwardRef(({ className, children, ...props }, ref) => (
  <DrawerPortal>
    <DrawerOverlay />
    <DrawerPrimitive.Content
      ref={ref}
      className={cn(
        "fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background",
        className
      )}
      {...props}>
      <div className="mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted" />
      {children}
    </DrawerPrimitive.Content>
  </DrawerPortal>
))
DrawerContent.displayName = "DrawerContent"

const DrawerHeader = ({
  className,
  ...props
}) => (
  <div
    className={cn("grid gap-1.5 p-4 text-center sm:text-left", className)}
    {...props} />
)
DrawerHeader.displayName = "DrawerHeader"

const DrawerFooter = ({
  className,
  ...props
}) => (
  <div className={cn("mt-auto flex flex-col gap-2 p-4", className)} {...props} />
)
DrawerFooter.displayName = "DrawerFooter"

const DrawerTitle = React.forwardRef(({ className, ...props }, ref) => (
  <DrawerPrimitive.Title
    ref={ref}
    className={cn("text-lg font-semibold leading-none tracking-tight", className)}
    {...props} />
))
DrawerTitle.displayName = DrawerPrimitive.Title.displayName

const DrawerDescription = React.forwardRef(({ className, ...props }, ref) => (
  <DrawerPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props} />
))
DrawerDescription.displayName = DrawerPrimitive.Description.displayName

export {
  Drawer,
  DrawerPortal,
  DrawerOverlay,
  DrawerTrigger,
  DrawerClose,
  DrawerContent,
  DrawerHeader,
  DrawerFooter,
  DrawerTitle,
  DrawerDescription,
}

```

### src/components/ui/context-menu.jsx
```jsx
import * as React from "react"
import * as ContextMenuPrimitive from "@radix-ui/react-context-menu"
import { Check, ChevronRight, Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const ContextMenu = ContextMenuPrimitive.Root

const ContextMenuTrigger = ContextMenuPrimitive.Trigger

const ContextMenuGroup = ContextMenuPrimitive.Group

const ContextMenuPortal = ContextMenuPrimitive.Portal

const ContextMenuSub = ContextMenuPrimitive.Sub

const ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup

const ContextMenuSubTrigger = React.forwardRef(({ className, inset, children, ...props }, ref) => (
  <ContextMenuPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground",
      inset && "pl-8",
      className
    )}
    {...props}>
    {children}
    <ChevronRight className="ml-auto h-4 w-4" />
  </ContextMenuPrimitive.SubTrigger>
))
ContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName

const ContextMenuSubContent = React.forwardRef(({ className, ...props }, ref) => (
  <ContextMenuPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]",
      className
    )}
    {...props} />
))
ContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName

const ContextMenuContent = React.forwardRef(({ className, ...props }, ref) => (
  <ContextMenuPrimitive.Portal>
    <ContextMenuPrimitive.Content
      ref={ref}
      className={cn(
        "z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]",
        className
      )}
      {...props} />
  </ContextMenuPrimitive.Portal>
))
ContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName

const ContextMenuItem = React.forwardRef(({ className, inset, ...props }, ref) => (
  <ContextMenuPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      inset && "pl-8",
      className
    )}
    {...props} />
))
ContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName

const ContextMenuCheckboxItem = React.forwardRef(({ className, children, checked, ...props }, ref) => (
  <ContextMenuPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    checked={checked}
    {...props}>
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <ContextMenuPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </ContextMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </ContextMenuPrimitive.CheckboxItem>
))
ContextMenuCheckboxItem.displayName =
  ContextMenuPrimitive.CheckboxItem.displayName

const ContextMenuRadioItem = React.forwardRef(({ className, children, ...props }, ref) => (
  <ContextMenuPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}>
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <ContextMenuPrimitive.ItemIndicator>
        <Circle className="h-4 w-4 fill-current" />
      </ContextMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </ContextMenuPrimitive.RadioItem>
))
ContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName

const ContextMenuLabel = React.forwardRef(({ className, inset, ...props }, ref) => (
  <ContextMenuPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold text-foreground",
      inset && "pl-8",
      className
    )}
    {...props} />
))
ContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName

const ContextMenuSeparator = React.forwardRef(({ className, ...props }, ref) => (
  <ContextMenuPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-border", className)}
    {...props} />
))
ContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName

const ContextMenuShortcut = ({
  className,
  ...props
}) => {
  return (
    <span
      className={cn("ml-auto text-xs tracking-widest text-muted-foreground", className)}
      {...props} />
  );
}
ContextMenuShortcut.displayName = "ContextMenuShortcut"

export {
  ContextMenu,
  ContextMenuTrigger,
  ContextMenuContent,
  ContextMenuItem,
  ContextMenuCheckboxItem,
  ContextMenuRadioItem,
  ContextMenuLabel,
  ContextMenuSeparator,
  ContextMenuShortcut,
  ContextMenuGroup,
  ContextMenuPortal,
  ContextMenuSub,
  ContextMenuSubContent,
  ContextMenuSubTrigger,
  ContextMenuRadioGroup,
}

```

### src/components/ui/button.jsx
```jsx
import * as React from "react";
import { Slot } from "@radix-ui/react-slot";
import { cva } from "class-variance-authority";

import { cn } from "@/lib/utils";

const buttonVariants = cva(
  "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
  {
    variants: {
      variant: {
        default:
          "bg-primary text-primary-foreground shadow hover:bg-primary/90",
        destructive:
          "bg-destructive text-destructive-foreground shadow-sm hover:bg-destructive/90",
        outline:
          "border border-input bg-background shadow-sm hover:bg-accent hover:text-accent-foreground",
        secondary:
          "bg-secondary text-secondary-foreground shadow-sm hover:bg-secondary/80",
        liked:
          "text-red-500 hover:text-red-600 [&_svg]:fill-red-500 [&_svg]:hover:fill-red-600",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-9 px-4 py-2",
        sm: "h-8 rounded-md px-3 text-xs",
        lg: "h-10 rounded-md px-8",
        icon: "h-9 w-9",
        xl: "h-12 rounded-md px-8",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
);

const Button = React.forwardRef(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : "button";
    return (
      <Comp
        className={cn(buttonVariants({ variant, size, className }))}
        ref={ref}
        {...props}
      />
    );
  }
);
Button.displayName = "Button";

export { Button, buttonVariants };

```

### src/components/ui/separator.jsx
```jsx
import * as React from "react"
import * as SeparatorPrimitive from "@radix-ui/react-separator"

import { cn } from "@/lib/utils"

const Separator = React.forwardRef((
  { className, orientation = "horizontal", decorative = true, ...props },
  ref
) => (
  <SeparatorPrimitive.Root
    ref={ref}
    decorative={decorative}
    orientation={orientation}
    className={cn(
      "shrink-0 bg-border",
      orientation === "horizontal" ? "h-[1px] w-full" : "h-full w-[1px]",
      className
    )}
    {...props} />
))
Separator.displayName = SeparatorPrimitive.Root.displayName

export { Separator }

```

### src/components/ui/chart.jsx
```jsx
"use client";
import * as React from "react";
import * as RechartsPrimitive from "recharts";

import { cn } from "@/lib/utils";

// Format: { THEME_NAME: CSS_SELECTOR }
const THEMES = {
  light: "",
  dark: ".dark",
};

const ChartContext = React.createContext(null);

function useChart() {
  const context = React.useContext(ChartContext);

  if (!context) {
    throw new Error("useChart must be used within a <ChartContainer />");
  }

  return context;
}

const ChartContainer = React.forwardRef(
  ({ id, className, children, config, ...props }, ref) => {
    const uniqueId = React.useId();
    const chartId = `chart-${id || uniqueId.replace(/:/g, "")}`;

    return (
      <ChartContext.Provider value={{ config }}>
        <div
          data-chart={chartId}
          ref={ref}
          className={cn(
            "flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none",
            className
          )}
          {...props}
        >
          <ChartStyle id={chartId} config={config} />
          <RechartsPrimitive.ResponsiveContainer>
            {children}
          </RechartsPrimitive.ResponsiveContainer>
        </div>
      </ChartContext.Provider>
    );
  }
);
ChartContainer.displayName = "Chart";

const ChartStyle = ({ id, config }) => {
  const colorConfig = Object.entries(config).filter(
    ([, config]) => config.theme || config.color
  );

  if (!colorConfig.length) {
    return null;
  }

  return (
    <style
      dangerouslySetInnerHTML={{
        __html: Object.entries(THEMES)
          .map(
            ([theme, prefix]) => `
${prefix} [data-chart=${id}] {
${colorConfig
  .map(([key, itemConfig]) => {
    const color = itemConfig.theme?.[theme] || itemConfig.color;
    return color ? `  --color-${key}: ${color};` : null;
  })
  .join("\n")}
}
`
          )
          .join("\n"),
      }}
    />
  );
};

const ChartTooltip = RechartsPrimitive.Tooltip;

const ChartTooltipContent = React.forwardRef(
  (
    {
      active,
      payload,
      className,
      indicator = "dot",
      hideLabel = false,
      hideIndicator = false,
      label,
      labelFormatter,
      labelClassName,
      formatter,
      color,
      nameKey,
      labelKey,
    },
    ref
  ) => {
    const { config } = useChart();

    const tooltipLabel = React.useMemo(() => {
      if (hideLabel || !payload?.length) {
        return null;
      }

      const [item] = payload;
      const key = `${labelKey || item?.dataKey || item?.name || "value"}`;
      const itemConfig = getPayloadConfigFromPayload(config, item, key);
      const value =
        !labelKey && typeof label === "string"
          ? config[label]?.label || label
          : itemConfig?.label;

      if (labelFormatter) {
        return (
          <div className={cn("font-medium", labelClassName)}>
            {labelFormatter(value, payload)}
          </div>
        );
      }

      if (!value) {
        return null;
      }

      return <div className={cn("font-medium", labelClassName)}>{value}</div>;
    }, [
      label,
      labelFormatter,
      payload,
      hideLabel,
      labelClassName,
      config,
      labelKey,
    ]);

    if (!active || !payload?.length) {
      return null;
    }

    const nestLabel = payload.length === 1 && indicator !== "dot";

    return (
      <div
        ref={ref}
        className={cn(
          "grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl",
          className
        )}
      >
        {!nestLabel ? tooltipLabel : null}
        <div className="grid gap-1.5">
          {payload.map((item, index) => {
            const key = `${nameKey || item.name || item.dataKey || "value"}`;
            const itemConfig = getPayloadConfigFromPayload(config, item, key);
            const indicatorColor = color || item.payload.fill || item.color;

            return (
              <div
                key={item.dataKey}
                className={cn(
                  "flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground",
                  indicator === "dot" && "items-center"
                )}
              >
                {formatter && item?.value !== undefined && item.name ? (
                  formatter(item.value, item.name, item, index, item.payload)
                ) : (
                  <>
                    {itemConfig?.icon ? (
                      <itemConfig.icon />
                    ) : (
                      !hideIndicator && (
                        <div
                          className={cn(
                            "shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]",
                            {
                              "h-2.5 w-2.5": indicator === "dot",
                              "w-1": indicator === "line",
                              "w-0 border-[1.5px] border-dashed bg-transparent":
                                indicator === "dashed",
                              "my-0.5": nestLabel && indicator === "dashed",
                            }
                          )}
                          style={{
                            "--color-bg": indicatorColor,
                            "--color-border": indicatorColor,
                          }}
                        />
                      )
                    )}
                    <div
                      className={cn(
                        "flex flex-1 justify-between leading-none",
                        nestLabel ? "items-end" : "items-center"
                      )}
                    >
                      <div className="grid gap-1.5">
                        {nestLabel ? tooltipLabel : null}
                        <span className="text-muted-foreground">
                          {itemConfig?.label || item.name}
                        </span>
                      </div>
                      {item.value && (
                        <span className="font-mono font-medium tabular-nums text-foreground">
                          {item.value.toLocaleString()}
                        </span>
                      )}
                    </div>
                  </>
                )}
              </div>
            );
          })}
        </div>
      </div>
    );
  }
);
ChartTooltipContent.displayName = "ChartTooltip";

const ChartLegend = RechartsPrimitive.Legend;

const ChartLegendContent = React.forwardRef(
  (
    { className, hideIcon = false, payload, verticalAlign = "bottom", nameKey },
    ref
  ) => {
    const { config } = useChart();

    if (!payload?.length) {
      return null;
    }

    return (
      <div
        ref={ref}
        className={cn(
          "flex items-center justify-center gap-4",
          verticalAlign === "top" ? "pb-3" : "pt-3",
          className
        )}
      >
        {payload.map((item) => {
          const key = `${nameKey || item.dataKey || "value"}`;
          const itemConfig = getPayloadConfigFromPayload(config, item, key);

          return (
            <div
              key={item.value}
              className={cn(
                "flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground"
              )}
            >
              {itemConfig?.icon && !hideIcon ? (
                <itemConfig.icon />
              ) : (
                <div
                  className="h-2 w-2 shrink-0 rounded-[2px]"
                  style={{
                    backgroundColor: item.color,
                  }}
                />
              )}
              {itemConfig?.label}
            </div>
          );
        })}
      </div>
    );
  }
);
ChartLegendContent.displayName = "ChartLegend";

// Helper to extract item config from a payload.
function getPayloadConfigFromPayload(config, payload, key) {
  if (typeof payload !== "object" || payload === null) {
    return undefined;
  }

  const payloadPayload =
    "payload" in payload &&
    typeof payload.payload === "object" &&
    payload.payload !== null
      ? payload.payload
      : undefined;

  let configLabelKey = key;

  if (key in payload && typeof payload[key] === "string") {
    configLabelKey = payload[key];
  } else if (
    payloadPayload &&
    key in payloadPayload &&
    typeof payloadPayload[key] === "string"
  ) {
    configLabelKey = payloadPayload[key];
  }

  return configLabelKey in config ? config[configLabelKey] : config[key];
}

export {
  ChartContainer,
  ChartTooltip,
  ChartTooltipContent,
  ChartLegend,
  ChartLegendContent,
  ChartStyle,
};

```

### src/components/ui/switch.jsx
```jsx
import * as React from "react"
import * as SwitchPrimitives from "@radix-ui/react-switch"

import { cn } from "@/lib/utils"

const Switch = React.forwardRef(({ className, ...props }, ref) => (
  <SwitchPrimitives.Root
    className={cn(
      "peer inline-flex h-5 w-9 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent shadow-sm transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input",
      className
    )}
    {...props}
    ref={ref}>
    <SwitchPrimitives.Thumb
      className={cn(
        "pointer-events-none block h-4 w-4 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-4 data-[state=unchecked]:translate-x-0"
      )} />
  </SwitchPrimitives.Root>
))
Switch.displayName = SwitchPrimitives.Root.displayName

export { Switch }

```

### src/components/ui/card.jsx
```jsx
import * as React from "react"

import { cn } from "@/lib/utils"

const Card = React.forwardRef(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("rounded-xl border bg-card text-card-foreground shadow", className)}
    {...props} />
))
Card.displayName = "Card"

const CardHeader = React.forwardRef(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex flex-col space-y-1.5 p-6", className)}
    {...props} />
))
CardHeader.displayName = "CardHeader"

const CardTitle = React.forwardRef(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("font-semibold leading-none tracking-tight", className)}
    {...props} />
))
CardTitle.displayName = "CardTitle"

const CardDescription = React.forwardRef(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props} />
))
CardDescription.displayName = "CardDescription"

const CardContent = React.forwardRef(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("p-6 pt-0", className)} {...props} />
))
CardContent.displayName = "CardContent"

const CardFooter = React.forwardRef(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex items-center p-6 pt-0", className)}
    {...props} />
))
CardFooter.displayName = "CardFooter"

export { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }

```

### src/components/ui/pagination.jsx
```jsx
import * as React from "react"
import { ChevronLeft, ChevronRight, MoreHorizontal } from "lucide-react"

import { cn } from "@/lib/utils"
import { buttonVariants } from "@/components/ui/button";

const Pagination = ({
  className,
  ...props
}) => (
  <nav
    role="navigation"
    aria-label="pagination"
    className={cn("mx-auto flex w-full justify-center", className)}
    {...props} />
)
Pagination.displayName = "Pagination"

const PaginationContent = React.forwardRef(({ className, ...props }, ref) => (
  <ul
    ref={ref}
    className={cn("flex flex-row items-center gap-1", className)}
    {...props} />
))
PaginationContent.displayName = "PaginationContent"

const PaginationItem = React.forwardRef(({ className, ...props }, ref) => (
  <li ref={ref} className={cn("", className)} {...props} />
))
PaginationItem.displayName = "PaginationItem"

const PaginationLink = ({
  className,
  isActive,
  size = "icon",
  ...props
}) => (
  <a
    aria-current={isActive ? "page" : undefined}
    className={cn(buttonVariants({
      variant: isActive ? "outline" : "ghost",
      size,
    }), className)}
    {...props} />
)
PaginationLink.displayName = "PaginationLink"

const PaginationPrevious = ({
  className,
  ...props
}) => (
  <PaginationLink
    aria-label="Go to previous page"
    size="default"
    className={cn("gap-1 pl-2.5", className)}
    {...props}>
    <ChevronLeft className="h-4 w-4" />
    <span>Previous</span>
  </PaginationLink>
)
PaginationPrevious.displayName = "PaginationPrevious"

const PaginationNext = ({
  className,
  ...props
}) => (
  <PaginationLink
    aria-label="Go to next page"
    size="default"
    className={cn("gap-1 pr-2.5", className)}
    {...props}>
    <span>Next</span>
    <ChevronRight className="h-4 w-4" />
  </PaginationLink>
)
PaginationNext.displayName = "PaginationNext"

const PaginationEllipsis = ({
  className,
  ...props
}) => (
  <span
    aria-hidden
    className={cn("flex h-9 w-9 items-center justify-center", className)}
    {...props}>
    <MoreHorizontal className="h-4 w-4" />
    <span className="sr-only">More pages</span>
  </span>
)
PaginationEllipsis.displayName = "PaginationEllipsis"

export {
  Pagination,
  PaginationContent,
  PaginationLink,
  PaginationItem,
  PaginationPrevious,
  PaginationNext,
  PaginationEllipsis,
}

```

### src/components/ui/navigation-menu.jsx
```jsx
import * as React from "react"
import * as NavigationMenuPrimitive from "@radix-ui/react-navigation-menu"
import { cva } from "class-variance-authority"
import { ChevronDown } from "lucide-react"

import { cn } from "@/lib/utils"

const NavigationMenu = React.forwardRef(({ className, children, ...props }, ref) => (
  <NavigationMenuPrimitive.Root
    ref={ref}
    className={cn(
      "relative z-10 flex max-w-max flex-1 items-center justify-center",
      className
    )}
    {...props}>
    {children}
    <NavigationMenuViewport />
  </NavigationMenuPrimitive.Root>
))
NavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName

const NavigationMenuList = React.forwardRef(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.List
    ref={ref}
    className={cn(
      "group flex flex-1 list-none items-center justify-center space-x-1",
      className
    )}
    {...props} />
))
NavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName

const NavigationMenuItem = NavigationMenuPrimitive.Item

const navigationMenuTriggerStyle = cva(
  "group inline-flex h-9 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent"
)

const NavigationMenuTrigger = React.forwardRef(({ className, children, ...props }, ref) => (
  <NavigationMenuPrimitive.Trigger
    ref={ref}
    className={cn(navigationMenuTriggerStyle(), "group", className)}
    {...props}>
    {children}{" "}
    <ChevronDown
      className="relative top-[1px] ml-1 h-3 w-3 transition duration-300 group-data-[state=open]:rotate-180"
      aria-hidden="true" />
  </NavigationMenuPrimitive.Trigger>
))
NavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName

const NavigationMenuContent = React.forwardRef(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.Content
    ref={ref}
    className={cn(
      "left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto ",
      className
    )}
    {...props} />
))
NavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName

const NavigationMenuLink = NavigationMenuPrimitive.Link

const NavigationMenuViewport = React.forwardRef(({ className, ...props }, ref) => (
  <div className={cn("absolute left-0 top-full flex justify-center")}>
    <NavigationMenuPrimitive.Viewport
      className={cn(
        "origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]",
        className
      )}
      ref={ref}
      {...props} />
  </div>
))
NavigationMenuViewport.displayName =
  NavigationMenuPrimitive.Viewport.displayName

const NavigationMenuIndicator = React.forwardRef(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.Indicator
    ref={ref}
    className={cn(
      "top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in",
      className
    )}
    {...props}>
    <div
      className="relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md" />
  </NavigationMenuPrimitive.Indicator>
))
NavigationMenuIndicator.displayName =
  NavigationMenuPrimitive.Indicator.displayName

export {
  navigationMenuTriggerStyle,
  NavigationMenu,
  NavigationMenuList,
  NavigationMenuItem,
  NavigationMenuContent,
  NavigationMenuTrigger,
  NavigationMenuLink,
  NavigationMenuIndicator,
  NavigationMenuViewport,
}

```

### src/components/ui/radio-group.jsx
```jsx
import * as React from "react"
import * as RadioGroupPrimitive from "@radix-ui/react-radio-group"
import { Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const RadioGroup = React.forwardRef(({ className, ...props }, ref) => {
  return (<RadioGroupPrimitive.Root className={cn("grid gap-2", className)} {...props} ref={ref} />);
})
RadioGroup.displayName = RadioGroupPrimitive.Root.displayName

const RadioGroupItem = React.forwardRef(({ className, ...props }, ref) => {
  return (
    <RadioGroupPrimitive.Item
      ref={ref}
      className={cn(
        "aspect-square h-4 w-4 rounded-full border border-primary text-primary shadow focus:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50",
        className
      )}
      {...props}>
      <RadioGroupPrimitive.Indicator className="flex items-center justify-center">
        <Circle className="h-3.5 w-3.5 fill-primary" />
      </RadioGroupPrimitive.Indicator>
    </RadioGroupPrimitive.Item>
  );
})
RadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName

export { RadioGroup, RadioGroupItem }

```

### src/components/ui/calendar.jsx
```jsx
import * as React from "react"
import { ChevronLeft, ChevronRight } from "lucide-react"
import { DayPicker } from "react-day-picker"

import { cn } from "@/lib/utils"
import { buttonVariants } from "@/components/ui/button"

function Calendar({
  className,
  classNames,
  showOutsideDays = true,
  ...props
}) {
  return (
    <DayPicker
      showOutsideDays={showOutsideDays}
      className={cn("p-3", className)}
      classNames={{
        months: "flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0",
        month: "space-y-4",
        caption: "flex justify-center pt-1 relative items-center",
        caption_label: "text-sm font-medium",
        nav: "space-x-1 flex items-center",
        nav_button: cn(
          buttonVariants({ variant: "outline" }),
          "h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100"
        ),
        nav_button_previous: "absolute left-1",
        nav_button_next: "absolute right-1",
        table: "w-full border-collapse space-y-1",
        head_row: "flex",
        head_cell:
          "text-muted-foreground rounded-md w-8 font-normal text-[0.8rem]",
        row: "flex w-full mt-2",
        cell: cn(
          "relative p-0 text-center text-sm focus-within:relative focus-within:z-20 [&:has([aria-selected])]:bg-accent [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected].day-range-end)]:rounded-r-md",
          props.mode === "range"
            ? "[&:has(>.day-range-end)]:rounded-r-md [&:has(>.day-range-start)]:rounded-l-md first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md"
            : "[&:has([aria-selected])]:rounded-md"
        ),
        day: cn(
          buttonVariants({ variant: "ghost" }),
          "h-8 w-8 p-0 font-normal aria-selected:opacity-100"
        ),
        day_range_start: "day-range-start",
        day_range_end: "day-range-end",
        day_selected:
          "bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground",
        day_today: "bg-accent text-accent-foreground",
        day_outside:
          "day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground",
        day_disabled: "text-muted-foreground opacity-50",
        day_range_middle:
          "aria-selected:bg-accent aria-selected:text-accent-foreground",
        day_hidden: "invisible",
        ...classNames,
      }}
      components={{
        IconLeft: ({ className, ...props }) => (
          <ChevronLeft className={cn("h-4 w-4", className)} {...props} />
        ),
        IconRight: ({ className, ...props }) => (
          <ChevronRight className={cn("h-4 w-4", className)} {...props} />
        ),
      }}
      {...props} />
  );
}
Calendar.displayName = "Calendar"

export { Calendar }

```

### src/components/ui/collapsible.jsx
```jsx
"use client"

import * as CollapsiblePrimitive from "@radix-ui/react-collapsible"

const Collapsible = CollapsiblePrimitive.Root

const CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger

const CollapsibleContent = CollapsiblePrimitive.CollapsibleContent

export { Collapsible, CollapsibleTrigger, CollapsibleContent }

```

### src/components/ui/popover.jsx
```jsx
import * as React from "react"
import * as PopoverPrimitive from "@radix-ui/react-popover"

import { cn } from "@/lib/utils"

const Popover = PopoverPrimitive.Root

const PopoverTrigger = PopoverPrimitive.Trigger

const PopoverAnchor = PopoverPrimitive.Anchor

const PopoverContent = React.forwardRef(({ className, align = "center", sideOffset = 4, ...props }, ref) => (
  <PopoverPrimitive.Portal>
    <PopoverPrimitive.Content
      ref={ref}
      align={align}
      sideOffset={sideOffset}
      className={cn(
        "z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]",
        className
      )}
      {...props} />
  </PopoverPrimitive.Portal>
))
PopoverContent.displayName = PopoverPrimitive.Content.displayName

export { Popover, PopoverTrigger, PopoverContent, PopoverAnchor }

```

### src/components/ui/carousel.jsx
```jsx
import * as React from "react";
import useEmblaCarousel from "embla-carousel-react";
import { ArrowLeft, ArrowRight } from "lucide-react";

import { cn } from "@/lib/utils";
import { Button } from "@/components/ui/button";

const CarouselContext = React.createContext(null);

function useCarousel() {
  const context = React.useContext(CarouselContext);

  if (!context) {
    throw new Error("useCarousel must be used within a <Carousel />");
  }

  return context;
}

const Carousel = React.forwardRef(
  (
    {
      orientation = "horizontal",
      opts,
      setApi,
      plugins,
      className,
      children,
      ...props
    },
    ref
  ) => {
    const [carouselRef, api] = useEmblaCarousel(
      {
        ...opts,
        axis: orientation === "horizontal" ? "x" : "y",
      },
      plugins
    );
    const [canScrollPrev, setCanScrollPrev] = React.useState(false);
    const [canScrollNext, setCanScrollNext] = React.useState(false);

    const onSelect = React.useCallback((api) => {
      if (!api) {
        return;
      }

      setCanScrollPrev(api.canScrollPrev());
      setCanScrollNext(api.canScrollNext());
    }, []);

    const scrollPrev = React.useCallback(() => {
      api?.scrollPrev();
    }, [api]);

    const scrollNext = React.useCallback(() => {
      api?.scrollNext();
    }, [api]);

    const handleKeyDown = React.useCallback(
      (event) => {
        if (event.key === "ArrowLeft") {
          event.preventDefault();
          scrollPrev();
        } else if (event.key === "ArrowRight") {
          event.preventDefault();
          scrollNext();
        }
      },
      [scrollPrev, scrollNext]
    );

    React.useEffect(() => {
      if (!api || !setApi) {
        return;
      }

      setApi(api);
    }, [api, setApi]);

    React.useEffect(() => {
      if (!api) {
        return;
      }

      onSelect(api);
      api.on("reInit", onSelect);
      api.on("select", onSelect);

      return () => {
        api?.off("select", onSelect);
      };
    }, [api, onSelect]);

    return (
      <CarouselContext.Provider
        value={{
          carouselRef,
          api: api,
          opts,
          orientation:
            orientation || (opts?.axis === "y" ? "vertical" : "horizontal"),
          scrollPrev,
          scrollNext,
          canScrollPrev,
          canScrollNext,
        }}
      >
        <div
          ref={ref}
          onKeyDownCapture={handleKeyDown}
          className={cn("relative", className)}
          role="region"
          aria-roledescription="carousel"
          {...props}
        >
          {children}
        </div>
      </CarouselContext.Provider>
    );
  }
);
Carousel.displayName = "Carousel";

const CarouselContent = React.forwardRef(({ className, ...props }, ref) => {
  const { carouselRef, orientation } = useCarousel();

  return (
    <div ref={carouselRef} className="overflow-hidden">
      <div
        ref={ref}
        className={cn(
          "flex",
          orientation === "horizontal" ? "-ml-4" : "-mt-4 flex-col",
          className
        )}
        {...props}
      />
    </div>
  );
});
CarouselContent.displayName = "CarouselContent";

const CarouselItem = React.forwardRef(({ className, ...props }, ref) => {
  const { orientation } = useCarousel();

  return (
    <div
      ref={ref}
      role="group"
      aria-roledescription="slide"
      className={cn(
        "min-w-0 shrink-0 grow-0 basis-full",
        orientation === "horizontal" ? "pl-4" : "pt-4",
        className
      )}
      {...props}
    />
  );
});
CarouselItem.displayName = "CarouselItem";

const CarouselPrevious = React.forwardRef(
  ({ className, variant = "outline", size = "icon", ...props }, ref) => {
    const { orientation, scrollPrev, canScrollPrev } = useCarousel();

    return (
      <Button
        ref={ref}
        variant={variant}
        size={size}
        className={cn(
          "absolute  h-8 w-8 rounded-full",
          orientation === "horizontal"
            ? "-left-12 top-1/2 -translate-y-1/2"
            : "-top-12 left-1/2 -translate-x-1/2 rotate-90",
          className
        )}
        disabled={!canScrollPrev}
        onClick={scrollPrev}
        {...props}
      >
        <ArrowLeft className="h-4 w-4" />
        <span className="sr-only">Previous slide</span>
      </Button>
    );
  }
);
CarouselPrevious.displayName = "CarouselPrevious";

const CarouselNext = React.forwardRef(
  ({ className, variant = "outline", size = "icon", ...props }, ref) => {
    const { orientation, scrollNext, canScrollNext } = useCarousel();

    return (
      <Button
        ref={ref}
        variant={variant}
        size={size}
        className={cn(
          "absolute h-8 w-8 rounded-full",
          orientation === "horizontal"
            ? "-right-12 top-1/2 -translate-y-1/2"
            : "-bottom-12 left-1/2 -translate-x-1/2 rotate-90",
          className
        )}
        disabled={!canScrollNext}
        onClick={scrollNext}
        {...props}
      >
        <ArrowRight className="h-4 w-4" />
        <span className="sr-only">Next slide</span>
      </Button>
    );
  }
);
CarouselNext.displayName = "CarouselNext";

export {
  Carousel,
  CarouselContent,
  CarouselItem,
  CarouselPrevious,
  CarouselNext,
};

```

### src/components/ui/menubar.jsx
```jsx
"use client"

import * as React from "react"
import * as MenubarPrimitive from "@radix-ui/react-menubar"
import { Check, ChevronRight, Circle } from "lucide-react"

import { cn } from "@/lib/utils"

function MenubarMenu({
  ...props
}) {
  return <MenubarPrimitive.Menu {...props} />;
}

function MenubarGroup({
  ...props
}) {
  return <MenubarPrimitive.Group {...props} />;
}

function MenubarPortal({
  ...props
}) {
  return <MenubarPrimitive.Portal {...props} />;
}

function MenubarRadioGroup({
  ...props
}) {
  return <MenubarPrimitive.RadioGroup {...props} />;
}

function MenubarSub({
  ...props
}) {
  return <MenubarPrimitive.Sub data-slot="menubar-sub" {...props} />;
}

const Menubar = React.forwardRef(({ className, ...props }, ref) => (
  <MenubarPrimitive.Root
    ref={ref}
    className={cn(
      "flex h-9 items-center space-x-1 rounded-md border bg-background p-1 shadow-sm",
      className
    )}
    {...props} />
))
Menubar.displayName = MenubarPrimitive.Root.displayName

const MenubarTrigger = React.forwardRef(({ className, ...props }, ref) => (
  <MenubarPrimitive.Trigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-3 py-1 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground",
      className
    )}
    {...props} />
))
MenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName

const MenubarSubTrigger = React.forwardRef(({ className, inset, children, ...props }, ref) => (
  <MenubarPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground",
      inset && "pl-8",
      className
    )}
    {...props}>
    {children}
    <ChevronRight className="ml-auto h-4 w-4" />
  </MenubarPrimitive.SubTrigger>
))
MenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName

const MenubarSubContent = React.forwardRef(({ className, ...props }, ref) => (
  <MenubarPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]",
      className
    )}
    {...props} />
))
MenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName

const MenubarContent = React.forwardRef((
  { className, align = "start", alignOffset = -4, sideOffset = 8, ...props },
  ref
) => (
  <MenubarPrimitive.Portal>
    <MenubarPrimitive.Content
      ref={ref}
      align={align}
      alignOffset={alignOffset}
      sideOffset={sideOffset}
      className={cn(
        "z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]",
        className
      )}
      {...props} />
  </MenubarPrimitive.Portal>
))
MenubarContent.displayName = MenubarPrimitive.Content.displayName

const MenubarItem = React.forwardRef(({ className, inset, ...props }, ref) => (
  <MenubarPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      inset && "pl-8",
      className
    )}
    {...props} />
))
MenubarItem.displayName = MenubarPrimitive.Item.displayName

const MenubarCheckboxItem = React.forwardRef(({ className, children, checked, ...props }, ref) => (
  <MenubarPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    checked={checked}
    {...props}>
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <MenubarPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </MenubarPrimitive.ItemIndicator>
    </span>
    {children}
  </MenubarPrimitive.CheckboxItem>
))
MenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName

const MenubarRadioItem = React.forwardRef(({ className, children, ...props }, ref) => (
  <MenubarPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}>
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <MenubarPrimitive.ItemIndicator>
        <Circle className="h-4 w-4 fill-current" />
      </MenubarPrimitive.ItemIndicator>
    </span>
    {children}
  </MenubarPrimitive.RadioItem>
))
MenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName

const MenubarLabel = React.forwardRef(({ className, inset, ...props }, ref) => (
  <MenubarPrimitive.Label
    ref={ref}
    className={cn("px-2 py-1.5 text-sm font-semibold", inset && "pl-8", className)}
    {...props} />
))
MenubarLabel.displayName = MenubarPrimitive.Label.displayName

const MenubarSeparator = React.forwardRef(({ className, ...props }, ref) => (
  <MenubarPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props} />
))
MenubarSeparator.displayName = MenubarPrimitive.Separator.displayName

const MenubarShortcut = ({
  className,
  ...props
}) => {
  return (
    <span
      className={cn("ml-auto text-xs tracking-widest text-muted-foreground", className)}
      {...props} />
  );
}
MenubarShortcut.displayname = "MenubarShortcut"

export {
  Menubar,
  MenubarMenu,
  MenubarTrigger,
  MenubarContent,
  MenubarItem,
  MenubarSeparator,
  MenubarLabel,
  MenubarCheckboxItem,
  MenubarRadioGroup,
  MenubarRadioItem,
  MenubarPortal,
  MenubarSubContent,
  MenubarSubTrigger,
  MenubarGroup,
  MenubarSub,
  MenubarShortcut,
}

```

### src/components/ui/select.jsx
```jsx
"use client"

import * as React from "react"
import * as SelectPrimitive from "@radix-ui/react-select"
import { Check, ChevronDown, ChevronUp } from "lucide-react"

import { cn } from "@/lib/utils"

const Select = SelectPrimitive.Root

const SelectGroup = SelectPrimitive.Group

const SelectValue = SelectPrimitive.Value

const SelectTrigger = React.forwardRef(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Trigger
    ref={ref}
    className={cn(
      "flex h-9 w-full items-center justify-between whitespace-nowrap rounded-md border border-input bg-transparent px-3 py-2 text-sm shadow-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-1 focus:ring-ring disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1",
      className
    )}
    {...props}>
    {children}
    <SelectPrimitive.Icon asChild>
      <ChevronDown className="h-4 w-4 opacity-50" />
    </SelectPrimitive.Icon>
  </SelectPrimitive.Trigger>
))
SelectTrigger.displayName = SelectPrimitive.Trigger.displayName

const SelectScrollUpButton = React.forwardRef(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollUpButton
    ref={ref}
    className={cn("flex cursor-default items-center justify-center py-1", className)}
    {...props}>
    <ChevronUp className="h-4 w-4" />
  </SelectPrimitive.ScrollUpButton>
))
SelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName

const SelectScrollDownButton = React.forwardRef(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollDownButton
    ref={ref}
    className={cn("flex cursor-default items-center justify-center py-1", className)}
    {...props}>
    <ChevronDown className="h-4 w-4" />
  </SelectPrimitive.ScrollDownButton>
))
SelectScrollDownButton.displayName =
  SelectPrimitive.ScrollDownButton.displayName

const SelectContent = React.forwardRef(({ className, children, position = "popper", ...props }, ref) => (
  <SelectPrimitive.Portal>
    <SelectPrimitive.Content
      ref={ref}
      className={cn(
        "relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]",
        position === "popper" &&
          "data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1",
        className
      )}
      position={position}
      {...props}>
      <SelectScrollUpButton />
      <SelectPrimitive.Viewport
        className={cn("p-1", position === "popper" &&
          "h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]")}>
        {children}
      </SelectPrimitive.Viewport>
      <SelectScrollDownButton />
    </SelectPrimitive.Content>
  </SelectPrimitive.Portal>
))
SelectContent.displayName = SelectPrimitive.Content.displayName

const SelectLabel = React.forwardRef(({ className, ...props }, ref) => (
  <SelectPrimitive.Label
    ref={ref}
    className={cn("px-2 py-1.5 text-sm font-semibold", className)}
    {...props} />
))
SelectLabel.displayName = SelectPrimitive.Label.displayName

const SelectItem = React.forwardRef(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-2 pr-8 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}>
    <span className="absolute right-2 flex h-3.5 w-3.5 items-center justify-center">
      <SelectPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </SelectPrimitive.ItemIndicator>
    </span>
    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>
  </SelectPrimitive.Item>
))
SelectItem.displayName = SelectPrimitive.Item.displayName

const SelectSeparator = React.forwardRef(({ className, ...props }, ref) => (
  <SelectPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props} />
))
SelectSeparator.displayName = SelectPrimitive.Separator.displayName

export {
  Select,
  SelectGroup,
  SelectValue,
  SelectTrigger,
  SelectContent,
  SelectLabel,
  SelectItem,
  SelectSeparator,
  SelectScrollUpButton,
  SelectScrollDownButton,
}

```

### src/components/ui/command.jsx
```jsx
import * as React from "react"
import { Command as CommandPrimitive } from "cmdk"
import { Search } from "lucide-react"

import { cn } from "@/lib/utils"
import { Dialog, DialogContent } from "@/components/ui/dialog"

const Command = React.forwardRef(({ className, ...props }, ref) => (
  <CommandPrimitive
    ref={ref}
    className={cn(
      "flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground",
      className
    )}
    {...props} />
))
Command.displayName = CommandPrimitive.displayName

const CommandDialog = ({
  children,
  ...props
}) => {
  return (
    <Dialog {...props}>
      <DialogContent className="overflow-hidden p-0">
        <Command
          className="[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5">
          {children}
        </Command>
      </DialogContent>
    </Dialog>
  );
}

const CommandInput = React.forwardRef(({ className, ...props }, ref) => (
  <div className="flex items-center border-b px-3" cmdk-input-wrapper="">
    <Search className="mr-2 h-4 w-4 shrink-0 opacity-50" />
    <CommandPrimitive.Input
      ref={ref}
      className={cn(
        "flex h-10 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50",
        className
      )}
      {...props} />
  </div>
))

CommandInput.displayName = CommandPrimitive.Input.displayName

const CommandList = React.forwardRef(({ className, ...props }, ref) => (
  <CommandPrimitive.List
    ref={ref}
    className={cn("max-h-[300px] overflow-y-auto overflow-x-hidden", className)}
    {...props} />
))

CommandList.displayName = CommandPrimitive.List.displayName

const CommandEmpty = React.forwardRef((props, ref) => (
  <CommandPrimitive.Empty ref={ref} className="py-6 text-center text-sm" {...props} />
))

CommandEmpty.displayName = CommandPrimitive.Empty.displayName

const CommandGroup = React.forwardRef(({ className, ...props }, ref) => (
  <CommandPrimitive.Group
    ref={ref}
    className={cn(
      "overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground",
      className
    )}
    {...props} />
))

CommandGroup.displayName = CommandPrimitive.Group.displayName

const CommandSeparator = React.forwardRef(({ className, ...props }, ref) => (
  <CommandPrimitive.Separator ref={ref} className={cn("-mx-1 h-px bg-border", className)} {...props} />
))
CommandSeparator.displayName = CommandPrimitive.Separator.displayName

const CommandItem = React.forwardRef(({ className, ...props }, ref) => (
  <CommandPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected=true]:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
      className
    )}
    {...props} />
))

CommandItem.displayName = CommandPrimitive.Item.displayName

const CommandShortcut = ({
  className,
  ...props
}) => {
  return (
    <span
      className={cn("ml-auto text-xs tracking-widest text-muted-foreground", className)}
      {...props} />
  );
}
CommandShortcut.displayName = "CommandShortcut"

export {
  Command,
  CommandDialog,
  CommandInput,
  CommandList,
  CommandEmpty,
  CommandGroup,
  CommandItem,
  CommandShortcut,
  CommandSeparator,
}

```

### src/components/ui/skeleton.jsx
```jsx
import { cn } from "@/lib/utils"

function Skeleton({
  className,
  ...props
}) {
  return (
    <div
      className={cn("animate-pulse rounded-md bg-primary/10", className)}
      {...props} />
  );
}

export { Skeleton }

```

### src/components/ui/toggle-group.jsx
```jsx
"use client";
import * as React from "react"
import * as ToggleGroupPrimitive from "@radix-ui/react-toggle-group"

import { cn } from "@/lib/utils"
import { toggleVariants } from "@/components/ui/toggle"

const ToggleGroupContext = React.createContext({
  size: "default",
  variant: "default",
})

const ToggleGroup = React.forwardRef(({ className, variant, size, children, ...props }, ref) => (
  <ToggleGroupPrimitive.Root
    ref={ref}
    className={cn("flex items-center justify-center gap-1", className)}
    {...props}>
    <ToggleGroupContext.Provider value={{ variant, size }}>
      {children}
    </ToggleGroupContext.Provider>
  </ToggleGroupPrimitive.Root>
))

ToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName

const ToggleGroupItem = React.forwardRef(({ className, children, variant, size, ...props }, ref) => {
  const context = React.useContext(ToggleGroupContext)

  return (
    <ToggleGroupPrimitive.Item
      ref={ref}
      className={cn(toggleVariants({
        variant: context.variant || variant,
        size: context.size || size,
      }), className)}
      {...props}>
      {children}
    </ToggleGroupPrimitive.Item>
  );
})

ToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName

export { ToggleGroup, ToggleGroupItem }

```

### src/components/ui/form.jsx
```jsx
"use client";
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { Controller, FormProvider, useFormContext } from "react-hook-form";

import { cn } from "@/lib/utils"
import { Label } from "@/components/ui/label"

const Form = FormProvider

const FormFieldContext = React.createContext({})

const FormField = (
  {
    ...props
  }
) => {
  return (
    <FormFieldContext.Provider value={{ name: props.name }}>
      <Controller {...props} />
    </FormFieldContext.Provider>
  );
}

const useFormField = () => {
  const fieldContext = React.useContext(FormFieldContext)
  const itemContext = React.useContext(FormItemContext)
  const { getFieldState, formState } = useFormContext()

  const fieldState = getFieldState(fieldContext.name, formState)

  if (!fieldContext) {
    throw new Error("useFormField should be used within <FormField>")
  }

  const { id } = itemContext

  return {
    id,
    name: fieldContext.name,
    formItemId: `${id}-form-item`,
    formDescriptionId: `${id}-form-item-description`,
    formMessageId: `${id}-form-item-message`,
    ...fieldState,
  }
}

const FormItemContext = React.createContext({})

const FormItem = React.forwardRef(({ className, ...props }, ref) => {
  const id = React.useId()

  return (
    <FormItemContext.Provider value={{ id }}>
      <div ref={ref} className={cn("space-y-2", className)} {...props} />
    </FormItemContext.Provider>
  );
})
FormItem.displayName = "FormItem"

const FormLabel = React.forwardRef(({ className, ...props }, ref) => {
  const { error, formItemId } = useFormField()

  return (
    <Label
      ref={ref}
      className={cn(error && "text-destructive", className)}
      htmlFor={formItemId}
      {...props} />
  );
})
FormLabel.displayName = "FormLabel"

const FormControl = React.forwardRef(({ ...props }, ref) => {
  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()

  return (
    <Slot
      ref={ref}
      id={formItemId}
      aria-describedby={
        !error
          ? `${formDescriptionId}`
          : `${formDescriptionId} ${formMessageId}`
      }
      aria-invalid={!!error}
      {...props} />
  );
})
FormControl.displayName = "FormControl"

const FormDescription = React.forwardRef(({ className, ...props }, ref) => {
  const { formDescriptionId } = useFormField()

  return (
    <p
      ref={ref}
      id={formDescriptionId}
      className={cn("text-[0.8rem] text-muted-foreground", className)}
      {...props} />
  );
})
FormDescription.displayName = "FormDescription"

const FormMessage = React.forwardRef(({ className, children, ...props }, ref) => {
  const { error, formMessageId } = useFormField()
  const body = error ? String(error?.message ?? "") : children

  if (!body) {
    return null
  }

  return (
    <p
      ref={ref}
      id={formMessageId}
      className={cn("text-[0.8rem] font-medium text-destructive", className)}
      {...props}>
      {body}
    </p>
  );
})
FormMessage.displayName = "FormMessage"

export {
  useFormField,
  Form,
  FormItem,
  FormLabel,
  FormControl,
  FormDescription,
  FormMessage,
  FormField,
}

```

### src/components/ui/alert-dialog.jsx
```jsx
import * as React from "react"
import * as AlertDialogPrimitive from "@radix-ui/react-alert-dialog"

import { cn } from "@/lib/utils"
import { buttonVariants } from "@/components/ui/button"

const AlertDialog = AlertDialogPrimitive.Root

const AlertDialogTrigger = AlertDialogPrimitive.Trigger

const AlertDialogPortal = AlertDialogPrimitive.Portal

const AlertDialogOverlay = React.forwardRef(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Overlay
    className={cn(
      "fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
    ref={ref} />
))
AlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName

const AlertDialogContent = React.forwardRef(({ className, ...props }, ref) => (
  <AlertDialogPortal>
    <AlertDialogOverlay />
    <AlertDialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className
      )}
      {...props} />
  </AlertDialogPortal>
))
AlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName

const AlertDialogHeader = ({
  className,
  ...props
}) => (
  <div
    className={cn("flex flex-col space-y-2 text-center sm:text-left", className)}
    {...props} />
)
AlertDialogHeader.displayName = "AlertDialogHeader"

const AlertDialogFooter = ({
  className,
  ...props
}) => (
  <div
    className={cn("flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2", className)}
    {...props} />
)
AlertDialogFooter.displayName = "AlertDialogFooter"

const AlertDialogTitle = React.forwardRef(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Title ref={ref} className={cn("text-lg font-semibold", className)} {...props} />
))
AlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName

const AlertDialogDescription = React.forwardRef(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props} />
))
AlertDialogDescription.displayName =
  AlertDialogPrimitive.Description.displayName

const AlertDialogAction = React.forwardRef(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Action ref={ref} className={cn(buttonVariants(), className)} {...props} />
))
AlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName

const AlertDialogCancel = React.forwardRef(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Cancel
    ref={ref}
    className={cn(buttonVariants({ variant: "outline" }), "mt-2 sm:mt-0", className)}
    {...props} />
))
AlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName

export {
  AlertDialog,
  AlertDialogPortal,
  AlertDialogOverlay,
  AlertDialogTrigger,
  AlertDialogContent,
  AlertDialogHeader,
  AlertDialogFooter,
  AlertDialogTitle,
  AlertDialogDescription,
  AlertDialogAction,
  AlertDialogCancel,
}

```

### src/components/ui/accordion.jsx
```jsx
import * as React from "react"
import * as AccordionPrimitive from "@radix-ui/react-accordion"
import { ChevronDown } from "lucide-react"

import { cn } from "@/lib/utils"

const Accordion = AccordionPrimitive.Root

const AccordionItem = React.forwardRef(({ className, ...props }, ref) => (
  <AccordionPrimitive.Item ref={ref} className={cn("border-b", className)} {...props} />
))
AccordionItem.displayName = "AccordionItem"

const AccordionTrigger = React.forwardRef(({ className, children, ...props }, ref) => (
  <AccordionPrimitive.Header className="flex">
    <AccordionPrimitive.Trigger
      ref={ref}
      className={cn(
        "flex flex-1 items-center justify-between py-4 text-sm font-medium transition-all hover:underline text-left [&[data-state=open]>svg]:rotate-180",
        className
      )}
      {...props}>
      {children}
      <ChevronDown
        className="h-4 w-4 shrink-0 text-muted-foreground transition-transform duration-200" />
    </AccordionPrimitive.Trigger>
  </AccordionPrimitive.Header>
))
AccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName

const AccordionContent = React.forwardRef(({ className, children, ...props }, ref) => (
  <AccordionPrimitive.Content
    ref={ref}
    className="overflow-hidden text-sm data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down"
    {...props}>
    <div className={cn("pb-4 pt-0", className)}>{children}</div>
  </AccordionPrimitive.Content>
))
AccordionContent.displayName = AccordionPrimitive.Content.displayName

export { Accordion, AccordionItem, AccordionTrigger, AccordionContent }

```

### src/components/ui/aspect-ratio.jsx
```jsx
import * as AspectRatioPrimitive from "@radix-ui/react-aspect-ratio"

const AspectRatio = AspectRatioPrimitive.Root

export { AspectRatio }

```

### src/components/ui/resizable.jsx
```jsx
"use client"

import { GripVertical } from "lucide-react"
import * as ResizablePrimitive from "react-resizable-panels"

import { cn } from "@/lib/utils"

const ResizablePanelGroup = ({
  className,
  ...props
}) => (
  <ResizablePrimitive.PanelGroup
    className={cn(
      "flex h-full w-full data-[panel-group-direction=vertical]:flex-col",
      className
    )}
    {...props} />
)

const ResizablePanel = ResizablePrimitive.Panel

const ResizableHandle = ({
  withHandle,
  className,
  ...props
}) => (
  <ResizablePrimitive.PanelResizeHandle
    className={cn(
      "relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90",
      className
    )}
    {...props}>
    {withHandle && (
      <div
        className="z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border">
        <GripVertical className="h-2.5 w-2.5" />
      </div>
    )}
  </ResizablePrimitive.PanelResizeHandle>
)

export { ResizablePanelGroup, ResizablePanel, ResizableHandle }

```

### src/components/ui/slider.jsx
```jsx
import * as React from "react"
import * as SliderPrimitive from "@radix-ui/react-slider"

import { cn } from "@/lib/utils"

const Slider = React.forwardRef(({ className, ...props }, ref) => (
  <SliderPrimitive.Root
    ref={ref}
    className={cn("relative flex w-full touch-none select-none items-center", className)}
    {...props}>
    <SliderPrimitive.Track
      className="relative h-1.5 w-full grow overflow-hidden rounded-full bg-primary/20">
      <SliderPrimitive.Range className="absolute h-full bg-primary" />
    </SliderPrimitive.Track>
    <SliderPrimitive.Thumb
      className="block h-4 w-4 rounded-full border border-primary/50 bg-background shadow transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50" />
  </SliderPrimitive.Root>
))
Slider.displayName = SliderPrimitive.Root.displayName

export { Slider }

```

### src/components/CampaignList/CampaignList.jsx
```jsx
import { useCharityDonation } from "@/hooks/useCharityDonation";
import React, { useEffect, useState } from "react";
import axios from "axios";

const formatNumber = (value) => {
  return parseFloat(value).toLocaleString("vi-VN");
};

const CampaignList = () => {
  const { getCampaign, getCampaignCount, donateETH } = useCharityDonation();
  const [campaigns, setCampaigns] = useState([]);
  const [exchangeRate, setExchangeRate] = useState(0);

  const formatCampaign = (data, id) => ({
    id,
    creator: data[0],
    title: data[1],
    tokenAddress: data[2],
    goal: {
      wei: data[3].toString(),
      eth: formatNumber(Number(data[3]) / 1e18),
      vnd: formatNumber((Number(data[3]) / 1e18) * exchangeRate),
    },
    totalDonated: {
      wei: data[5].toString(),
      eth: formatNumber(Number(data[5]) / 1e18),
      vnd: formatNumber((Number(data[5]) / 1e18) * exchangeRate),
      progress: Math.min((Number(data[5]) / Number(data[3])) * 100, 100),
    },
    deadline: data[4],
    isClosed: data[6],
    isNoLimit: data[7],
  });

  useEffect(() => {
    const fetchExchangeRate = async () => {
      try {
        const response = await axios.get(
          "https://api.coingecko.com/api/v3/simple/price?ids=ethereum&vs_currencies=vnd"
        );
        setExchangeRate(response.data.ethereum.vnd);
      } catch (error) {
        console.error("Error fetching exchange rate:", error);
      }
    };

    const fetchCampaigns = async () => {
      await fetchExchangeRate();
      const count = await getCampaignCount();
      const list = [];
      for (let i = 0; i < count; i++) {
        const campaign = await getCampaign(i);
        list.push(formatCampaign(campaign, i));
      }
      setCampaigns(list);
    };
    fetchCampaigns();
  }, []);

  return (
    <div>
      <h1>Campaign List</h1>
      {campaigns.map((c) => (
        <div key={c.id}>
          <h2>{c.title}</h2>
          <p>
            Goal: {c.goal.eth} ETH (≈ {c.goal.vnd} VND)
          </p>
          <p>
            Progress: {c.totalDonated.eth} ETH / {c.goal.eth} ETH (
            {c.totalDonated.progress.toFixed(2)}%)
          </p>
          <div
            style={{
              width: "100%",
              height: "20px",
              backgroundColor: "#eee",
              borderRadius: "10px",
              overflow: "hidden",
            }}
          >
            <div
              style={{
                width: `${c.totalDonated.progress}%`,
                height: "100%",
                backgroundColor: "#4CAF50",
                transition: "width 0.5s ease-in-out",
              }}
            />
          </div>
          <button onClick={() => donateETH(c.id, 0.004)}>
            Donate 0.01 ETH
          </button>
        </div>
      ))}
    </div>
  );
};

export default CampaignList;

```

### src/components/CircleProgress/CircleProgress.jsx
```jsx
import React from "react";

const CircleProgress = ({ progress }) => {
  const radius = 25; // Reduced from 42
  const center = 30; // Reduced from 50

  return (
    <svg className="w-full h-full" viewBox="0 0 60 60">
      {" "}
      {/* Reduced from 100x100 */}
      {/* Background circle */}
      <circle
        className="text-muted stroke-current"
        strokeWidth="6" // Reduced from 8
        fill="transparent"
        r={radius}
        cx={center}
        cy={center}
      />
      {/* Progress circle */}
      <circle
        className="text-primary stroke-current"
        strokeWidth="6" // Reduced from 8
        strokeLinecap="round"
        fill="transparent"
        r={radius}
        cx={center}
        cy={center}
        style={{
          strokeDasharray: `${2 * Math.PI * radius}`,
          strokeDashoffset: `${2 * Math.PI * radius * (1 - progress / 100)}`,
          transform: "rotate(-90deg)",
          transformOrigin: "50% 50%",
        }}
      />
      {/* Percentage text */}
      <text
        x={center}
        y={center}
        className="text-xs font-bold" // Reduced from text-base
        dominantBaseline="middle"
        textAnchor="middle"
        fill="currentColor"
      >
        {Math.round(progress)}%
      </text>
    </svg>
  );
};

export default CircleProgress;

```

### src/components/Footer/Footer.jsx
```jsx
import React from "react";
import { Facebook, Twitter, Instagram, Linkedin } from "lucide-react";

const Footer = () => {
  return (
    <footer className="bg-gray-900 text-gray-300 px-6 md:px-0">
      <div className="container mx-auto grid grid-cols-2 md:grid-cols-4 gap-8 py-12">
        <div>
          <h3 className="text-xl font-bold mb-4 text-white">Donate</h3>
          <ul className="space-y-2">
            <li>
              <a href="#" className="hover:text-white transition">
                Categories
              </a>
            </li>
            <li>
              <a href="#" className="hover:text-white transition">
                Crisis Relief
              </a>
            </li>
            <li>
              <a href="#" className="hover:text-white transition">
                Social Funds
              </a>
            </li>
            <li>
              <a href="#" className="hover:text-white transition">
                Supporter Space
              </a>
            </li>
          </ul>
        </div>

        <div>
          <h3 className="text-xl font-bold mb-4 text-white">Fundraise</h3>
          <ul className="space-y-2">
            <li>
              <a href="#" className="hover:text-white transition">
                How To
              </a>
            </li>
            <li>
              <a href="#" className="hover:text-white transition">
                Fundraising
              </a>
            </li>
            <li>
              <a href="#" className="hover:text-white transition">
                Team
              </a>
            </li>
            <li>
              <a href="#" className="hover:text-white transition">
                Blog
              </a>
            </li>
            <li>
              <a href="#" className="hover:text-white transition">
                Charity
              </a>
            </li>
            <li>
              <a href="#" className="hover:text-white transition">
                Sign Up
              </a>
            </li>
          </ul>
        </div>

        <div>
          <h3 className="text-xl font-bold mb-4 text-white">About</h3>
          <ul className="space-y-2">
            <li>
              <a href="#" className="hover:text-white transition">
                How It Works
              </a>
            </li>
            <li>
              <a href="#" className="hover:text-white transition">
                Blog
              </a>
            </li>
            <li>
              <a href="#" className="hover:text-white transition">
                Charity
              </a>
            </li>
            <li>
              <a href="#" className="hover:text-white transition">
                Sign Up
              </a>
            </li>
            <li>
              <a href="#" className="hover:text-white transition">
                Newsroom
              </a>
            </li>
            <li>
              <a href="#" className="hover:text-white transition">
                Careers
              </a>
            </li>
          </ul>
        </div>

        <div>
          <h3 className="text-xl font-bold mb-4 text-white">Help Center</h3>
          <ul className="space-y-2">
            <li>
              <a href="#" className="hover:text-white transition">
                FAQs
              </a>
            </li>
            <li>
              <a href="#" className="hover:text-white transition">
                Contact Us
              </a>
            </li>
            <li>
              <a href="#" className="hover:text-white transition">
                Support
              </a>
            </li>
            <li>
              <a href="#" className="hover:text-white transition">
                Privacy Policy
              </a>
            </li>
            <li>
              <a href="#" className="hover:text-white transition">
                Terms of Service
              </a>
            </li>
          </ul>
          <div className="flex space-x-4 mt-6">
            <a
              href="#"
              aria-label="Facebook"
              className="hover:text-white transition"
            >
              <Facebook size={24} />
            </a>
            <a
              href="#"
              aria-label="Twitter"
              className="hover:text-white transition"
            >
              <Twitter size={24} />
            </a>
            <a
              href="#"
              aria-label="Instagram"
              className="hover:text-white transition"
            >
              <Instagram size={24} />
            </a>
            <a
              href="#"
              aria-label="LinkedIn"
              className="hover:text-white transition"
            >
              <Linkedin size={24} />
            </a>
          </div>
        </div>
      </div>
      <div className="border-t border-gray-700 mt-8 py-6 text-center text-sm text-gray-500">
        @MakeByManhCuong {new Date().getFullYear()} Charity Platform. All rights
        reserved.
      </div>
    </footer>
  );
};

export default Footer;

```

### src/components/Topic/TopicCard.jsx
```jsx
import { Button } from "@/components/ui/button";
import { truncate } from "lodash";
import { ChevronRight } from "lucide-react";
import { Link } from "react-router-dom";
import { useEffect, useState } from "react";

const TopicCard = ({ layout, post }) => {
  const [contentLength, setContentLength] = useState(100);

  useEffect(() => {
    const handleResize = () => {
      setContentLength(window.innerWidth < 768 ? 80 : 100);
    };
    handleResize();
    window.addEventListener("resize", handleResize);
    return () => window.removeEventListener("resize", handleResize);
  }, []);

  if (layout === "horizontal") {
    return (
      <Link
        to={`/post/${post?.slug}`}
        className="flex flex-col md:grid md:grid-cols-2 w-full rounded-lg overflow-hidden"
      >
        <div className="relative">
          <img
            src={post?.thumbnail}
            className="w-full h-full aspect-video object-cover"
            alt="Profiles_HP_Sm"
          />
          <span className="absolute top-2 left-2 px-3 py-1 bg-blue-500 font-semibold text-sm opacity-80 rounded-full text-white">
            {post?.topic?.name}
          </span>
        </div>
        <div className="flex p-6 md:p-12 lg:p-20 justify-center flex-col bg-background">
          <h3 className="font-semibold text-lg md:text-xl mb-2">
            {post?.title}
          </h3>
          <div
            className="text-muted-foreground text-sm md:text-base"
            dangerouslySetInnerHTML={{
              __html: truncate(post?.content, { length: contentLength }),
            }}
          ></div>
          <div className="mt-6 md:mt-8">
            <Button variant="ghost" className="text-sm md:text-base">
              Chi tiết <ChevronRight className="w-4 h-4 md:w-5 md:h-5" />
            </Button>
          </div>
        </div>
      </Link>
    );
  }

  return (
    <Link to={`/post/${post?.slug}`}>
      <div className="flex flex-col w-full rounded-lg overflow-hidden">
        <div className="relative">
          <img
            src={post?.thumbnail}
            className="w-full h-full aspect-video object-cover"
            alt="Profiles_HP_Sm"
          />
          <span className="absolute top-2 left-2 px-3 py-1 bg-blue-500 font-semibold text-sm opacity-80 rounded-full text-white">
            {post?.topic?.name}
          </span>
        </div>
        <div className="flex p-4 md:p-6 justify-center flex-col bg-background">
          <h3 className="font-semibold text-lg md:text-xl mb-2">
            {truncate(post?.title, { length: 30 })}
          </h3>
          <div
            className="text-muted-foreground text-sm md:text-base"
            dangerouslySetInnerHTML={{
              __html: truncate(post?.content, { length: 50 }),
            }}
          ></div>
          <div className="mt-4 md:mt-6">
            <Button variant="ghost" className="text-sm md:text-base">
              Chi tiết <ChevronRight className="w-4 h-4 md:w-5 md:h-5" />
            </Button>
          </div>
        </div>
      </div>
    </Link>
  );
};

export default TopicCard;

```

### src/components/ShareModal/ShareModal.jsx
```jsx
import React from "react";
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Copy, Facebook, Link, Share } from "lucide-react";
import { toast } from "sonner";
import FacebookSvg from "../Icons/FacebookSvg";
import ZaloSvg from "../Icons/ZaloSvg";

const ShareModal = ({ campaign }) => {
  const shareUrl = window.location.href;

  const handleCopyLink = async () => {
    try {
      await navigator.clipboard.writeText(shareUrl);
      toast.success("Đã sao chép liên kết!");
    } catch (error) {
      toast.error("Không thể sao chép liên kết");
    }
  };

  const handleShareFacebook = () => {
    const url = `https://www.facebook.com/sharer/sharer.php?u=${encodeURIComponent(
      shareUrl
    )}`;
    window.open(url, "_blank");
  };

  const handleShareZalo = () => {
    const url = `https://zalo.me/share?u=${encodeURIComponent(shareUrl)}`;
    window.open(url, "_blank");
  };

  return (
    <Dialog>
      <DialogTrigger asChild>
        <Button variant="secondary" size="lg" className="text-lg">
          <Share className="mr-2" /> Chia sẻ
        </Button>
      </DialogTrigger>
      <DialogContent className="sm:max-w-md">
        <DialogHeader>
          <DialogTitle>Chia sẻ chiến dịch này</DialogTitle>
        </DialogHeader>
        <div className="flex items-center space-x-2 mt-4">
          <Input readOnly value={shareUrl} className="flex-1" />
          <Button variant="secondary" onClick={handleCopyLink}>
            <Copy className="h-4 w-4" />
          </Button>
        </div>
        <div className="flex flex-col gap-4 mt-6">
          <Button
            variant="outline"
            className="w-full justify-start"
            onClick={handleShareFacebook}
          >
            <FacebookSvg className="mr-2 h-8 w-8 text-blue-600" />
            Chia sẻ trên Facebook
          </Button>
          <Button
            variant="outline"
            className="w-full justify-start"
            onClick={handleShareZalo}
          >
            <ZaloSvg />
            Chia sẻ trên Zalo
          </Button>
        </div>
      </DialogContent>
    </Dialog>
  );
};

export default ShareModal;

```

### src/components/ReadMore/ReadMore.jsx
```jsx
import { useState } from "react";
import { Button } from "@/components/ui/button";
import { cn } from "@/lib/utils";
import DOMPurify from "dompurify";

export default function ReadMore({ text, maxLength = 300, className }) {
  const [isExpanded, setIsExpanded] = useState(false);

  // Sanitize HTML content
  const sanitizedHtml = DOMPurify.sanitize(text);

  // Function to truncate HTML string
  const truncateHtml = (html, length) => {
    const div = document.createElement("div");
    div.innerHTML = html;
    const text = div.textContent;
    if (text.length <= length) return html;

    let truncated = text.slice(0, length);
    return `<p>${truncated}...</p>`;
  };

  if (text.length <= maxLength) {
    return (
      <div
        className={className}
        dangerouslySetInnerHTML={{ __html: sanitizedHtml }}
      />
    );
  }

  const toggleReadMore = () => {
    setIsExpanded(!isExpanded);
  };

  return (
    <div className="space-y-2">
      <div
        className={cn("relative", !isExpanded && "max-h-40 overflow-hidden")}
      >
        <div
          className={cn("transition-all duration-300", className)}
          dangerouslySetInnerHTML={{
            __html: isExpanded
              ? sanitizedHtml
              : truncateHtml(sanitizedHtml, maxLength),
          }}
        />

        {!isExpanded && (
          <div className="absolute bottom-0 left-0 right-0 h-16 bg-gradient-to-t from-white to-transparent pointer-events-none"></div>
        )}
      </div>

      <Button
        variant="ghost"
        size="sm"
        onClick={toggleReadMore}
        className="text-blue-500 hover:text-blue-700 p-0 h-auto font-medium"
      >
        {isExpanded ? "Ẩn bớt" : "Xem thêm"}
      </Button>
    </div>
  );
}

```

### src/components/Card/Card.jsx
```jsx
import { CampaignStatusColors, CampaignStatusLabel } from "@/constants/status";
import { TOKEN } from "@/hooks/useCharityDonation"; // Thêm import TOKEN
import { truncate } from "lodash";
import { CheckCircle } from "lucide-react";
import { Link } from "react-router-dom";
import ProgressBar from "../ProgressBar/ProgressBar";
import { Badge } from "../ui/badge";

const Card = ({ campaign, size, titleMaxLength }) => {
  const getTokenInfo = (tokenAddress) => {
    if (!tokenAddress) return null;

    const matchingToken = Object.entries(TOKEN).find(
      ([_, token]) =>
        token.address?.toLowerCase() === tokenAddress?.toLowerCase()
    );

    return matchingToken ? matchingToken[1] : null;
  };

  const tokenInfo = getTokenInfo(campaign?.tokenAddress);

  const renderMedia = () => {
    if (campaign?.cover?.type === "VIDEO") {
      return (
        <video
          src={campaign?.cover?.url}
          className={`w-full h-56 object-cover ${
            size === "lg" ? "h-full" : "h-56 "
          }`}
          controls
          muted
        >
          <source src={campaign?.cover?.url} type="video/mp4" />
          Your browser does not support the video tag.
        </video>
      );
    }

    return (
      <img
        src={campaign?.cover?.url}
        alt={campaign?.title}
        className={`w-full h-56 object-cover ${
          size === "lg" ? "h-full" : "h-56 "
        }`}
      />
    );
  };
  return (
    <Link to={`/fund/${campaign?.id}`} className="flex flex-col h-full">
      <div className="relative rounded-lg flex-1 overflow-hidden">
        {renderMedia()}
        <span className="absolute left-2 bottom-2 px-4 py-1 bg-slate-900 bg-opacity-80 text-white rounded-full flex items-center gap-2">
          {tokenInfo && (
            <img
              src={tokenInfo.icon}
              alt={tokenInfo.symbol}
              className="w-4 h-4"
            />
          )}
          {campaign?._count?.donations} Đóng góp
        </span>
        <Badge
          // variant={campaign?.status === "ACTIVE" ? "secondary" : "default"}
          className="absolute top-4 right-4 flex gap-2 items-center"
          style={{
            backgroundColor: CampaignStatusColors[campaign?.status],
          }}
        >
          {campaign?.status === "FINISHED" && <CheckCircle size={18} />}
          {CampaignStatusLabel[campaign?.status]}
        </Badge>
      </div>
      <div className="p-1">
        <h3 className="font-semibold leading-none py-2" title={campaign?.title}>
          {truncate(campaign?.title, { length: titleMaxLength ?? 40 })}
        </h3>
        <p className="text-sm text-muted-foreground mb-2">
          Tạo bởi {campaign?.user?.name}
        </p>
        <div className="flex items-center gap-2 mb-2">
          {tokenInfo && (
            <div className="flex items-center gap-1 text-sm text-muted-foreground">
              <img
                src={tokenInfo.icon}
                alt={tokenInfo.symbol}
                className="w-4 h-4"
              />
              <span>{tokenInfo.symbol}</span>
            </div>
          )}
        </div>
        <ProgressBar
          value={Number(campaign?.totalDonated)}
          max={Number(campaign?.tokenGoal)}
          tokenSymbol={campaign.tokenSymbol}
        />
      </div>
    </Link>
  );
};

export default Card;

```

### src/components/FundSkeleton/index.jsx
```jsx
import { Skeleton } from "@/components/ui/skeleton";
import { Separator } from "@radix-ui/react-context-menu";

// Add this component before the main Fund component
const FundSkeleton = () => {
  return (
    <div className="container py-6 md:py-10 px-4 md:px-6">
      {/* Title Skeleton */}
      <Skeleton className="h-8 md:h-10 w-3/4 mb-6" />

      <div className="grid grid-cols-1 md:grid-cols-3 gap-4 md:gap-6">
        <div className="col-span-1 md:col-span-2">
          {/* Main Image Skeleton */}
          <Skeleton className="w-full h-96 rounded-lg" />

          {/* User Info Skeleton */}
          <div className="flex gap-3 md:gap-4 items-center mt-4 pb-4">
            <Skeleton className="h-8 w-8 md:h-10 md:w-10 rounded-full" />
            <div className="space-y-2">
              <Skeleton className="h-4 w-48" />
              <Skeleton className="h-3 w-32" />
            </div>
          </div>

          <Separator />

          {/* Description Skeleton */}
          <div className="space-y-2 mt-4 md:mt-6">
            <Skeleton className="h-4 w-full" />
            <Skeleton className="h-4 w-full" />
            <Skeleton className="h-4 w-3/4" />
          </div>

          <Separator className="my-6 md:my-8" />

          {/* Image Gallery Skeleton */}
          <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
            {[...Array(4)].map((_, i) => (
              <Skeleton key={i} className="aspect-square rounded-md" />
            ))}
          </div>

          <Separator className="my-6 md:my-8" />

          {/* Comments Section Skeleton */}
          <div className="mt-6 md:mt-8">
            <Skeleton className="h-6 w-32 mb-4" />
            <div className="space-y-4">
              {[...Array(3)].map((_, i) => (
                <div key={i} className="flex gap-4">
                  <Skeleton className="h-10 w-10 rounded-full flex-shrink-0" />
                  <div className="flex-1 space-y-2">
                    <Skeleton className="h-4 w-32" />
                    <Skeleton className="h-4 w-full" />
                  </div>
                </div>
              ))}
            </div>
          </div>
        </div>

        {/* Fund Box Skeleton */}
        <div className="col-span-1 order-first md:order-none mb-4 md:mb-0">
          <div className="border rounded-lg p-4 space-y-4">
            <Skeleton className="h-6 w-3/4" />
            <Skeleton className="h-10 w-full" />
            <div className="space-y-2">
              <Skeleton className="h-4 w-full" />
              <Skeleton className="h-4 w-2/3" />
            </div>
            <Skeleton className="h-10 w-full rounded-full" />
          </div>
        </div>
      </div>
    </div>
  );
};

export default FundSkeleton;

```

### src/components/NotificationList/index.jsx
```jsx
import React, { useEffect } from "react";
import { useNotification } from "../NotificationProvider";
import { Bell } from "lucide-react";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
  DropdownMenuSeparator,
} from "@/components/ui/dropdown-menu";
import { Button } from "@/components/ui/button";
import { cn } from "@/lib/utils";
import { NotificationType } from "@/constants";
import { Link } from "react-router-dom";
import { useNotificationSound } from "@/hooks/useNotificationSound";

const NotificationList = () => {
  const { playNotificationSound } = useNotificationSound();
  const {
    notifications,
    unreadCount,
    markAsReadNotification,
    markAllAsReadNotification,
  } = useNotification();

  useEffect(() => {
    if (unreadCount > 0) {
      // playNotificationSound();
    }
  }, [unreadCount, playNotificationSound]);

  return (
    <DropdownMenu>
      <DropdownMenuTrigger asChild>
        <div className="cursor-pointer relative transition-colors hover:bg-muted p-2 group">
          <Bell
            className={cn(
              "h-5 w-5",
              unreadCount > 0 && "animate-bell-shake text-primary"
            )}
          />
          {unreadCount > 0 && (
            <span className="absolute -top-1 -right-1 flex h-4 w-4 items-center justify-center rounded-full bg-red-500 text-[11px] text-white ring-2 ring-white">
              {unreadCount}
            </span>
          )}
        </div>
      </DropdownMenuTrigger>
      <DropdownMenuContent align="end" className="w-80">
        <div className="flex items-center justify-between px-4 py-2">
          <h3 className="font-semibold">Thông báo</h3>
          {unreadCount > 0 && (
            <Button
              variant="ghost"
              className="text-xs hover:text-primary transition-colors"
              onClick={markAllAsReadNotification}
            >
              Đánh dấu tất cả đã đọc
            </Button>
          )}
        </div>
        <DropdownMenuSeparator />
        <div className="max-h-[300px] overflow-y-auto">
          {notifications.length > 0 ? (
            notifications.map((notification) => (
              <DropdownMenuItem
                key={notification.id}
                onClick={() => markAsReadNotification(notification.id)}
                className={cn(
                  "flex flex-col items-start gap-1 p-4 cursor-pointer transition-colors hover:bg-muted",
                  !notification.isRead &&
                    "bg-blue-50 dark:bg-blue-950/30 relative pl-6"
                )}
              >
                {!notification.isRead && (
                  <div className="absolute left-2 top-1/2 -translate-y-1/2 w-2 h-2 rounded-full bg-blue-500" />
                )}
                <NotificationItem notify={notification} />
              </DropdownMenuItem>
            ))
          ) : (
            <div className="p-4 text-center text-sm text-muted-foreground">
              Không có thông báo nào
            </div>
          )}
        </div>
      </DropdownMenuContent>
    </DropdownMenu>
  );
};

export default NotificationList;

const NotificationItem = ({ notify }) => {
  switch (notify.type) {
    case NotificationType.COMMENT:
      return (
        <Link to={`/fund/${notify?.metadata?.campaignId}`}>
          <p className="text-sm">{notify.content}</p>

          <span className="text-xs text-muted-foreground">
            {new Date(notify.createdAt).toLocaleDateString("vi-VN", {
              hour: "2-digit",
              minute: "2-digit",
            })}
          </span>
        </Link>
      );
    case NotificationType.COMMENT_REPLY:
      return (
        <Link to={`/fund/${notify?.metadata?.campaignId}`}>
          <div
            className="text-sm"
            dangerouslySetInnerHTML={{ __html: notify.content }}
          />
          <span className="text-xs text-muted-foreground">
            {new Date(notify.createdAt).toLocaleDateString("vi-VN", {
              hour: "2-digit",
              minute: "2-digit",
            })}
          </span>
        </Link>
      );
    default:
      return (
        <div>
          <div
            className="text-sm"
            dangerouslySetInnerHTML={{ __html: notify.content }}
          />
          <span className="text-xs text-muted-foreground">
            {new Date(notify.createdAt).toLocaleDateString("vi-VN", {
              hour: "2-digit",
              minute: "2-digit",
            })}
          </span>
        </div>
      );
  }
};

```

### src/components/RemoteSVG/RemoteSVG.jsx
```jsx
import React, { useEffect, useState } from "react";

const RemoteSVG = ({ url }) => {
  const [svgContent, setSvgContent] = useState(null);

  useEffect(() => {
    fetch(url)
      .then((res) => res.text())
      .then(setSvgContent)
      .catch(console.error);
  }, [url]);

  return (
    <div
      className="w-12 h-12 overflow-hidden"
      dangerouslySetInnerHTML={{ __html: svgContent || "" }}
    />
  );
};

export default RemoteSVG;

```

### src/components/DonationChart/index.jsx
```jsx
// src/components/DonationChart/index.jsx
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import {
  BarChart,
  Bar,
  XAxis,
  YAxis,
  CartesianGrid,
  Tooltip,
  ResponsiveContainer,
} from "recharts";
import { format, parseISO, subDays } from "date-fns";

const DonationChart = ({ data, summary, symbol = "ETH" }) => {
  const getLast7DaysData = () => {
    const today = new Date();
    const last7Days = Array.from({ length: 7 }, (_, i) => {
      const date = subDays(today, i);
      return format(date, "dd/MM/yyyy");
    }).reverse();

    const formattedData = data
      .map((item) => ({
        ...item,
        date: format(parseISO(item.date), "dd/MM/yyyy"),
        total_amount: Number(item.total_amount.toFixed(4)),
      }))
      .slice(-7);

    const dataMap = formattedData.reduce((acc, item) => {
      acc[item.date] = item.total_amount;
      return acc;
    }, {});

    return last7Days.map((date) => ({
      date,
      total_amount: dataMap[date] || 0,
    }));
  };

  const formattedData = getLast7DaysData();

  const CustomTooltip = ({ active, payload, label }) => {
    if (active && payload && payload.length) {
      return (
        <div className="bg-background/95 p-3 rounded-lg border shadow-sm">
          <p className="font-medium">{`Ngày: ${label}`}</p>
          <p className="text-primary">{`Số lượng: ${payload[0].value} ${symbol}`}</p>
        </div>
      );
    }
    return null;
  };

  return (
    <Card className="w-full">
      <CardHeader className="pb-2">
        <CardTitle className="text-base">Thống kê quyên góp</CardTitle>
      </CardHeader>
      <CardContent>
        <div className="h-[300px]">
          <ResponsiveContainer width="100%" height="100%">
            <BarChart
              data={formattedData}
              margin={{ top: 10, right: 10, left: 0, bottom: 0 }}
            >
              <XAxis
                dataKey="date"
                tick={{ fontSize: 12 }}
                interval={0}
                angle={-45}
                textAnchor="end"
                height={50}
              />
              <YAxis
                tickFormatter={(value) => `${value}`}
                tick={{ fontSize: 12 }}
                width={40}
              />
              <Tooltip content={<CustomTooltip />} />
              <CartesianGrid strokeDasharray="3 3" />
              <Bar
                name="Số lượng ETH"
                dataKey="total_amount"
                fill="hsl(var(--primary))"
                radius={[4, 4, 0, 0]}
                maxBarSize={40}
              />
            </BarChart>
          </ResponsiveContainer>
        </div>

        <div className="grid grid-cols-3 gap-2 mt-4 text-center text-sm">
          <div className="bg-muted rounded-lg p-2">
            <div className="text-muted-foreground">Tổng lượt</div>
            <div className="font-bold">{summary.totalDonations}</div>
          </div>
          <div className="bg-muted rounded-lg p-2">
            <div className="text-muted-foreground">Tổng tiền</div>
            <div className="font-bold">
              {summary.totalAmount} {symbol}
            </div>
          </div>
          <div className="bg-muted rounded-lg p-2">
            <div className="text-muted-foreground">Trung bình</div>
            <div className="font-bold">
              {summary.averageAmount.toFixed(8)} {symbol}
            </div>
          </div>
        </div>
      </CardContent>
    </Card>
  );
};

export default DonationChart;

```

### src/components/CampaignSkeleton/index.jsx
```jsx
import { Skeleton } from "@/components/ui/skeleton";

// Add CampaignSkeleton component
const CampaignSkeleton = () => {
  return (
    <div className="border rounded-lg overflow-hidden">
      <Skeleton className="w-full h-48" />
      <div className="p-4 space-y-4">
        <Skeleton className="h-6 w-3/4" />
        <Skeleton className="h-4 w-full" />
        <div className="space-y-2">
          <Skeleton className="h-2 w-full" />
          <Skeleton className="h-2 w-2/3" />
        </div>
        <div className="flex justify-between items-center">
          <Skeleton className="h-8 w-24" />
          <Skeleton className="h-8 w-24" />
        </div>
      </div>
    </div>
  );
};

export default CampaignSkeleton;

```

### src/components/LoadingPage/index.jsx
```jsx
const LoadingPage = () => (
  <div className="min-h-screen flex items-center justify-center">
    <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-primary"></div>
  </div>
);

export default LoadingPage;

```

### src/components/ListCampaign/index.jsx
```jsx
import React from "react";
import Card from "../Card/Card";
import { motion } from "framer-motion";

const ListCampaign = ({ campaigns }) => {
  const container = {
    hidden: { opacity: 0 },
    show: {
      opacity: 1,
      transition: {
        staggerChildren: 0.1,
      },
    },
  };

  const item = {
    hidden: {
      opacity: 0,
      y: 20,
    },
    show: {
      opacity: 1,
      y: 0,
      transition: {
        type: "spring",
        damping: 15,
        stiffness: 100,
      },
    },
  };

  return (
    <motion.div
      variants={container}
      initial="hidden"
      animate="show"
      className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6"
    >
      {campaigns.map((campaign) => (
        <motion.div key={campaign.id} variants={item}>
          <Card campaign={campaign} />
        </motion.div>
      ))}
    </motion.div>
  );
};

export default ListCampaign;

```

### src/components/FilterCampaign/index.jsx
```jsx
import React, { useState } from "react";
import {
  Select,
  SelectContent,
  SelectGroup,
  SelectItem,
  SelectLabel,
  SelectTrigger,
  SelectValue,
} from "../ui/select";
import { useCountry } from "@/hooks/useCountry";
import { useCategory } from "@/hooks/useCategory";
import { useFundraiseType } from "@/hooks/useFundraiseType";
import { Button } from "../ui/button";
import { Filter, FilterXIcon } from "lucide-react";

const FilterCampaign = ({ setFilters, onClearFilters, filters }) => {
  const { data: countries } = useCountry();
  const { data: categories, isLoading } = useCategory();
  const { data: fundraiseTypes } = useFundraiseType();

  const handleChangFilters = (key, value) => {
    setFilters((prev) => ({
      ...prev,
      [key]: value,
    }));
  };

  const handleClearFilters = () => {
    handleChangFilters("countryId", undefined);
    handleChangFilters("categoryId", undefined);
    handleChangFilters("fundraiseTypeId", undefined);

    onClearFilters();
  };

  return (
    <div className="pb-4 flex gap-1 items-center">
      <Button
        variant="outline"
        className="rounded-full flex items-center justify-center border border-black"
      >
        <Filter className="" />
        Lọc
      </Button>
      <Select
        value={filters.countryId}
        onValueChange={(value) => handleChangFilters("countryId", value)}
      >
        <SelectTrigger className="w-fit rounded-full border-1 border border-black">
          <SelectValue placeholder="Địa điểm" />
        </SelectTrigger>
        <SelectContent>
          <SelectGroup>
            {countries?.map((country) => (
              <SelectItem value={country.id} key={country.id}>
                {country.name}
              </SelectItem>
            ))}
          </SelectGroup>
        </SelectContent>
      </Select>
      <Select
        value={filters.categoryId}
        onValueChange={(value) => handleChangFilters("categoryId", value)}
      >
        <SelectTrigger className="w-fit rounded-full border-1 border border-black">
          <SelectValue placeholder="Danh mục" />
        </SelectTrigger>
        <SelectContent>
          <SelectGroup>
            {categories?.data?.map((category) => (
              <SelectItem value={category.id} key={category.id}>
                {category.name}
              </SelectItem>
            ))}
          </SelectGroup>
        </SelectContent>
      </Select>
      <Select
        value={filters.fundraiseTypeId}
        onValueChange={(value) => handleChangFilters("fundraiseTypeId}", value)}
      >
        <SelectTrigger className="w-fit rounded-full border-1 border border-black">
          <SelectValue placeholder="Loại quyên góp" />
        </SelectTrigger>
        <SelectContent>
          <SelectGroup>
            {fundraiseTypes?.map((fundraiseType) => (
              <SelectItem value={fundraiseType.id} key={fundraiseType.id}>
                {fundraiseType.name}
              </SelectItem>
            ))}
          </SelectGroup>
        </SelectContent>
      </Select>

      <Button
        variant="outline"
        className="rounded-full flex items-center justify-center border border-black"
        onClick={handleClearFilters}
      >
        <FilterXIcon className="" />
        Xóa bộ lọc
      </Button>
    </div>
  );
};

export default FilterCampaign;

```

### src/components/AnalysisResult/index.jsx
```jsx
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Skeleton } from "@/components/ui/skeleton";
import { Brain } from "lucide-react"; // Import thêm icon Brain

const AnalysisResult = ({ analysis, isLoading }) => {
  if (isLoading) {
    return (
      <Alert>
        <div className="space-y-3">
          <div className="flex items-center space-x-2">
            <Brain className="h-4 w-4 animate-pulse text-primary" />
            <AlertTitle className="font-medium">
              AI đang phân tích chiến dịch...
            </AlertTitle>
          </div>

          <AlertDescription className="space-y-2">
            <div className="flex items-center gap-2">
              <strong className="min-w-16">Tóm tắt:</strong>
              <Skeleton className="h-4 flex-1" />
            </div>

            <div className="flex items-center gap-2">
              <strong className="min-w-16">Đánh giá:</strong>
              <Skeleton className="h-4 flex-1" />
            </div>
          </AlertDescription>
        </div>
      </Alert>
    );
  }

  if (!analysis) return null;

  return (
    <Alert>
      <AlertTitle className="mb-2">Phân tích chiến dịch</AlertTitle>
      <AlertDescription className="space-y-2">
        <div className="flex gap-2">
          <strong className="min-w-16">Tóm tắt:</strong>
          <span>{analysis.summary}</span>
        </div>
        <div className="flex gap-2">
          <strong className="min-w-16">Đánh giá:</strong>
          <span>{analysis.analysis}</span>
        </div>
      </AlertDescription>
    </Alert>
  );
};

export default AnalysisResult;

```
