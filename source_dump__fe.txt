# ==================================================
# Path: /home/tommy/Documents/charity/frontend
# Detected tech: docker, javascript, python, react, typescript
# ==================================================

## DIRECTORY STRUCTURE
```
frontend/
├── .git/
├── .github/
├── node_modules/
├── public/
│   ├── images/
│   │   └── heart.png
│   ├── Profiles_HP_Sm.png
│   ├── auth-bg.jpg
│   ├── charity.png
│   ├── desktop.jpg
│   ├── discover.png
│   ├── hero-animals-2.png
│   ├── hero-business-1.png
│   ├── hero-business-4.png
│   ├── hero-education-1.png
│   ├── hero-education-2.png
│   ├── hero-education-3.png
│   ├── hero-medical-1.png
│   ├── logo.png
│   ├── logo.svg
│   ├── metamask.png
│   ├── photo-category-animals@2x.jpg
│   ├── someone-else.png
│   ├── step-3.png
│   ├── undraw_back-home_3dun.svg
│   ├── vite copy.svg
│   ├── vite.svg
│   └── you-self.png
├── src/
│   ├── apis/
│   ├── common/
│   │   └── NotFound.jsx
│   ├── components/
│   │   ├── AnalysisResult/
│   │   │   └── index.jsx
│   │   ├── AnalyzeButton/
│   │   │   └── index.jsx
│   │   ├── CampaignList/
│   │   │   └── CampaignList.jsx
│   │   ├── CampaignSkeleton/
│   │   │   └── index.jsx
│   │   ├── Card/
│   │   │   └── Card.jsx
│   │   ├── CircleProgress/
│   │   │   └── CircleProgress.jsx
│   │   ├── CreateCampaign/
│   │   │   └── CreateCampaign.jsx
│   │   ├── FilterCampaign/
│   │   │   └── index.jsx
│   │   ├── Footer/
│   │   │   └── Footer.jsx
│   │   ├── FundSkeleton/
│   │   │   └── index.jsx
│   │   ├── Icons/
│   │   │   ├── FacebookSvg.jsx
│   │   │   ├── GoogleIconSvg.jsx
│   │   │   ├── HeartDonateSvg.jsx
│   │   │   └── ZaloSvg.jsx
│   │   ├── ListCampaign/
│   │   │   └── index.jsx
│   │   ├── LoadingPage/
│   │   │   └── index.jsx
│   │   ├── NotificationList/
│   │   │   └── index.jsx
│   │   ├── NotificationProvider/
│   │   │   └── index.jsx
│   │   ├── ProgressBar/
│   │   │   └── ProgressBar.jsx
│   │   ├── ReadMore/
│   │   │   └── ReadMore.jsx
│   │   ├── RemoteSVG/
│   │   │   └── RemoteSVG.jsx
│   │   ├── ShareModal/
│   │   │   └── ShareModal.jsx
│   │   ├── TextSplit/
│   │   │   └── TextSplit.jsx
│   │   ├── Topic/
│   │   │   └── TopicCard.jsx
│   │   ├── VideoPlayer/
│   │   │   └── VideoPlayer.jsx
│   │   ├── ui/
│   │   │   ├── accordion.jsx
│   │   │   ├── alert-dialog.jsx
│   │   │   ├── alert.jsx
│   │   │   ├── aspect-ratio.jsx
│   │   │   ├── avatar.jsx
│   │   │   ├── badge.jsx
│   │   │   ├── breadcrumb.jsx
│   │   │   ├── button.jsx
│   │   │   ├── calendar.jsx
│   │   │   ├── card.jsx
│   │   │   ├── carousel.jsx
│   │   │   ├── chart.jsx
│   │   │   ├── checkbox.jsx
│   │   │   ├── collapsible.jsx
│   │   │   ├── command.jsx
│   │   │   ├── context-menu.jsx
│   │   │   ├── dialog.jsx
│   │   │   ├── drawer.jsx
│   │   │   ├── dropdown-menu.jsx
│   │   │   ├── form.jsx
│   │   │   ├── hover-card.jsx
│   │   │   ├── input-otp.jsx
│   │   │   ├── input.jsx
│   │   │   ├── label.jsx
│   │   │   ├── menubar.jsx
│   │   │   ├── navigation-menu.jsx
│   │   │   ├── pagination.jsx
│   │   │   ├── popover.jsx
│   │   │   ├── progress.jsx
│   │   │   ├── radio-group.jsx
│   │   │   ├── resizable.jsx
│   │   │   ├── scroll-area.jsx
│   │   │   ├── select.jsx
│   │   │   ├── separator.jsx
│   │   │   ├── sheet.jsx
│   │   │   ├── sidebar.jsx
│   │   │   ├── skeleton.jsx
│   │   │   ├── slider.jsx
│   │   │   ├── sonner.jsx
│   │   │   ├── switch.jsx
│   │   │   ├── table.jsx
│   │   │   ├── tabs.jsx
│   │   │   ├── textarea.jsx
│   │   │   ├── toggle-group.jsx
│   │   │   ├── toggle.jsx
│   │   │   └── tooltip.jsx
│   │   └── DonateDialog.jsx
│   ├── constants/
│   │   ├── index.js
│   │   ├── linkApis.js
│   │   └── status.js
│   ├── contracts/
│   │   └── abi/
│   │       ├── CharityDonation.json
│   │       └── IERC20.json
│   ├── hooks/
│   │   ├── use-mobile.jsx
│   │   ├── useAuth.js
│   │   ├── useCampaign.js
│   │   ├── useCategory.js
│   │   ├── useCharityDonation.js
│   │   ├── useCountry.js
│   │   ├── useCreateStep.js
│   │   ├── useFundraiseType.js
│   │   ├── useSocket.js
│   │   └── useUserStore.js
│   ├── lib/
│   ├── module/
│   │   ├── admin/
│   │   └── user/
│   │       ├── components/
│   │       │   ├── Banner.jsx
│   │       │   ├── Brand.jsx
│   │       │   ├── CampaignCard.jsx
│   │       │   ├── CommentBox.jsx
│   │       │   ├── CommentForm.jsx
│   │       │   ├── Discover.jsx
│   │       │   ├── EditProfileForm.jsx
│   │       │   ├── FundBox.jsx
│   │       │   ├── Guide.jsx
│   │       │   ├── Header.jsx
│   │       │   ├── KeyFeature.jsx
│   │       │   ├── MetaMaskAccount.jsx
│   │       │   ├── ShareModal.jsx
│   │       │   ├── Topic.jsx
│   │       │   ├── TopicTab.jsx
│   │       │   └── guide.cms.js
│   │       ├── layouts/
│   │       │   ├── Auth.jsx
│   │       │   ├── AuthLayout.jsx
│   │       │   ├── CreateLayout.jsx
│   │       │   └── MainLayout.jsx
│   │       └── pages/
│   │           ├── Fundraiser/
│   │           │   ├── Category.jsx
│   │           │   ├── Description.jsx
│   │           │   ├── Finish.jsx
│   │           │   ├── Goal.jsx
│   │           │   ├── Media.jsx
│   │           │   ├── Type.jsx
│   │           │   └── editor.css
│   │           ├── About.jsx
│   │           ├── Discover.jsx
│   │           ├── DiscoverBrowse.jsx
│   │           ├── Fund.jsx
│   │           ├── Home.jsx
│   │           ├── MyCampaigns.jsx
│   │           ├── NotFound.jsx
│   │           ├── Profile.jsx
│   │           ├── Search.jsx
│   │           ├── SignIn.jsx
│   │           └── SignUp.jsx
│   ├── services/
│   │   ├── aiService.js
│   │   ├── authService.js
│   │   ├── axiosInstance.js
│   │   ├── campaignService.js
│   │   ├── categoryService.js
│   │   ├── commentService.js
│   │   ├── countryService.js
│   │   ├── coverService.js
│   │   ├── donationService.js
│   │   ├── fundraiseTypeService.js
│   │   ├── notificationService.js
│   │   ├── uploadService.js
│   │   └── userService.js
│   ├── styles/
│   │   └── globals.css
│   ├── utils/
│   │   ├── helper.js
│   │   └── metamask.js
│   ├── index.css
│   ├── main.jsx
│   └── router.jsx
├── .env
├── .gitignore
├── Dockerfile
├── README.md
├── components.json
├── eslint.config.js
├── index.html
├── jsconfig.json
├── nginx.conf
├── package-lock.json
├── package.json
├── postcss.config.js
├── source_dump.txt
├── tailwind.config.js
└── vite.config.js
```

## FILE CONTENTS

### vite.config.js
```js
import { defineConfig } from "vite";
import react from "@vitejs/plugin-react-swc";
import path from "path";

// https://vite.dev/config/
export default defineConfig({
  plugins: [react()],
  resolve: {
    alias: {
      "@": path.resolve(
        path.dirname(new URL(import.meta.url).pathname),
        "./src"
      ),
    },
  },
  server: {
    host: true, // Listen on all addresses
    port: 5173,
    strictPort: true,
  },
});

```

### eslint.config.js
```js
import js from '@eslint/js'
import globals from 'globals'
import reactHooks from 'eslint-plugin-react-hooks'
import reactRefresh from 'eslint-plugin-react-refresh'

export default [
  { ignores: ['dist'] },
  {
    files: ['**/*.{js,jsx}'],
    languageOptions: {
      ecmaVersion: 2020,
      globals: globals.browser,
      parserOptions: {
        ecmaVersion: 'latest',
        ecmaFeatures: { jsx: true },
        sourceType: 'module',
      },
    },
    plugins: {
      'react-hooks': reactHooks,
      'react-refresh': reactRefresh,
    },
    rules: {
      ...js.configs.recommended.rules,
      ...reactHooks.configs.recommended.rules,
      'no-unused-vars': ['error', { varsIgnorePattern: '^[A-Z_]' }],
      'react-refresh/only-export-components': [
        'warn',
        { allowConstantExport: true },
      ],
    },
  },
]

```

### postcss.config.js
```js
export default {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}

```

### tailwind.config.js
```js
import { randomizePosition } from "./src/utils/helper";

/** @type {import('tailwindcss').Config} */
export default {
  darkMode: ["class"],
  content: ["./index.html", "./src/**/*.{js,ts,jsx,tsx}"],
  theme: {
    extend: {
      container: {
        center: true,
        padding: "2rem",
        screens: {
          "2xl": "1300px",
        },
      },
      borderRadius: {
        lg: "var(--radius)",
        md: "calc(var(--radius) - 2px)",
        sm: "calc(var(--radius) - 4px)",
      },
      colors: {
        background: "hsl(var(--background))",
        foreground: "hsl(var(--foreground))",
        card: {
          DEFAULT: "hsl(var(--card))",
          foreground: "hsl(var(--card-foreground))",
        },
        popover: {
          DEFAULT: "hsl(var(--popover))",
          foreground: "hsl(var(--popover-foreground))",
        },
        primary: {
          DEFAULT: "hsl(var(--primary))",
          foreground: "hsl(var(--primary-foreground))",
        },
        secondary: {
          DEFAULT: "hsl(var(--secondary))",
          foreground: "hsl(var(--secondary-foreground))",
        },
        muted: {
          DEFAULT: "hsl(var(--muted))",
          foreground: "hsl(var(--muted-foreground))",
        },
        accent: {
          DEFAULT: "hsl(var(--accent))",
          foreground: "hsl(var(--accent-foreground))",
        },
        destructive: {
          DEFAULT: "hsl(var(--destructive))",
          foreground: "hsl(var(--destructive-foreground))",
        },
        border: "hsl(var(--border))",
        input: "hsl(var(--input))",
        ring: "hsl(var(--ring))",
        chart: {
          1: "hsl(var(--chart-1))",
          2: "hsl(var(--chart-2))",
          3: "hsl(var(--chart-3))",
          4: "hsl(var(--chart-4))",
          5: "hsl(var(--chart-5))",
        },
        sidebar: {
          DEFAULT: "hsl(var(--sidebar-background))",
          foreground: "hsl(var(--sidebar-foreground))",
          primary: "hsl(var(--sidebar-primary))",
          "primary-foreground": "hsl(var(--sidebar-primary-foreground))",
          accent: "hsl(var(--sidebar-accent))",
          "accent-foreground": "hsl(var(--sidebar-accent-foreground))",
          border: "hsl(var(--sidebar-border))",
          ring: "hsl(var(--sidebar-ring))",
        },
      },
      keyframes: {
        "accordion-down": {
          from: {
            height: "0",
          },
          to: {
            height: "var(--radix-accordion-content-height)",
          },
        },
        "accordion-up": {
          from: {
            height: "var(--radix-accordion-content-height)",
          },
          to: {
            height: "0",
          },
        },
        gentleFloat: {
          "0%, 100%": {
            transform: `translateY(${randomizePosition(
              -10,
              10
            )}px) translateX(${randomizePosition(-10, 10)}px)`,
          },
          "25%": {
            transform: `translateY(${randomizePosition(
              -20,
              20
            )}px) translateX(${randomizePosition(-20, 20)}px)`,
          },
          "50%": {
            transform: `translateY(${randomizePosition(
              -10,
              10
            )}px) translateX(${randomizePosition(-10, 10)}px)`,
          },
          "75%": {
            transform: `translateY(${randomizePosition(
              -20,
              20
            )}px) translateX(${randomizePosition(-20, 20)}px)`,
          },
        },
        gentleFloat2: {
          "0%, 100%": {
            transform: `translateY(${randomizePosition(
              -10,
              10
            )}px) translateX(${randomizePosition(-10, 10)}px)`,
          },
          "25%": {
            transform: `translateY(${randomizePosition(
              -20,
              20
            )}px) translateX(${randomizePosition(-20, 20)}px)`,
          },
          "50%": {
            transform: `translateY(${randomizePosition(
              -10,
              10
            )}px) translateX(${randomizePosition(-10, 10)}px)`,
          },
          "75%": {
            transform: `translateY(${randomizePosition(
              -20,
              20
            )}px) translateX(${randomizePosition(-20, 20)}px)`,
          },
        },
        gentleFloat3: {
          "0%, 100%": {
            transform: `translateY(${randomizePosition(
              -10,
              10
            )}px) translateX(${randomizePosition(-10, 10)}px)`,
          },
          "25%": {
            transform: `translateY(${randomizePosition(
              -20,
              20
            )}px) translateX(${randomizePosition(-20, 20)}px)`,
          },
          "50%": {
            transform: `translateY(${randomizePosition(
              -10,
              10
            )}px) translateX(${randomizePosition(-10, 10)}px)`,
          },
          "75%": {
            transform: `translateY(${randomizePosition(
              -20,
              20
            )}px) translateX(${randomizePosition(-20, 20)}px)`,
          },
        },
        "bell-shake": {
          "0%, 100%": { transform: "rotate(0deg)" },
          "20%, 60%": { transform: "rotate(8deg)" },
          "40%, 80%": { transform: "rotate(-8deg)" },
        },
      },
      animation: {
        "accordion-down": "accordion-down 0.2s ease-out",
        "accordion-up": "accordion-up 0.2s ease-out",
        gentleFloat1: "gentleFloat 7s ease-in-out infinite",
        gentleFloat2: "gentleFloat2 7s ease-in-out infinite",
        gentleFloat3: "gentleFloat2 7s ease-in-out infinite",
        "bell-shake": "bell-shake 1s infinite",
      },
    },
  },
  // eslint-disable-next-line no-undef
  plugins: [require("tailwindcss-animate")],
};

```

### src/main.jsx
```jsx
import { createRoot } from "react-dom/client";
import "./index.css";
import "./styles/globals.css";
import router from "./router";
import { RouterProvider } from "react-router-dom";
import { Toaster } from "sonner";
import { QueryClient, QueryClientProvider } from "@tanstack/react-query";
import { ReactQueryDevtools } from "@tanstack/react-query-devtools";
import { HelmetProvider } from "react-helmet-async";
import { NotificationProvider } from "./components/NotificationProvider";

const queryClient = new QueryClient();

createRoot(document.getElementById("root")).render(
  <HelmetProvider>
    <NotificationProvider>
      <QueryClientProvider client={queryClient}>
        <Toaster position="top-center" />
        <RouterProvider router={router} />
        <ReactQueryDevtools initialIsOpen={false} />
      </QueryClientProvider>
    </NotificationProvider>
  </HelmetProvider>
);

```

### src/router.jsx
```jsx
import { createBrowserRouter } from "react-router-dom";
import { lazy, Suspense } from "react";
import NotFound from "./common/NotFound";
import MainLayout from "./module/user/layouts/MainLayout";
import LoadingPage from "./components/LoadingPage";

// Lazy load components
const Home = lazy(() => import("./module/user/pages/Home"));
const About = lazy(() => import("./module/user/pages/About"));
const Search = lazy(() => import("./module/user/pages/Search"));
const SignInPage = lazy(() => import("./module/user/pages/SignIn"));
const SignUpPage = lazy(() => import("./module/user/pages/SignUp"));
const CreateLayout = lazy(() => import("./module/user/layouts/CreateLayout"));
const Category = lazy(() => import("./module/user/pages/Fundraiser/Category"));
const Goal = lazy(() => import("./module/user/pages/Fundraiser/Goal"));
const Type = lazy(() => import("./module/user/pages/Fundraiser/Type"));
const Fund = lazy(() => import("./module/user/pages/Fund"));
const Description = lazy(() =>
  import("./module/user/pages/Fundraiser/Description")
);
const Media = lazy(() => import("./module/user/pages/Fundraiser/Media"));
const Finish = lazy(() => import("./module/user/pages/Fundraiser/Finish"));
const MyCampaigns = lazy(() => import("./module/user/pages/MyCampaigns"));
const Profile = lazy(() => import("./module/user/pages/Profile"));
const Discover = lazy(() => import("./module/user/pages/Discover"));
const DiscoverBrowse = lazy(() => import("./module/user/pages/DiscoverBrowse"));

// Loading component

// Wrap component with Suspense
const withSuspense = (Component) => (
  <Suspense fallback={<LoadingPage />}>
    <Component />
  </Suspense>
);

const router = createBrowserRouter([
  {
    path: "/",
    element: <MainLayout />,
    children: [
      { index: true, element: withSuspense(Home) },
      { path: "about", element: withSuspense(About) },
      { path: "search", element: withSuspense(Search) },
      { path: "profile", element: withSuspense(Profile) },
      { path: "discover", element: withSuspense(Discover) },
      { path: "discover/:id", element: withSuspense(DiscoverBrowse) },
      { path: "my-campaigns", element: withSuspense(MyCampaigns) },
      { path: "fund/:id", element: withSuspense(Fund) },
      { path: "*", element: <NotFound /> },
    ],
  },
  {
    path: "/sign-in",
    element: withSuspense(SignInPage),
  },
  {
    path: "/sign-up",
    element: withSuspense(SignUpPage),
  },
  {
    path: "/create/fundraiser",
    element: withSuspense(CreateLayout),
    children: [
      {
        path: "category",
        element: withSuspense(Category),
      },
      {
        path: "goal",
        element: withSuspense(Goal),
      },
      {
        path: "types",
        element: withSuspense(Type),
      },
      {
        path: "description",
        element: withSuspense(Description),
      },
      {
        path: "media",
        element: withSuspense(Media),
      },
      {
        path: "finish",
        element: withSuspense(Finish),
      },
    ],
  },
]);

export default router;

```

### src/constants/status.js
```js
export const CampaignStatus = {
  PENDING: "Đang chờ xác minh",
  FINISHED: "Đã hoàn thành",
  ACTIVE: "Đã xác minh",
  CANCELED: "Đã hủy",
};

```

### src/constants/index.js
```js
export const ADDRESS_ZERO = "0x0000000000000000000000000000000000000000";

export const NotificationType = {
  DONATION: "DONATION",
  COMMENT_REPLY: "COMMENT_REPLY",
  COMMENT: "COMMENT",
  CAMPAIGN_UPDATE: "CAMPAIGN_UPDATE",
  CAMPAIGN_STATUS: "CAMPAIGN_STATUS",
};

```

### src/constants/linkApis.js
```js
export const AuthV1 = {
  LOGIN: "/auth/login",
  REGISTER: "/auth/register",
  GET_PROFILE: "/auth/profile",
};

export const CategoryV1 = {
  GET_CATEGORIES: "/categories",
  GET_CATEGORY: "/categories",
  CREATE_CATEGORY: "/categories",
  UPDATE_CATEGORY: "/categories",
  DELETE_CATEGORY: "/categories",
};

export const CountryV1 = {
  GET_COUNTRIES: "/countries",
  GET_COUNTRY: "/countries",
  CREATE_COUNTRY: "/countries",
  UPDATE_COUNTRY: "/countries",
  DELETE_COUNTRY: "/countries",
};

export const FundraiseTypeV1 = {
  GET_FUNDRAISE_TYPES: "/fundraise-types",
  GET_FUNDRAISE_TYPE: "/fundraise-types",
  CREATE_FUNDRAISE_TYPE: "/fundraise-types",
  UPDATE_FUNDRAISE_TYPE: "/fundraise-types",
  DELETE_FUNDRAISE_TYPE: "/fundraise-types",
};

export const UploadV1 = {
  UPLOADS: "/uploads",
};
export const CoverV1 = {
  CREATE_COVER: "/covers",
};

export const CampaignV1 = {
  GET_CAMPAIGNS: "/campaigns",
  GET_CAMPAIGN: "/campaigns",
  CREATE_CAMPAIGN: "/campaigns",
  UPDATE_CAMPAIGN: "/campaigns",
  DELETE_CAMPAIGN: "/campaigns",
  GET_MY_CAMPAIGNS: "/campaigns/my-campaigns",
  GET_CALCULATE_ETH_GOAL: "/campaigns/calculate-eth-goal",
};

export const DonationV1 = {
  GET_DONATIONS: "/donations",
  GET_DONATION: "/donations",
  CREATE_DONATION: "/donations",
  UPDATE_DONATION: "/donations",
  DELETE_DONATION: "/donations",
};

export const CommentV1 = {
  GET_COMMENTS: "/comments",
  GET_COMMENT: "/comments",
  CREATE_COMMENT: "/comments",
  UPDATE_COMMENT: "/comments",
  DELETE_COMMENT: "/comments",
  GET_COMMENT_BY_CAMPAIGN: "/comments/campaign",
};

export const UserV1 = {
  GET_USERS: "/users",
  GET_USER: "/users",
  CREATE_USER: "/users",
  UPDATE_USER: "/users",
  DELETE_USER: "/users",
};

export const AiV1 = {
  AI_ANALYZE_CAMPAIGN: "/ai/analyze-campaign",
};

export const NotificationV1 = {
  GET_NOTIFICATIONS: "/notifications",
  GET_NOTIFICATION: "/notifications",
  CREATE_NOTIFICATION: "/notifications",
  UPDATE_NOTIFICATION: "/notifications",
  DELETE_NOTIFICATION: "/notifications",
  READ_NOTIFICATION: "/notifications",
  MARK_ALL_AS_READ: "/notifications/mark-all-read",
  UNREAD_COUNT: "/notifications/unread-count",
};

```

### src/common/NotFound.jsx
```jsx
import React from "react";
import { Button } from "@/components/ui/button";
import { Link } from "react-router-dom";
import { Home } from "lucide-react";

const NotFound = () => {
  return (
    <div className="h-screen w-screen flex items-center justify-center flex-col bg-gray-50">
      <div className="text-center space-y-6">
        <img
          src="/undraw_back-home_3dun.svg"
          alt="404 illustration"
          className="w-80 h-8w-80 mx-auto"
        />

        <h1 className="text-4xl font-bold text-gray-900">
          Oops! Trang không tồn tại
        </h1>

        <p className="text-gray-600 max-w-md mx-auto pb-6">
          Trang bạn đang tìm kiếm có thể đã bị xóa, đổi tên hoặc tạm thời không
          khả dụng.
        </p>

        <Link to="/">
          <Button variant="default" className="gap-2" size="lg">
            <Home className="w-4 h-4" />
            Trở về trang chủ
          </Button>
        </Link>
      </div>
    </div>
  );
};

export default NotFound;

```

### src/hooks/useCharityDonation.js
```js
import { useMemo } from "react";
import { ethers } from "ethers";
import CharityDonationABI from "../contracts/abi/CharityDonation.json";
import { updateCampaign } from "@/services/campaignService"; // Add this import

const CONTRACT_ADDRESS = "0x02f0913C80fAab95154555f9Af6D97dD5e50B5b6";

export const useCharityDonation = () => {
  const getContract = async () => {
    if (!window.ethereum) throw new Error("MetaMask not installed");

    const provider = new ethers.BrowserProvider(window.ethereum);
    const signer = await provider.getSigner();
    return new ethers.Contract(
      CONTRACT_ADDRESS,
      CharityDonationABI.abi,
      signer
    );
  };

  return useMemo(
    () => ({
      createCampaign: async (
        title,
        tokenAddress,
        goal,
        duration,
        isNoLimit
      ) => {
        const contract = await getContract();
        const tx = await contract.createCampaign(
          title,
          tokenAddress,
          goal,
          duration,
          isNoLimit
        );
        const receipt = await tx.wait();
        const count = await contract.campaignCount();
        const chainCampaignId = Number(count) - 1; // 🔥

        return {
          chainCampaignId,
          txHash: tx.hash,
        };
      },

      donateETH: async (campaignId, amountInEther) => {
        const contract = await getContract();
        const tx = await contract.donate(
          campaignId,
          ethers.parseEther(amountInEther.toString()),
          {
            value: ethers.parseEther(amountInEther.toString()),
          }
        );
        const receipt = await tx.wait();
        return {
          txHash: tx.hash,
          receipt: receipt,
        };
      },

      donateToken: async (campaignId, tokenAddress, amount, decimals = 18) => {
        const provider = new ethers.BrowserProvider(window.ethereum);
        const signer = await provider.getSigner(); // ✅ await signer

        const tokenContract = new ethers.Contract(
          tokenAddress,
          [
            "function approve(address spender, uint256 amount) public returns (bool)",
            "function allowance(address owner, address spender) public view returns (uint256)",
          ],
          signer
        );

        const parsedAmount = ethers.parseUnits(amount.toString(), decimals);
        await tokenContract.approve(CONTRACT_ADDRESS, parsedAmount);

        const contract = await getContract();
        const tx = await contract.donate(campaignId, parsedAmount);
        await tx.wait();
      },

      closeCampaign: async (campaignId) => {
        const contract = await getContract();
        const tx = await contract.closeCampaign(campaignId);
        await tx.wait();
      },

      refund: async (campaignId) => {
        const contract = await getContract();
        const tx = await contract.refund(campaignId);
        await tx.wait();
      },

      getDonors: async (campaignId) => {
        const contract = await getContract();
        return await contract.getDonors(campaignId);
      },

      getCampaignStatus: async (campaignId) => {
        const contract = await getContract();
        return await contract.getCampaignStatus(campaignId);
      },

      getCampaign: async (campaignId) => {
        const contract = await getContract();
        return await contract.campaigns(campaignId);
      },

      getCampaignCount: async () => {
        const contract = await getContract();
        return await contract.campaignCount();
      },

      listenToFundsWithdrawn: async (campaignId, dbCampaignId) => {
        const contract = await getContract();

        contract.on("FundsWithdrawn", async (campaignId, creator, amount) => {
          console.log("FundsWithdrawn event:", {
            campaignId: Number(campaignId),
            creator,
            amount: amount.toString(),
          });

          try {
            await updateCampaign(dbCampaignId, {
              status: "FINISHED",
            });
          } catch (error) {
            console.error("Error updating campaign status:", error);
          }
        });

        return () => {
          contract.off("FundsWithdrawn");
        };
      },
    }),
    []
  );
};

```

### src/hooks/useAuth.js
```js
import { getProfile } from "@/services/authService";
import { useQuery } from "@tanstack/react-query";

export const useProfile = () => {
  return useQuery({
    queryKey: ["profile"],
    queryFn: () => getProfile(),
  });
};

```

### src/hooks/useFundraiseType.js
```js
import { getFundraiseTypes } from "@/services/fundraiseTypeService";
import { useQuery } from "@tanstack/react-query";

export const useFundraiseType = () => {
  return useQuery({
    queryKey: ["fundraiseTypes"],
    queryFn: () => getFundraiseTypes(),
  });
};

```

### src/hooks/useUserStore.js
```js
import { create } from "zustand";

const useUserStore = create((set) => ({
  user: null,
  isAuthenticated: false,
  accessToken: null,

  setUser: (userData) =>
    set({
      user: userData,
      isAuthenticated: true,
    }),

  setAccessToken: (token) =>
    set({
      accessToken: token,
    }),

  logout: () =>
    set({
      user: null,
      isAuthenticated: false,
      accessToken: null,
    }),

  updateUser: (userData) =>
    set((state) => ({
      user: {
        ...state.user,
        ...userData,
      },
    })),
}));

export default useUserStore;

```

### src/hooks/useCreateStep.js
```js
import { create } from "zustand";

const useCreateStep = create((set, get) => ({
  steps: [
    {
      title: "Fundraise",
      description: "Start fundraising, tips, and resources",
      slug: "/create/fundraiser/category",
    },
    {
      title: "Goal",
      description: "Set your fundraising goal",
      slug: "/create/fundraiser/goal",
    },
    {
      title: "Type",
      description: "Select your fundraising type",
      slug: "/create/fundraiser/types",
    },
    {
      title: "Description",
      description: "Start fundraising, tips, and resources",
      slug: "/create/fundraiser/description",
    },
    {
      title: "Media",
      description: "Start fundraising, tips, and resources",
      slug: "/create/fundraiser/media",
    },
    {
      title: "Finish",
      description: "Start fundraising, tips, and resources",
      slug: "/create/fundraiser/finish",
    },
  ],
  currentStep: 0,

  setStep: (stepIndex) => {
    if (stepIndex >= 0 && stepIndex < get().steps.length) {
      set({ currentStep: stepIndex });
    }
  },

  nextStep: () => {
    const { currentStep, steps } = get();
    if (currentStep < steps.length - 1) {
      set({ currentStep: currentStep + 1 });
    }
  },

  prevStep: () => {
    const { currentStep } = get();
    if (currentStep > 0) {
      set({ currentStep: currentStep - 1 });
    }
  },

  canGoNext: () => {
    const { currentStep, steps } = get();
    return currentStep < steps.length - 1;
  },

  canGoPrev: () => {
    const { currentStep } = get();
    return currentStep > 0;
  },
}));

export default useCreateStep;

```

### src/hooks/use-mobile.jsx
```jsx
import * as React from "react"

const MOBILE_BREAKPOINT = 768

export function useIsMobile() {
  const [isMobile, setIsMobile] = React.useState(undefined)

  React.useEffect(() => {
    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)
    const onChange = () => {
      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)
    }
    mql.addEventListener("change", onChange)
    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)
    return () => mql.removeEventListener("change", onChange);
  }, [])

  return !!isMobile
}

```

### src/hooks/useCountry.js
```js
import { getCountries } from "@/services/countryService";
import { useQuery } from "@tanstack/react-query";

export const useCountry = () => {
  return useQuery({
    queryKey: ["countries"],
    queryFn: () => getCountries(),
  });
};

```

### src/hooks/useSocket.js
```js
import { useEffect, useState } from "react";
import { io, Socket } from "socket.io-client";
import { toast } from "sonner";
import useUserStore from "./useUserStore";

const SOCKET_URL =
  import.meta.env.VITE_APP_BACKEND_URL || "https://api.chain4good.io.vn";

export const useSocket = () => {
  const [socket, setSocket] = useState(null);
  const [notifications, setNotifications] = useState([]);
  const { user } = useUserStore();

  useEffect(() => {
    const socketInstance = io(SOCKET_URL, {
      withCredentials: true,
      transports: ["websocket"],
    });

    socketInstance.on("connect", () => {
      console.log("Connected to socket server");

      if (user?.id) {
        socketInstance.emit("join", user.id);
      }
    });

    socketInstance.on("notification", (notification) => {
      setNotifications((prev) => [notification, ...prev]);
      toast.info(notification.content);
    });

    socketInstance.on("disconnect", () => {
      console.log("Disconnected from socket server");
    });

    setSocket(socketInstance);

    return () => {
      socketInstance.disconnect();
    };
  }, [user]);

  return { socket, notifications, setNotifications };
};

```

### src/hooks/useCategory.js
```js
import { getCategories } from "@/services/categoryService";
import { useQuery } from "@tanstack/react-query";

export const useCategory = () => {
  return useQuery({
    queryKey: ["categories"],
    queryFn: () => getCategories(),
  });
};

```

### src/hooks/useCampaign.js
```js
import { create } from "zustand";

const useCampaign = create((set, get) => ({
  newCampaign: {
    title: "",
    description: "",
    goal: null,
    deadline: null,
    isClosed: false,
    isNoLimit: false,
    status: "PENDING",
    categoryId: null,
    countryId: null,
    fundraiseTypeId: null,
    coverId: null,
    images: [],
  },
  setNewCampaign: (data) => {
    set({ newCampaign: data });
  },

  changeCampaignValue: (key, value) => {
    set({
      newCampaign: {
        ...get().newCampaign,
        [key]: value,
      },
    });
  },

  resetNewCampaign: () => {
    set({
      newCampaign: {
        title: "",
        description: "",
        goal: null,
        deadline: null,
        totalDonated: null,
        isClosed: false,
        isNoLimit: false,
        status: "PENDING",
        userId: null,
        categoryId: null,
        countryId: null,
        fundraiseTypeId: null,
        coverId: null,
        images: [],
      },
    });
  },

  addImage: (image) => {
    set({
      newCampaign: {
        ...get().newCampaign,
        images: [...get().newCampaign.images, image],
      },
    });
  },

  removeImage: (index) => {
    set({
      newCampaign: {
        ...get().newCampaign,
        images: get().newCampaign.images.filter((_, i) => i !== index),
      },
    });
  },

  clearImages: () => {
    set({
      newCampaign: {
        ...get().newCampaign,
        images: [],
      },
    });
  },
}));

export default useCampaign;

```

### src/module/user/pages/Home.jsx
```jsx
import { Helmet } from "react-helmet-async";
import Banner from "../components/Banner";
import Discover from "../components/Discover";
import Guide from "../components/Guide";
import KeyFeature from "../components/KeyFeature";
import Topic from "../components/Topic";

export default function Home() {
  return (
    <>
      <Helmet>
        <title>Trang chủ | Chain4Good</title>
        <meta
          name="description"
          content="Nền tảng gây quỹ từ thiện phi tập trung. Quyên góp và giúp đỡ người khác một cách minh bạch."
        />
        <meta property="og:title" content="Trang chủ | Chain4Good" />
        <meta
          property="og:description"
          content="Nền tảng gây quỹ từ thiện phi tập trung. Quyên góp và giúp đỡ người khác một cách minh bạch."
        />
        <meta property="og:type" content="website" />
      </Helmet>
      <main className="relative min-h-screen">
        <section className="relative w-full">
          <div className="relative z-10">
            <Banner />
          </div>
          <BehindTheBanner />
        </section>
        <KeyFeature />
        <Guide />
        <div className="container mx-auto px-4 py-8">
          <Discover />
        </div>
        <Topic />
      </main>
    </>
  );
}

const BehindTheBanner = () => {
  return (
    <>
      <div className="absolute inset-0 -z-10 flex items-center justify-center overflow-hidden">
        <div className="flex h-[600px] w-[600px] items-center justify-center rounded-full border border-dashed border-gray-200 md:h-[1300px] md:w-[1300px]">
          <div className="h-[300px] w-[300px] rounded-full border border-dashed md:h-[600px] md:w-[600px]"></div>
        </div>
      </div>
      <div className="-z-20 blur-2xl hidden md:flex gap-10 flex-col items-center justify-center text-9xl top-0 left-0 right-0 bottom-0 absolute">
        {/* Desktop layout */}
        <div className="flex gap-80">
          <img
            src="/hero-animals-2.png"
            className="animate-gentleFloat w-[140px] h-[140px]"
          />
          <img
            src="/hero-business-1.png"
            className="animate-gentleFloat3 w-[140px] h-[140px]"
          />
        </div>
        <div className="flex gap-[800px]">
          <img
            src="/hero-education-1.png"
            className="animate-gentleFloat2 w-[140px] h-[140px]"
          />
          <img
            src="/hero-business-4.png"
            className="animate-gentleFloat3 w-[140px] h-[140px]"
          />
        </div>
        <div className="flex gap-80">
          <img
            src="/hero-education-2.png"
            className="animate-gentleFloat2 w-[140px] h-[140px]"
          />
          <img
            src="/hero-education-3.png"
            className="animate-gentleFloat w-[140px] h-[140px]"
          />
        </div>
      </div>

      {/* Mobile layout */}
      <div className="-z-20 blur-2xl flex md:hidden gap-6 flex-col items-center justify-center text-9xl top-0 left-0 right-0 bottom-0 absolute">
        <div className="flex gap-20">
          <img
            src="/hero-animals-2.png"
            className="animate-gentleFloat w-[80px] h-[80px]"
          />
          <img
            src="/hero-business-1.png"
            className="animate-gentleFloat3 w-[80px] h-[80px]"
          />
        </div>
        <div className="flex gap-32">
          <img
            src="/hero-education-1.png"
            className="animate-gentleFloat2 w-[80px] h-[80px]"
          />
          <img
            src="/hero-business-4.png"
            className="animate-gentleFloat3 w-[80px] h-[80px]"
          />
        </div>
        <div className="flex gap-20">
          <img
            src="/hero-education-2.png"
            className="animate-gentleFloat2 w-[80px] h-[80px]"
          />
          <img
            src="/hero-education-3.png"
            className="animate-gentleFloat w-[80px] h-[80px]"
          />
        </div>
      </div>
    </>
  );
};

```

### src/module/user/pages/SignIn.jsx
```jsx
import React from "react";
import { useForm } from "react-hook-form";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import { Label } from "@/components/ui/label";
import { zodResolver } from "@hookform/resolvers/zod";
import * as z from "zod";
import { Separator } from "@/components/ui/separator";
import FacebookSvg from "@/components/Icons/FacebookSvg";
import GoogleIconSvg from "@/components/Icons/GoogleIconSvg";
import { Link, useNavigate } from "react-router-dom";
import { useMutation } from "@tanstack/react-query";
import { signin } from "@/services/authService";
import { toast } from "sonner";
const formSchema = z.object({
  email: z.string().email({ message: "Email không hợp lệ" }),
  password: z.string().min(6, { message: "Mật khẩu ít nhất 6 ký tự" }),
});
const SignInPage = () => {
  const navigate = useNavigate();
  const {
    register,
    handleSubmit,
    formState: { errors, isSubmitting },
  } = useForm({
    resolver: zodResolver(formSchema),
  });

  const mutation = useMutation({
    mutationFn: (data) => signin(data),
    onSuccess: () => {
      toast.success("Đăng nhập thành công!");
      navigate("/");
    },
    onError: (error) => {
      toast.error(error.message || "Có lỗi xảy ra!");
    },
  });

  const onSubmit = (data) => {
    mutation.mutate(data);
  };

  return (
    <div
      className="flex w-screen h-screen items-center justify-center"
      style={{ backgroundImage: "url(/desktop.jpg)" }}
    >
      <div className="w-[480px] bg-white rounded-3xl shadow-md flex gap-4 flex-col items-center p-8">
        <div>
          <img src="/logo.png" alt="" className="w-[120px]" />
        </div>
        <div className="w-full flex flex-col items-center">
          <div className="text-xl font-semibold">Welcome</div>
          <p>Đăng nhập vào Chain4Good hoặc đăng ký để tiếp tục.</p>
        </div>
        <div className="space-y-2">
          <Button variant={"outline"} className="w-full">
            <GoogleIconSvg
              style={{
                fontSize: "20px",
                width: "22px",
                height: "22px",
              }}
            />
            Đăng nhập với Google
          </Button>
          <Button variant={"outline"} className="w-full">
            <FacebookSvg
              style={{
                fontSize: "20px",
                width: "22px",
                height: "22px",
              }}
            />
            Đăng nhập với Facebook
          </Button>
        </div>
        <Separator />
        <form
          onSubmit={handleSubmit(onSubmit)}
          className="space-y-2 w-full max-w-sm"
        >
          <div className="space-y-2">
            <Label htmlFor="email">Email</Label>
            <Input
              id="email"
              type="email"
              placeholder="your@email.com"
              {...register("email")}
            />
            {errors.email && (
              <p className="text-sm text-red-500">{errors.email.message}</p>
            )}
          </div>
          <div className="space-y-2">
            <Label htmlFor="password">Mật khẩu</Label>
            <Input
              id="password"
              type="password"
              placeholder="••••••••"
              {...register("password")}
            />
            <Link
              className="text-xs text-muted-foreground"
              to={"/forgot-password"}
            >
              Quên mật khâu?
            </Link>
            {errors.password && (
              <p className="text-sm text-red-500">{errors.password.message}</p>
            )}
          </div>
          <div className="mt-2">
            <Button type="submit" className="w-full" disabled={isSubmitting}>
              {isSubmitting ? "Đang đăng nhập..." : "Đăng nhập"}
            </Button>
          </div>
        </form>
        <div className="text-md text-muted-foreground">
          <span>Bạn chưa có tài khoản? </span>
          <Link className="underline text-primary" to="/sign-up">
            Đăng ký ngay
          </Link>
        </div>
      </div>
    </div>
  );
};

export default SignInPage;

```

### src/module/user/pages/About.jsx
```jsx
import { Link } from "react-router-dom";

export default function About() {
  return (
    <div className="p-4">
      <h1 className="text-2xl font-bold">About Page</h1>
      <Link to="/" className="text-blue-500 underline">
        Go to Home
      </Link>
    </div>
  );
}

```

### src/module/user/pages/Search.jsx
```jsx
import { Input } from "@/components/ui/input";
import { Delete, Search as SearchIcon, SearchX, Loader2 } from "lucide-react";
import { Button } from "@/components/ui/button";
import React, { useState, useEffect, useCallback } from "react";
import debounce from "lodash/debounce";
import { useQuery } from "@tanstack/react-query";
import { getCampaigns } from "@/services/campaignService";
import ListCampaign from "@/components/ListCampaign";
import { Skeleton } from "@/components/ui/skeleton";
import FilterCampaign from "@/components/FilterCampaign";
import { Helmet } from "react-helmet-async";

const Search = () => {
  const [filters, setFilters] = useState({
    page: 1,
    limit: 10,
    search: "",
    fundraiseTypeId: undefined,
    categoryId: undefined,
    status: undefined,
    countryId: undefined,
    sort: undefined,
    sortBy: undefined,
  });
  const [searchTerm, setSearchTerm] = useState("");

  // eslint-disable-next-line react-hooks/exhaustive-deps
  const debouncedSearch = useCallback(
    debounce((searchValue) => {
      setFilters((prev) => ({
        ...prev,
        search: searchValue,
        page: 1,
      }));
    }, 500),
    []
  );

  const handleSearchChange = (e) => {
    const value = e.target.value;
    setSearchTerm(value);
    debouncedSearch(value);
  };

  const handleClearSearch = () => {
    setSearchTerm("");
    debouncedSearch.cancel();
    setFilters((prev) => ({
      ...prev,
      search: "",
      page: 1,
    }));
  };

  useEffect(() => {
    return () => {
      debouncedSearch.cancel();
    };
  }, [debouncedSearch]);

  const renderEmptyState = () => {
    return (
      <div className="text-center py-16">
        <div className="flex justify-center mb-4">
          <SearchX className="h-16 w-16 text-muted-foreground/50" />
        </div>
        <h3 className="text-xl font-medium mb-2">Không tìm thấy kết quả nào</h3>
        <p className="text-muted-foreground max-w-md mx-auto">
          Thử tìm kiếm với từ khóa khác hoặc kiểm tra lại chính tả của bạn
        </p>
      </div>
    );
  };

  const { data: searchResult, isFetching } = useQuery({
    queryKey: ["search", filters],
    queryFn: () => getCampaigns(filters),
  });

  const renderLoadingState = () => {
    return (
      <div className="md:max-w-7xl md:p-0 p-4 mx-auto">
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          {[1, 2, 3, 4, 5, 6].map((index) => (
            <div
              key={index}
              className="rounded-lg overflow-hidden border bg-card"
            >
              <Skeleton className="w-full h-48" />
              <div className="p-4 space-y-4">
                <div className="space-y-2">
                  <Skeleton className="h-4 w-3/4" />
                  <Skeleton className="h-4 w-1/2" />
                </div>
                <div className="space-y-2">
                  <Skeleton className="h-3 w-full" />
                  <Skeleton className="h-3 w-full" />
                  <Skeleton className="h-3 w-2/3" />
                </div>
                <div className="flex justify-between items-center pt-2">
                  <Skeleton className="h-4 w-24" />
                  <Skeleton className="h-8 w-24 rounded-full" />
                </div>
              </div>
            </div>
          ))}
        </div>
      </div>
    );
  };

  const onClearFilters = () => {
    setSearchTerm("");
    setFilters((prev) => ({
      ...prev,
      page: 1,
      limit: 10,
      search: undefined,
      fundraiseTypeId: undefined,
      categoryId: undefined,
      status: undefined,
      countryId: undefined,
      sort: undefined,
      sortBy: undefined,
    }));
  };

  return (
    <>
      <Helmet>
        <title>
          {searchTerm
            ? `Tìm kiếm: ${searchTerm} | Chain4Good`
            : "Tìm kiếm chiến dịch | Chain4Good"}
        </title>
        <meta
          name="description"
          content="Tìm kiếm các chiến dịch từ thiện, tổ chức gây quỹ và phi lợi nhuận trên Chain4Good. Khám phá và quyên góp cho những dự án phù hợp với bạn."
        />
        <meta
          property="og:title"
          content={
            searchTerm
              ? `Tìm kiếm: ${searchTerm} | Chain4Good`
              : "Tìm kiếm chiến dịch | Chain4Good"
          }
        />
        <meta
          property="og:description"
          content="Tìm kiếm các chiến dịch từ thiện, tổ chức gây quỹ và phi lợi nhuận trên Chain4Good. Khám phá và quyên góp cho những dự án phù hợp với bạn."
        />
        <meta property="og:type" content="website" />
      </Helmet>

      <main className="min-h-screen">
        <div className="container mx-auto pt-14">
          <div className="max-w-3xl mx-auto text-center space-y-4 mb-12">
            <h1 className="text-3xl font-semibold">
              Tìm kiếm các tổ chức gây quỹ và phi lợi nhuận
            </h1>
            <p className="text-base text-muted-foreground">
              Tìm người gây quỹ theo tên, địa điểm, chức danh hoặc từ khóa của
              người đó
            </p>
          </div>

          <div className="max-w-2xl mx-auto mb-16">
            <div className="relative">
              <SearchIcon className="absolute left-4 top-1/2 -translate-y-1/2 h-5 w-5 text-muted-foreground" />
              <Input
                value={searchTerm}
                onChange={handleSearchChange}
                placeholder="Tìm kiếm chiến dịch..."
                className="h-14 pl-12 pr-24 text-lg rounded-full bg-background border-muted-foreground/20 hover:border-primary/50 focus-visible:ring-1 focus-visible:ring-primary transition-colors"
              />
              {searchTerm && (
                <Button
                  onClick={handleClearSearch}
                  variant="text"
                  className="absolute right-2 top-1/2 -translate-y-1/2 rounded-full h-10"
                >
                  <Delete size={32} strokeWidth={1.25} />
                </Button>
              )}
            </div>
          </div>
        </div>
        <div className="mx-auto">
          <div className="md:max-w-7xl md:p-0 p-4 mx-auto">
            <FilterCampaign
              filters={filters}
              setFilters={setFilters}
              onClearFilters={onClearFilters}
            />
            {isFetching ? (
              renderLoadingState()
            ) : (
              <>
                {searchResult?.meta?.total === 0 && (
                  <div id="search-list">{renderEmptyState()}</div>
                )}
                {/* {!searchTerm && (
              <div className="text-center py-16 text-muted-foreground">
                Nhập từ khóa để bắt đầu tìm kiếm
              </div>
            )} */}
                {searchResult?.data?.length > 0 && (
                  <>
                    {searchTerm && (
                      <p className="font-semibold text-[20px] mb-6 leading-6">
                        {searchResult?.meta?.total} kết quả tìm kiếm cho "
                        {searchTerm}"
                      </p>
                    )}

                    <ListCampaign campaigns={searchResult?.data} />
                  </>
                )}
              </>
            )}
          </div>
        </div>
      </main>
    </>
  );
};

export default Search;

```

### src/module/user/pages/SignUp.jsx
```jsx
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Separator } from "@/components/ui/separator";
import { connectWallet } from "@/lib/contract";
import { signup } from "@/services/authService";
import { zodResolver } from "@hookform/resolvers/zod";
import { useMutation } from "@tanstack/react-query";
import { useEffect } from "react";
import { useForm } from "react-hook-form";
import { Link, useNavigate } from "react-router-dom";
import { toast } from "sonner";
import * as z from "zod";

const formSchema = z
  .object({
    email: z.string().email({ message: "Email không hợp lệ" }),
    name: z.string({ message: "Vui lòng nhập tên" }),
    password: z.string().min(6, { message: "Mật khẩu ít nhất 6 ký tự" }),
    retypePassword: z
      .string()
      .min(6, { message: "Vui lòng nhập lại mật khẩu" }),
    address: z.string({ message: "Vui lòng kết nối với Metamask" }),
  })
  .refine((data) => data.password === data.retypePassword, {
    message: "Mật khẩu không khớp",
    path: ["retypePassword"],
  });

const SignUpPage = () => {
  const navigate = useNavigate();
  const {
    register,
    handleSubmit,
    formState: { errors, isSubmitting },
    setValue,
    getValues,
    watch,
  } = useForm({
    resolver: zodResolver(formSchema),
  });

  const mutation = useMutation({
    mutationFn: (data) => signup(data),
    onSuccess: () => {
      toast.success("Đăng ký thành công!");
      navigate("/sign-in");
    },
    onError: (error) => {
      toast.error(error.message || "Có lỗi xảy ra!");
    },
  });

  const onSubmit = (data) => {
    mutation.mutate(data);
  };

  const handleConnectWallet = async () => {
    try {
      const result = await connectWallet();
      if (!result) {
        throw new Error("Wallet connection failed!");
      }
      const { address, provider, signer } = result;
      setValue("address", address);
    } catch (error) {
      toast.error(error.message);
    }
  };

  const address = watch("address");

  useEffect(() => {
    if (typeof window.ethereum !== "undefined") {
      const handleAccountsChanged = (accounts) => {
        if (accounts.length === 0) {
          setValue("address", null);
        } else {
          setValue("address", accounts[0]);
        }
      };
      window.ethereum.on("accountsChanged", handleAccountsChanged);
      return () => {
        window.ethereum.removeListener(
          "accountsChanged",
          handleAccountsChanged
        );
      };
    }
  }, [setValue]);

  return (
    <div
      className="w-screen h-screen flex items-center justify-center bg-cover"
      style={{ backgroundImage: "url(/desktop.jpg)" }}
    >
      <div className="w-[480px] bg-white rounded-3xl shadow-md flex gap-4 flex-col items-center p-8">
        <div>
          <img
            src="/logo.png"
            width={120}
            height={120}
            alt=""
            className="w-[120px]"
          />
        </div>
        <div className="w-full flex flex-col items-center">
          <div className="text-xl font-semibold">Welcome</div>
          <p>Sign in to GoFundMe or sign up to continue.</p>
        </div>
        <div className="space-y-2 w-full">
          {!address && (
            <Button
              variant={"secondary"}
              className="w-full"
              onClick={handleConnectWallet}
            >
              <img
                src="/metamask.png"
                width={20}
                height={20}
                className="w-[20px]"
              />
              Kết nối với ví Metamask
            </Button>
          )}
          {address && (
            <Button variant={"secondary"} className="w-full">
              {address}
            </Button>
          )}
          {errors.address && (
            <p className="text-sm text-red-500">{errors.address.message}</p>
          )}
        </div>
        <Separator />
        <form
          onSubmit={handleSubmit(onSubmit)}
          className="space-y-2 w-full max-w-sm"
        >
          <div className="space-y-2">
            <Label htmlFor="name">Tên</Label>
            <Input
              id="name"
              type="name"
              placeholder="Nguyen Van A"
              {...register("name")}
            />
            {errors.name && (
              <p className="text-sm text-red-500">{errors.name.message}</p>
            )}
          </div>
          <div className="space-y-2">
            <Label htmlFor="email">Email</Label>
            <Input
              id="email"
              type="email"
              placeholder="your@email.com"
              {...register("email")}
            />
            {errors.email && (
              <p className="text-sm text-red-500">{errors.email.message}</p>
            )}
          </div>
          <div className="space-y-2">
            <Label htmlFor="password">Mật khẩu</Label>
            <Input
              id="password"
              type="password"
              placeholder="••••••••"
              {...register("password")}
            />
            {errors.password && (
              <p className="text-sm text-red-500">{errors.password.message}</p>
            )}
          </div>
          <div className="space-y-2">
            <Label htmlFor="password">Nhập lại mật khẩu</Label>
            <Input
              id="password"
              type="retypePassword"
              placeholder="••••••••"
              {...register("retypePassword")}
            />
            {errors.retypePassword && (
              <p className="text-sm text-red-500">
                {errors.retypePassword.message}
              </p>
            )}
          </div>
          <div className="mt-2">
            <Button type="submit" className="w-full" disabled={isSubmitting}>
              {isSubmitting ? "Đang đăng ký..." : "Đăng ký"}
            </Button>
          </div>
        </form>
        <div className="text-md text-muted-foreground">
          <span>Bạn đã có tài khoản? </span>
          <Link className="underline text-primary" to="/sign-in">
            Đăng nhập ngay
          </Link>
        </div>
      </div>
    </div>
  );
};

export default SignUpPage;

```

### src/module/user/pages/Profile.jsx
```jsx
import React, { useState } from "react";
import { Helmet } from "react-helmet-async";
import { useQueryClient, useMutation } from "@tanstack/react-query";
import { uploadFile } from "@/services/uploadService";
import { updateUser } from "@/services/userService";
import { toast } from "sonner";
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import { Card, CardContent, CardHeader } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { CalendarDays, Mail, Phone, MapPin, Edit, Camera } from "lucide-react";
import useUserStore from "@/hooks/useUserStore";
import { formatDate } from "@/lib/utils";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Loader2 } from "lucide-react";
import EditProfileForm from "../components/EditProfileForm";

const Profile = () => {
  const { user, setUser } = useUserStore();
  const queryClient = useQueryClient();
  const [loading, setLoading] = useState({
    cover: false,
    avatar: false,
  });

  // Update user mutation
  const { mutate: updateUserMutation } = useMutation({
    mutationFn: (data) => updateUser(user.id, data),
    onSuccess: (data) => {
      setUser(data);
      queryClient.invalidateQueries(["user"]);
      toast.success("Cập nhật thành công!");
    },
    onError: (error) => {
      toast.error("Có lỗi xảy ra khi cập nhật!");
    },
  });

  // Add new mutation for updating profile
  const { mutate: updateProfile, isPending: isUpdatingProfile } = useMutation({
    mutationFn: (data) => updateUser(user.id, data),
    onSuccess: (data) => {
      setUser(data);
      queryClient.invalidateQueries(["user"]);
      toast.success("Cập nhật thông tin thành công!");
    },
    onError: (error) => {
      toast.error("Có lỗi xảy ra khi cập nhật thông tin!");
    },
  });

  const validateImage = (file) => {
    const validTypes = ["image/jpeg", "image/png", "image/gif"];
    const maxSize = 5 * 1024 * 1024; // 5MB

    if (!validTypes.includes(file.type)) {
      toast.error("Vui lòng tải lên file ảnh (JPG, PNG, GIF)");
      return false;
    }

    if (file.size > maxSize) {
      toast.error("Kích thước ảnh phải nhỏ hơn 5MB");
      return false;
    }

    return true;
  };

  // Handle cover image upload
  const handleCoverUpload = async (e) => {
    const file = e.target.files?.[0];
    if (!file) return;

    if (!validateImage(file)) return;

    try {
      setLoading((prev) => ({ ...prev, cover: true }));
      const { url } = await uploadFile(file);
      await updateUserMutation({ cover: url });
    } catch (error) {
      console.error("Error uploading cover:", error);
      toast.error("Có lỗi xảy ra khi tải ảnh lên!");
    } finally {
      setLoading((prev) => ({ ...prev, cover: false }));
    }
  };

  // Handle avatar upload using the same pattern
  const handleAvatarUpload = async (e) => {
    const file = e.target.files?.[0];
    if (!file) return;

    if (!validateImage(file)) return;

    try {
      setLoading((prev) => ({ ...prev, avatar: true }));
      const { url } = await uploadFile(file);
      await updateUserMutation({ image: url });
    } catch (error) {
      console.error("Error uploading avatar:", error);
      toast.error("Có lỗi xảy ra khi tải ảnh lên!");
    } finally {
      setLoading((prev) => ({ ...prev, avatar: false }));
    }
  };

  // Handle profile update
  const handleUpdateProfile = (data) => {
    updateProfile(data);
  };

  const renderField = (icon, label, value) => {
    if (!value) return null;
    return (
      <div className="flex items-center gap-2 text-sm">
        {icon}
        <div>
          <p className="text-muted-foreground">{label}</p>
          <p className="font-medium">{value}</p>
        </div>
      </div>
    );
  };

  return (
    <>
      <Helmet>
        <title>
          {user?.name ? `${user.name} | Chain4Good` : "Hồ sơ | Chain4Good"}
        </title>
        <meta
          name="description"
          content={
            user?.bio ||
            "Xem thông tin cá nhân, chiến dịch và lịch sử đóng góp của người dùng trên Chain4Good."
          }
        />
        <meta
          property="og:title"
          content={
            user?.name ? `${user.name} | Chain4Good` : "Hồ sơ | Chain4Good"
          }
        />
        <meta
          property="og:description"
          content={
            user?.bio ||
            "Xem thông tin cá nhân, chiến dịch và lịch sử đóng góp của người dùng trên Chain4Good."
          }
        />
        <meta property="og:image" content={user?.image || ""} />
        <meta property="og:type" content="profile" />
      </Helmet>

      <div className="min-h-screen pb-10">
        <div
          className="relative h-[200px] md:h-[300px] group cursor-pointer"
          style={
            user?.cover
              ? {
                  backgroundImage: `url(${user.cover})`,
                  backgroundSize: "cover",
                  backgroundPosition: "center",
                }
              : {
                  background:
                    "linear-gradient(to right, var(--primary-light), var(--primary-dark))",
                }
          }
        >
          <div className="absolute inset-0 bg-black/30 opacity-0 group-hover:opacity-100 transition-opacity" />
          <div className="absolute inset-0 flex items-center justify-center">
            <p className="text-white text-sm opacity-0 group-hover:opacity-100 transition-opacity">
              Bấm để thay đổi ảnh bìa
            </p>
          </div>

          <Input
            type="file"
            id="cover-upload"
            className="hidden"
            accept="image/png,image/jpeg,image/gif"
            onChange={handleCoverUpload}
            disabled={loading.cover}
          />

          <Label
            htmlFor="cover-upload"
            className="absolute inset-0 cursor-pointer"
          >
            {loading.cover && (
              <div className="absolute inset-0 flex items-center justify-center bg-black/50">
                <Loader2 className="h-8 w-8 animate-spin text-white" />
              </div>
            )}
          </Label>

          {/* Optional: Camera icon indicator */}
          <div className="absolute bottom-4 right-4 opacity-0 group-hover:opacity-100 transition-opacity">
            <Camera className="h-6 w-6 text-white" />
          </div>
        </div>

        <div className="container px-4 -mt-20">
          <div className="relative">
            <Input
              type="file"
              id="avatar-upload"
              className="hidden"
              accept="image/*"
              onChange={handleAvatarUpload}
              disabled={loading.avatar}
            />
            <Label htmlFor="avatar-upload" className="cursor-pointer">
              <Avatar className="absolute -top-16 border-4 border-background h-32 w-32 group">
                <AvatarImage src={user?.image} />
                <AvatarFallback className="text-4xl">
                  {user?.name?.charAt(0)}
                </AvatarFallback>
                <div className="absolute inset-0 bg-black/60 rounded-full opacity-0 group-hover:opacity-100 transition-opacity flex items-center justify-center">
                  {loading.avatar ? (
                    <Loader2 className="h-6 w-6 text-white animate-spin" />
                  ) : (
                    <Camera className="h-6 w-6 text-white" />
                  )}
                </div>
              </Avatar>
            </Label>

            <Card className="pt-20">
              <CardHeader className="flex flex-row items-start justify-between">
                <div className="space-y-2">
                  <h2 className="text-2xl md:text-3xl font-bold">
                    {user?.name}
                  </h2>
                  <Badge variant="outline">
                    {user?.roleId === 2 ? "User" : "Admin"}
                  </Badge>
                </div>
                <EditProfileForm
                  user={user}
                  onSubmit={handleUpdateProfile}
                  isLoading={isUpdatingProfile}
                />
              </CardHeader>

              <CardContent>
                <Tabs defaultValue="about" className="w-full">
                  <TabsList>
                    <TabsTrigger value="about">Thông tin</TabsTrigger>
                    <TabsTrigger value="campaigns">Chiến dịch</TabsTrigger>
                    <TabsTrigger value="donations">Đóng góp</TabsTrigger>
                  </TabsList>

                  <TabsContent value="about" className="space-y-6">
                    {user?.bio && (
                      <div className="space-y-2">
                        <h3 className="font-semibold">Bio</h3>
                        <p className="text-sm text-muted-foreground leading-relaxed">
                          {user.bio}
                        </p>
                      </div>
                    )}

                    <div className="grid gap-4 md:grid-cols-2">
                      {renderField(
                        <Mail className="h-4 w-4" />,
                        "Email",
                        user?.email
                      )}
                      {renderField(
                        <Phone className="h-4 w-4" />,
                        "Phone",
                        user?.phoneNumber
                      )}
                      {renderField(
                        <MapPin className="h-4 w-4" />,
                        "Địa chỉ ví",
                        user?.address
                      )}
                      {renderField(
                        <CalendarDays className="h-4 w-4" />,
                        "Tham gia",
                        formatDate(user?.createdAt)
                      )}
                    </div>
                  </TabsContent>

                  <TabsContent value="campaigns">
                    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                      {/* Campaign cards will go here */}
                    </div>
                  </TabsContent>

                  <TabsContent value="donations">
                    <div className="space-y-4">
                      {/* Donation history will go here */}
                    </div>
                  </TabsContent>
                </Tabs>
              </CardContent>
            </Card>
          </div>
        </div>
      </div>
    </>
  );
};

export default Profile;

```

### src/module/user/pages/DiscoverBrowse.jsx
```jsx
import { Button } from "@/components/ui/button";
import { Separator } from "@/components/ui/separator";
import { getCampaignsByCategoryId } from "@/services/campaignService";
import { getCategoryById } from "@/services/categoryService";
import { useMutation, useQuery } from "@tanstack/react-query";
import { HeartHandshake } from "lucide-react";
import React from "react";
import { useParams } from "react-router-dom";
import CampaignCard from "../components/CampaignCard";
import Card from "@/components/Card/Card";

const DiscoverBrowse = () => {
  const { id } = useParams();
  const [filters, setFilters] = React.useState({
    page: 1,
    limit: 10,
  });

  const { data: category, isLoading } = useQuery({
    queryKey: ["category", id],
    queryFn: () => getCategoryById(id),
    enabled: !!id,
  });

  const { data: campaigns } = useQuery({
    queryKey: ["campaigns", id],
    queryFn: () => getCampaignsByCategoryId(id, filters.page, filters.limit),
    enabled: !!id,
  });

  return (
    <div className="container mx-auto px-4">
      {/* Hero Section */}
      <div className="py-6 md:py-10 grid grid-cols-1 md:grid-cols-3 gap-8 md:h-[60vh] items-center">
        <div className="col-span-1 md:col-span-2 space-y-4 md:space-y-8">
          <div className="text-3xl md:text-[56px] leading-tight md:leading-[67.2px] tracking-[-1.12px] font-semibold">
            Danh mục {category?.name?.toLowerCase()}{" "}
            <br className="hidden md:block" /> gây quỹ trên Chain4Good
          </div>
          <p className="text-base md:text-lg text-muted-foreground">
            Giúp đỡ người khác bằng cách quyên góp cho người gây quỹ của họ,
            hoặc bắt đầu một người cho người mà bạn quan tâm.
          </p>
          <Button className="w-fit text-sm md:text-base rounded-xl" size="lg">
            Tạo chiến dịch
          </Button>
        </div>
        <div className="col-span-1 h-[200px] md:h-full">
          <img
            src="/photo-category-animals@2x.jpg"
            className="w-full h-full object-cover rounded-xl shadow-sm"
            alt={`${category?.name} category`}
          />
        </div>
      </div>

      <Separator className="my-4 md:my-8" />

      {/* Campaign List Section */}
      <div>
        <div className="pb-4 text-xl md:text-[24px] leading-tight md:leading-[28.8px] font-semibold">
          Danh mục {category?.name?.toLowerCase()}
        </div>
        <div>
          {campaigns?.data?.length === 0 ? (
            <div className="text-center py-10 md:py-20">
              <HeartHandshake className="w-12 h-12 md:w-16 md:h-16 mx-auto text-gray-400 mb-4" />
              <h2 className="text-lg md:text-xl font-semibold">
                Chưa có chiến dịch nào
              </h2>
              <p className="text-sm md:text-base text-gray-600">
                Bắt đầu bằng cách tạo chiến dịch đầu tiên của bạn
              </p>
            </div>
          ) : (
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 md:gap-6">
              {campaigns?.data?.map((campaign) => (
                <Card key={campaign.id} campaign={campaign} />
              ))}
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

export default DiscoverBrowse;

```

### src/module/user/pages/MyCampaigns.jsx
```jsx
import React from "react";
import CampaignCard from "../components/CampaignCard";
import { Link } from "react-router-dom";
import { Button } from "@/components/ui/button";
import { Plus, HeartHandshake } from "lucide-react";
import { useQuery } from "@tanstack/react-query";
import { getMyCampaigns } from "@/services/campaignService";
import CampaignSkeleton from "@/components/CampaignSkeleton";
import { Skeleton } from "@/components/ui/skeleton";
import { Helmet } from "react-helmet-async";

const mockCampaigns = [
  {
    id: 1,
    title: "Hỗ trợ trẻ em vùng cao",
    description: "Gây quỹ hỗ trợ xây dựng trường học cho trẻ em vùng cao",
    goal: {
      eth: "2.5",
      vnd: "150,000,000",
    },
    totalDonated: {
      eth: "1.2",
      vnd: "72,000,000",
      progress: 48,
    },
    deadline: "2025-06-30",
    status: "ACTIVE",
    image: "/Profiles_HP_Sm.png",
  },
  {
    id: 2,
    title: "Quỹ học bổng sinh viên",
    description: "Hỗ trợ học bổng cho sinh viên có hoàn cảnh khó khăn",
    goal: {
      eth: "1.8",
      vnd: "108,000,000",
    },
    totalDonated: {
      eth: "0.9",
      vnd: "54,000,000",
      progress: 50,
    },
    deadline: "2025-07-15",
    status: "ACTIVE",
    image: "/Profiles_HP_Sm.png",
  },
];

const MyCampaigns = () => {
  const [filters, setFilters] = React.useState({
    page: 1,
    limit: 10,
  });

  const {
    data: campaigns,
    isLoading,
    error,
  } = useQuery({
    queryKey: ["my-campaigns", filters],
    queryFn: () => getMyCampaigns(filters.page, filters.limit),
    enabled: true,
  });

  if (isLoading) {
    return (
      <div className="container mx-auto mt-16 px-4 min-h-screen">
        <div className="flex justify-between items-center mb-8">
          <div className="space-y-2">
            <Skeleton className="h-8 w-48" />
            <Skeleton className="h-4 w-64" />
          </div>
          <Skeleton className="h-10 w-40" />
        </div>

        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          {[...Array(6)].map((_, index) => (
            <CampaignSkeleton key={index} />
          ))}
        </div>
      </div>
    );
  }
  if (error) return <div>Error: {error.message}</div>;

  return (
    <>
      <Helmet>
        <title>Chiến dịch của tôi | Chain4Good</title>
        <meta
          name="description"
          content="Quản lý và theo dõi các chiến dịch gây quỹ từ thiện của bạn trên Chain4Good. Tạo chiến dịch mới và theo dõi tiến độ quyên góp."
        />
        <meta property="og:title" content="Chiến dịch của tôi | Chain4Good" />
        <meta
          property="og:description"
          content="Quản lý và theo dõi các chiến dịch gây quỹ từ thiện của bạn trên Chain4Good. Tạo chiến dịch mới và theo dõi tiến độ quyên góp."
        />
        <meta property="og:type" content="website" />
      </Helmet>

      <div className="container mx-auto mt-16 px-4 min-h-screen ">
        <div className="flex justify-between items-center mb-8">
          <div>
            <h1 className="text-2xl font-bold">Chiến dịch của tôi</h1>
            <p className="text-gray-600">
              Quản lý các chiến dịch gây quỹ của bạn
            </p>
          </div>
          <Link to="/create/fundraiser/category">
            <Button className="gap-2">
              <Plus className="w-4 h-4" />
              Tạo chiến dịch mới
            </Button>
          </Link>
        </div>

        {!campaigns || campaigns?.data?.length === 0 ? (
          <div className="text-center py-12">
            <HeartHandshake className="w-16 h-16 mx-auto text-gray-400 mb-4" />
            <h2 className="text-xl font-semibold">Chưa có chiến dịch nào</h2>
            <p className="text-gray-600">
              Bắt đầu bằng cách tạo chiến dịch đầu tiên của bạn
            </p>
          </div>
        ) : (
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            {campaigns?.data?.map((campaign) => (
              <CampaignCard key={campaign.id} campaign={campaign} />
            ))}
          </div>
        )}
      </div>
    </>
  );
};

export default MyCampaigns;

```

### src/module/user/pages/Discover.jsx
```jsx
import RemoteSVG from "@/components/RemoteSVG/RemoteSVG";
import { Button } from "@/components/ui/button";
import { useCategory } from "@/hooks/useCategory";
import React from "react";
import { Link } from "react-router-dom";
import { Helmet } from "react-helmet-async";

const Discover = () => {
  const { data: categories } = useCategory();

  return (
    <>
      <Helmet>
        <title>Khám phá chiến dịch | Chain4Good</title>
        <meta
          name="description"
          content="Khám phá các chiến dịch từ thiện theo danh mục. Tìm và quyên góp cho những dự án phù hợp với đam mê của bạn."
        />
        <meta property="og:title" content="Khám phá chiến dịch | Chain4Good" />
        <meta
          property="og:description"
          content="Khám phá các chiến dịch từ thiện theo danh mục. Tìm và quyên góp cho những dự án phù hợp với đam mê của bạn."
        />
        <meta property="og:type" content="website" />
      </Helmet>

      <div className="container mx-auto px-4">
        <div className="flex flex-col gap-4 md:gap-8 py-4 md:py-6">
          <h2 className="text-3xl md:text-7xl leading-tight md:leading-none tracking-tight">
            Tìm chiến dịch <br /> theo danh mục
          </h2>
          <p className="text-lg md:text-3xl text-muted-foreground">
            Mọi người trên thế giới đang quyên góp tiền cho những gì họ đang có{" "}
            <br className="hidden md:block" />
            đam mê về.
          </p>
          <Button className="w-fit text-sm md:text-base rounded-xl" size="lg">
            Tạo chiến dịch
          </Button>
        </div>

        <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-6 gap-4 md:gap-6">
          {categories?.data?.map((category) => (
            <Link
              key={category.id}
              to={`/discover/${category.id}`}
              className="flex flex-col items-center gap-2"
            >
              <div className="w-full aspect-square flex items-center hover:border rounded-md transition justify-center p-4 md:p-6">
                <img
                  src={category.icon}
                  className="w-3/4 md:w-2/4 fill-transparent"
                  alt={category.name}
                />
              </div>
              <div className="text-sm md:text-base text-center">
                {category.name}
              </div>
            </Link>
          ))}
        </div>
      </div>
    </>
  );
};

export default Discover;

```

### src/module/user/pages/NotFound.jsx
```jsx
import React from "react";
import { Button } from "@/components/ui/button";
import { Link } from "react-router-dom";
import { Home } from "lucide-react";
import { Helmet } from "react-helmet-async";

const NotFound = () => {
  return (
    <>
      <Helmet>
        <title>Không tìm thấy trang | Chain4Good</title>
        <meta
          name="description"
          content="Trang bạn đang tìm kiếm không tồn tại. Vui lòng kiểm tra lại đường dẫn hoặc trở về trang chủ."
        />
        <meta property="og:title" content="Không tìm thấy trang | Chain4Good" />
        <meta
          property="og:description"
          content="Trang bạn đang tìm kiếm không tồn tại. Vui lòng kiểm tra lại đường dẫn hoặc trở về trang chủ."
        />
        <meta property="og:type" content="website" />
      </Helmet>

      <div className="h-screen w-screen flex items-center justify-center flex-col bg-gray-50">
        <div className="text-center space-y-6">
          <img
            src="/404.svg"
            alt="404 illustration"
            className="w-64 h-64 mx-auto"
          />

          <h1 className="text-4xl font-bold text-gray-900">
            Oops! Trang không tồn tại
          </h1>

          <p className="text-gray-600 max-w-md mx-auto">
            Trang bạn đang tìm kiếm có thể đã bị xóa, đổi tên hoặc tạm thời
            không khả dụng.
          </p>

          <Link to="/">
            <Button variant="default" className="gap-2">
              <Home className="w-4 h-4" />
              Trở về trang chủ
            </Button>
          </Link>
        </div>
      </div>
    </>
  );
};

export default NotFound;

```

### src/module/user/pages/Fund.jsx
```jsx
import FundSkeleton from "@/components/FundSkeleton";
import ReadMore from "@/components/ReadMore/ReadMore";
import { Avatar, AvatarFallback } from "@/components/ui/avatar";
import { Badge } from "@/components/ui/badge";
import {
  Carousel,
  CarouselContent,
  CarouselItem,
  CarouselNext,
  CarouselPrevious,
} from "@/components/ui/carousel";
import { Separator } from "@/components/ui/separator";
import VideoPlayer from "@/components/VideoPlayer/VideoPlayer";
import { CampaignStatus } from "@/constants/status";
import { useCharityDonation } from "@/hooks/useCharityDonation";
import { formatCampaign, formattedDonors } from "@/lib/utils";
import { getCampaignById } from "@/services/campaignService";
import {
  createComment,
  getCommentsByCampaign,
} from "@/services/commentService";
import { analyzeCampaign } from "@/services/aiService";
import { AvatarImage } from "@radix-ui/react-avatar";
import { useMutation, useQuery, useQueryClient } from "@tanstack/react-query";
import { CheckCircle } from "lucide-react";
import { useEffect, useState } from "react";
import { useParams } from "react-router-dom";
import CommentBox from "../components/CommentBox";
import FundBox from "../components/FundBox";
import ShareModal from "../components/ShareModal";
import AnalysisResult from "@/components/AnalysisResult";
import AnalyzeButton from "@/components/AnalyzeButton";
import { Helmet } from "react-helmet-async";

const Fund = () => {
  const { id } = useParams();
  const { getCampaign, getDonors, listenToFundsWithdrawn } =
    useCharityDonation();
  const queryClient = useQueryClient();
  const [selectedImage, setSelectedImage] = useState(null);
  const [analysisResult, setAnalysisResult] = useState(null);

  const {
    data: campaign,
    isLoading,
    error,
  } = useQuery({
    queryKey: ["campaign", id],
    queryFn: () => getCampaignById(id),
    enabled: !!id,
  });

  const renderMedia = (cover) => {
    if (!cover) return null;

    if (cover.type === "VIDEO") {
      return (
        <VideoPlayer
          src={cover.url}
          // onVideoClick={() => setSelectedImage(cover.url)}
        />
      );
    }

    return (
      <img
        className="rounded-lg shadow-md w-full h-96 object-cover"
        src={cover.url}
        onClick={() => setSelectedImage(cover.url)}
        alt={campaign.title}
      />
    );
  };

  useEffect(() => {
    window.scrollTo(0, 0);
  }, []);

  const { data: onChainCampaign, isLoading: isOnChainLoading } = useQuery({
    queryKey: ["campaignOnChain", campaign?.chainCampaignId],
    queryFn: async () => {
      const data = await getCampaign(campaign.chainCampaignId);
      return formatCampaign(data);
    },
    enabled: !!campaign?.chainCampaignId,
  });

  const { data: donors, isLoading: isDonorsLoading } = useQuery({
    queryKey: ["donors", campaign?.chainCampaignId],
    queryFn: async () => {
      const data = await getDonors(campaign.chainCampaignId);
      return formattedDonors(data);
    },
    enabled: !!campaign?.chainCampaignId,
  });

  useEffect(() => {
    let cleanupFunction;

    const setupListener = async () => {
      if (campaign?.chainCampaignId) {
        try {
          cleanupFunction = await listenToFundsWithdrawn(
            campaign.chainCampaignId,
            id
          );
        } catch (error) {
          console.error("Error setting up event listener:", error);
        }
      }
    };

    setupListener();

    return () => {
      if (typeof cleanupFunction === "function") {
        cleanupFunction();
      }
    };
  }, [campaign?.chainCampaignId, id, listenToFundsWithdrawn]);

  const { data: comments, isLoading: isCommentsLoading } = useQuery({
    queryKey: ["comments", campaign?.id],
    queryFn: () => getCommentsByCampaign(campaign.id),
    enabled: !!campaign?.id,
  });

  const { mutate: addComment, isPending: isAddingComment } = useMutation({
    mutationFn: createComment,
    onSuccess: () => {
      queryClient.invalidateQueries(["comments", campaign?.id]);
    },
  });

  const { mutate: replyToComment, isPending: isReplying } = useMutation({
    mutationFn: createComment,
    onSuccess: () => {
      queryClient.invalidateQueries(["comments", campaign?.id]);
    },
  });

  const { mutate: analyzeContent, isPending: isAnalyzing } = useMutation({
    mutationFn: analyzeCampaign,
    onSuccess: (data) => {
      setAnalysisResult(data);
      console.log("Analysis complete:", data);
    },
    onError: (error) => {
      console.error("Analysis failed:", error);
    },
  });

  const handleAddComment = (content) => {
    addComment({
      content,
      campaignId: campaign.id,
    });
  };

  const handleReply = (content, parentId) => {
    replyToComment({
      content,
      campaignId: campaign.id,
      parentId,
    });
  };

  const handleAnalyzeCampaign = () => {
    if (!campaign) return;

    analyzeContent({
      title: campaign.title,
      description: campaign.description,
    });
  };

  return (
    <>
      <Helmet>
        <title>
          {campaign?.title
            ? `${campaign.title} | Chain4Good`
            : "Chiến dịch | Chain4Good"}
        </title>
        <meta
          name="description"
          content={
            campaign?.description?.slice(0, 155) ||
            "Tham gia đóng góp vào chiến dịch từ thiện trên Chain4Good. Mọi giao dịch đều minh bạch và được lưu trữ trên blockchain."
          }
        />
        <meta
          property="og:title"
          content={
            campaign?.title
              ? `${campaign.title} | Chain4Good`
              : "Chiến dịch | Chain4Good"
          }
        />
        <meta
          property="og:description"
          content={
            campaign?.description?.slice(0, 155) ||
            "Tham gia đóng góp vào chiến dịch từ thiện trên Chain4Good. Mọi giao dịch đều minh bạch và được lưu trữ trên blockchain."
          }
        />
        <meta property="og:image" content={campaign?.cover?.url || ""} />
        <meta property="og:type" content="website" />
      </Helmet>

      <div className="container py-6 md:py-10 px-4 md:px-6">
        {isLoading && <FundSkeleton />}
        {error && <div>Error: {error.message}</div>}
        {campaign && (
          <>
            <h1 className="text-2xl md:text-4xl font-semibold pb-4 md:pb-6">
              {campaign.title}
            </h1>

            <div className="grid grid-cols-1 md:grid-cols-3 gap-4 md:gap-6 ">
              <div className="col-span-1 md:col-span-2">
                <div className="relative">
                  {renderMedia(campaign.cover)}
                  {campaign.status === "FINISHED" && (
                    <Badge
                      className="absolute top-4 left-4"
                      variant={"default"}
                    >
                      <CheckCircle className="mr-2 h-3 w-3 md:h-4 md:w-4" />
                      {CampaignStatus[campaign.status]}
                    </Badge>
                  )}
                </div>

                <div className="flex gap-3 md:gap-4 items-center mt-4 pb-4">
                  <Avatar className="h-8 w-8 md:h-10 md:w-10">
                    <AvatarImage src={campaign?.user?.image} />
                    <AvatarFallback>CG</AvatarFallback>
                  </Avatar>
                  <div>
                    <div className="text-sm md:text-base">
                      <strong>{campaign?.user?.name}</strong> đang tổ chức buổi
                      gây quỹ
                    </div>
                    <p className="text-muted-foreground text-xs md:text-sm">
                      {onChainCampaign?.creator}
                    </p>
                  </div>
                </div>
                <Separator className="my-6 md:my-8" />

                <div className="mb-6">
                  <AnalyzeButton
                    onClick={handleAnalyzeCampaign}
                    isAnalyzing={isAnalyzing}
                  />
                  {(analysisResult || isAnalyzing) && (
                    <AnalysisResult
                      analysis={analysisResult}
                      isLoading={isAnalyzing}
                    />
                  )}
                </div>
                <Separator />
                <ReadMore
                  className="text-base md:text-lg mt-4 md:mt-6"
                  text={campaign?.description}
                />
                <Separator className="my-6 md:my-8" />
                <div className="mt-4 md:mt-6">
                  <Carousel className="w-full">
                    <CarouselContent className="ml-2 md:ml-4">
                      {campaign?.images?.map((image, index) => (
                        <CarouselItem
                          key={index}
                          className="pl-2 md:pl-4 basis-1/2 md:basis-1/3 lg:basis-1/4"
                        >
                          <div
                            className="rounded-md aspect-square overflow-hidden cursor-pointer"
                            onClick={() => setSelectedImage(image.url)}
                          >
                            <img
                              src={image.url}
                              alt=""
                              className="object-cover w-full h-full"
                            />
                          </div>
                        </CarouselItem>
                      ))}
                    </CarouselContent>
                    <CarouselPrevious className="hidden md:flex" />
                    <CarouselNext className="hidden md:flex" />
                  </Carousel>
                </div>
                <Separator className="my-6 md:my-8" />
                <div className="mt-6 md:mt-8">
                  <h2 className="text-xl md:text-2xl font-semibold mb-4">
                    Bình luận
                  </h2>
                  <CommentBox
                    comments={comments}
                    onAddComment={handleAddComment}
                    onReply={handleReply}
                    isLoading={isCommentsLoading}
                    isSubmitting={isAddingComment || isReplying}
                  />
                </div>
              </div>
              <div className="col-span-1 order-first md:order-none mb-4 md:mb-0">
                <FundBox
                  donors={donors}
                  onChainCampaign={onChainCampaign}
                  campaign={campaign}
                  isDonorsLoading={isDonorsLoading}
                />
              </div>
            </div>
            <ShareModal />
          </>
        )}
      </div>
    </>
  );
};

export default Fund;

```

### src/module/user/pages/Fundraiser/Description.jsx
```jsx
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { CKEditor } from "@ckeditor/ckeditor5-react";
import ClassicEditor from "@ckeditor/ckeditor5-build-classic";
import "./editor.css"; // Tạo file CSS riêng
import useCampaign from "@/hooks/useCampaign";
import { useLocation } from "react-router-dom";
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { AlertCircle } from "lucide-react";

const Description = () => {
  const { newCampaign, changeCampaignValue } = useCampaign();
  const location = useLocation();
  const error = location.state?.error;

  return (
    <div className="container mx-auto space-y-6 md:p-20 p-0">
      {error && (
        <Alert variant="destructive" className="mb-6">
          <AlertCircle className="h-4 w-4" />
          <AlertTitle>Lỗi</AlertTitle>
          <AlertDescription>{error}</AlertDescription>
        </Alert>
      )}
      <div>
        <h2 className="font-semibold text-xl">Chi tiết chiến dịch gây quỹ</h2>
        <p className="text-muted-foreground">
          Hãy mô tả chi tiết về mục đích và kế hoạch sử dụng quỹ của bạn
        </p>
      </div>
      <div>
        <Label className="pb-1">Tiêu đề</Label>
        <Input
          size="lg"
          placeholder="Tiêu đề"
          value={newCampaign.title}
          onChange={(e) => changeCampaignValue("title", e.target.value)}
        />
      </div>
      <div>
        <Label className="pb-1">Mô tả</Label>
        <CKEditor
          editor={ClassicEditor}
          data={newCampaign.description}
          onChange={(event, editor) => {
            const data = editor.getData();
            changeCampaignValue("description", data);
          }}
          config={{
            toolbar: {
              items: [
                "heading",
                "|",
                "bold",
                "italic",
                "link",
                "bulletedList",
                "numberedList",
                "|",
                "outdent",
                "indent",
                "|",
                "blockQuote",
                "insertTable",
                "mediaEmbed",
                "undo",
                "redo",
              ],
              shouldNotGroupWhenFull: true,
            },
            placeholder: "Nhập nội dung mô tả chi tiết...",
            heading: {
              options: [
                {
                  model: "paragraph",
                  title: "Paragraph",
                  class: "ck-heading_paragraph",
                },
                {
                  model: "heading1",
                  view: "h1",
                  title: "Heading 1",
                  class: "ck-heading_heading1",
                },
                {
                  model: "heading2",
                  view: "h2",
                  title: "Heading 2",
                  class: "ck-heading_heading2",
                },
              ],
            },
          }}
        />
      </div>
    </div>
  );
};

export default Description;

```

### src/module/user/pages/Fundraiser/Type.jsx
```jsx
import { ToggleGroup, ToggleGroupItem } from "@/components/ui/toggle-group";
import useCampaign from "@/hooks/useCampaign";
import { useFundraiseType } from "@/hooks/useFundraiseType";
import React, { useEffect, useState } from "react";
import { useLocation } from "react-router-dom";
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { AlertCircle } from "lucide-react";

let images = ["/you-self.png", "/someone-else.png", "/charity.png"];
const Type = () => {
  const { data } = useFundraiseType();
  const { newCampaign, changeCampaignValue } = useCampaign();
  const [fundraiseTypes, setFundraiseTypes] = useState([]);
  const location = useLocation();
  const error = location.state?.error;

  useEffect(() => {
    let fds = data?.map((item, index) => {
      return {
        image: images[index],
        label: item.name,
        value: item.id,
        description: item.description,
      };
    });
    setFundraiseTypes(fds);
  }, [data]);

  return (
    <div className="px-20 w-full ">
      {error && (
        <Alert variant="destructive" className="mb-6">
          <AlertCircle className="h-4 w-4" />
          <AlertTitle>Lỗi</AlertTitle>
          <AlertDescription>{error}</AlertDescription>
        </Alert>
      )}
      <div className="mb-4 text-2xl">
        <h2>Bạn đang kêu gọi gây quỹ cho đối tượng nào?</h2>
      </div>
      <div className="w-full">
        <ToggleGroup
          type="single"
          className="w-full flex flex-col gap-4"
          value={newCampaign.fundraiseTypeId}
          onValueChange={(value) =>
            changeCampaignValue("fundraiseTypeId", value)
          }
        >
          {fundraiseTypes?.map((item, index) => (
            <ToggleGroupItem
              className="w-full border rounded-2xl hover:bg-primary/10 h-fit p-4 gap-4 flex justify-start"
              key={item.value}
              value={item.value}
            >
              <img src={item.image} className="rounded-2xl w-20" />
              <div className="text-left font-thin">
                <h3>{item.label}</h3>
                <p className="text-muted-foreground">{item.description}</p>
              </div>
            </ToggleGroupItem>
          ))}
        </ToggleGroup>
      </div>
    </div>
  );
};

export default Type;

```

### src/module/user/pages/Fundraiser/Goal.jsx
```jsx
import { Input } from "@/components/ui/input";
import React, { useState, useEffect } from "react";
import axios from "axios";
import { Label } from "@/components/ui/label";
import { useFormContext } from "react-hook-form";
import useCampaign from "@/hooks/useCampaign";
import { cn } from "@/lib/utils";
import { format } from "date-fns";
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from "@/components/ui/popover";
import { Button } from "@/components/ui/button";
import { AlertCircle, CalendarIcon } from "lucide-react";
import { Calendar } from "@/components/ui/calendar";
import { useLocation } from "react-router-dom";
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";

const Goal = () => {
  const [vnd, setVnd] = useState("");
  const [goal, setGoal] = useState(0);
  const [eth, setEth] = useState(0);
  const [exchangeRate, setExchangeRate] = useState(0);
  const { newCampaign, changeCampaignValue } = useCampaign();
  const location = useLocation();
  const error = location.state?.error;

  // Lấy tỷ giá ETH-VND từ API
  const fetchExchangeRate = async () => {
    try {
      const response = await axios.get(
        "https://api.coingecko.com/api/v3/simple/price?ids=ethereum&vs_currencies=vnd"
      );
      setExchangeRate(response.data.ethereum.vnd);
    } catch (error) {
      console.error("Error fetching exchange rate:", error);
    }
  };

  useEffect(() => {
    fetchExchangeRate();
  }, []);

  const formatVND = (value) => {
    const number = value.replace(/\D/g, "");
    if (number === "") return "";
    return parseInt(number).toLocaleString("vi-VN");
  };

  const handleChange = (e) => {
    const rawValue = e.target.value;
    const numericValue = rawValue.replace(/\D/g, "");

    setVnd(formatVND(rawValue));
    setGoal(Number(numericValue));
    if (numericValue === "") {
      setEth(0);
    } else {
      const number = parseFloat(numericValue);
      setEth(number / exchangeRate);
    }
  };

  useEffect(() => {
    changeCampaignValue("goal", goal);
  }, [goal, changeCampaignValue]);

  return (
    <div className="container px-10">
      {error && (
        <Alert variant="destructive" className="mb-6">
          <AlertCircle className="h-4 w-4" />
          <AlertTitle>Lỗi</AlertTitle>
          <AlertDescription>{error}</AlertDescription>
        </Alert>
      )}
      <div className="flex flex-col mb-8">
        <Label className={"mb-2 text-lg"}>Thời gian kết thúc chiến dịch</Label>
        <Popover>
          <PopoverTrigger asChild>
            <Button
              variant={"outline"}
              className={cn(
                "w-[240px] justify-start text-left font-normal",
                !newCampaign.deadline && "text-muted-foreground"
              )}
            >
              <CalendarIcon />
              {newCampaign.deadline ? (
                format(newCampaign.deadline, "PPP")
              ) : (
                <span>Pick a date</span>
              )}
            </Button>
          </PopoverTrigger>
          <PopoverContent className="w-auto p-0" align="start">
            <Calendar
              mode="single"
              selected={newCampaign.deadline}
              onSelect={(value) => changeCampaignValue("deadline", value)}
              initialFocus
            />
          </PopoverContent>
        </Popover>
      </div>
      <div>
        <Label className={"mb-2 text-lg"}>Mục tiêu quyên góp</Label>
        <Input
          placeholder="Nhập mục tiêu quyên góp (VNĐ)"
          type="text"
          className="w-full text-3xl"
          value={vnd}
          onChange={handleChange}
        />
        <div className="text-2xl mt-4">≈ {eth.toFixed(6)} ETH</div>
        <div className="text-sm text-gray-500 mt-2">
          Tỷ giá ETH-VND:{" "}
          {exchangeRate ? exchangeRate.toLocaleString("vi-VN") : "Đang tải..."}
        </div>
      </div>
    </div>
  );
};

export default Goal;

```

### src/module/user/pages/Fundraiser/Finish.jsx
```jsx
import React, { useEffect } from "react";
import { Button } from "@/components/ui/button";
import { CheckCircle, AlertCircle } from "lucide-react";
import { Link, useNavigate } from "react-router-dom";
import useCampaign from "@/hooks/useCampaign";
import useCreateStep from "@/hooks/useCreateStep"; // Thêm import này
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";

const Finish = () => {
  const { newCampaign } = useCampaign();
  const navigate = useNavigate();
  const { steps, setStep } = useCreateStep(); // Thêm hook useCreateStep

  const validateCampaign = () => {
    const validations = [
      {
        field: "categoryId",
        message: "Vui lòng chọn danh mục chiến dịch",
        redirect: "/create/fundraiser/category",
      },
      {
        field: "countryId",
        message: "Vui lòng chọn quốc gia",
        redirect: "/create/fundraiser/category",
      },
      {
        field: "fundraiseTypeId",
        message: "Vui lòng chọn loại gây quỹ",
        redirect: "/create/fundraiser/type",
      },
      {
        field: "title",
        message: "Vui lòng nhập tiêu đề chiến dịch",
        redirect: "/create/fundraiser/description",
      },
      {
        field: "description",
        message: "Vui lòng nhập mô tả chiến dịch",
        redirect: "/create/fundraiser/description",
      },
      {
        field: "goal",
        message: "Vui lòng nhập mục tiêu gây quỹ",
        redirect: "/create/fundraiser/goal",
      },
      {
        field: "deadline",
        message: "Vui lòng chọn thời hạn gây quỹ",
        redirect: "/create/fundraiser/goal",
      },
      {
        field: "coverId",
        message: "Vui lòng tải lên ảnh bìa",
        redirect: "/create/fundraiser/media",
      },
    ];

    for (const validation of validations) {
      if (!newCampaign[validation.field]) {
        // Tìm index của step cần redirect tới
        const stepIndex = steps.findIndex(
          (step) => step.slug === validation.redirect
        );

        if (stepIndex !== -1) {
          // Thêm check để đảm bảo tìm thấy step
          return {
            isValid: false,
            message: validation.message,
            redirect: validation.redirect,
            stepIndex: stepIndex,
          };
        }
      }
    }

    return { isValid: true };
  };

  useEffect(() => {
    const validation = validateCampaign();
    if (!validation.isValid) {
      setStep(validation.stepIndex); // Set current step trước
      navigate(validation.redirect, {
        state: { error: validation.message },
        replace: true, // Thêm replace để không thể back lại
      });
    }
  }, [newCampaign, navigate, setStep, steps]);

  if (!validateCampaign().isValid) {
    return null;
  }

  return (
    <div className="container mx-auto space-y-6 md:p-20 p-0">
      <div className="max-w-2xl mx-auto text-center space-y-8">
        <div className="flex justify-center">
          <div className="w-20 h-20 bg-primary/10 rounded-full flex items-center justify-center">
            <CheckCircle className="w-10 h-10 text-primary" />
          </div>
        </div>

        <div className="space-y-4">
          <h1 className="text-3xl font-bold">Hoàn thành chiến dịch!</h1>
          <p className="text-muted-foreground text-lg">
            Vui lòng nhấn hoàn thành để hoàng tất tạo chiến dịch. ãy chia sẻ
            chiến dịch với mọi người để bắt đầu nhận quyên góp.
          </p>
        </div>

        <div className="bg-muted/30 p-6 rounded-lg">
          <h3 className="font-semibold text-xl mb-4">{newCampaign.title}</h3>
          <div className="flex gap-4 justify-center">
            <Button asChild>
              <Link to={`/fund/${newCampaign.id}`}>Xem chiến dịch</Link>
            </Button>
            <Button variant="outline" asChild>
              <Link to="/my-campaigns">Quản lý chiến dịch</Link>
            </Button>
          </div>
        </div>

        <div className="pt-8 space-y-4">
          <h4 className="font-semibold text-lg">Các bước tiếp theo</h4>
          <div className="grid md:grid-cols-3 gap-6">
            <div className="p-4 rounded-lg border bg-card">
              <h5 className="font-medium mb-2">Chia sẻ</h5>
              <p className="text-sm text-muted-foreground">
                Chia sẻ chiến dịch của bạn trên mạng xã hội
              </p>
            </div>
            <div className="p-4 rounded-lg border bg-card">
              <h5 className="font-medium mb-2">Cập nhật</h5>
              <p className="text-sm text-muted-foreground">
                Thường xuyên cập nhật tiến độ cho người ủng hộ
              </p>
            </div>
            <div className="p-4 rounded-lg border bg-card">
              <h5 className="font-medium mb-2">Kết nối</h5>
              <p className="text-sm text-muted-foreground">
                Tương tác với cộng đồng người ủng hộ
              </p>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default Finish;

```

### src/module/user/pages/Fundraiser/Media.jsx
```jsx
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import useCampaign from "@/hooks/useCampaign";
import { validateFile } from "@/lib/utils";
import { createCover } from "@/services/coverService";
import { uploadFile } from "@/services/uploadService";
import { AlertCircle, ImagePlus, Loader2, X } from "lucide-react"; // Thêm Loader2
import { useState } from "react";
import { useLocation } from "react-router-dom";

const Media = () => {
  const [preview, setPreview] = useState({
    cover: null,
    images: [],
  });
  const [loading, setLoading] = useState({
    cover: false,
    images: false,
  });
  const { changeCampaignValue } = useCampaign();
  const location = useLocation();
  const error = location.state?.error;

  const handleCoverChange = async (e) => {
    e.preventDefault();
    const file = e.target.files[0];
    if (file && validateFile(file)) {
      try {
        setLoading((prev) => ({ ...prev, cover: true }));
        const { url } = await uploadFile(file);
        if (url) {
          const isVideo = file.type.startsWith("video/");
          const mediaType = isVideo ? "VIDEO" : "IMAGE";

          const data = await createCover(url, mediaType);
          changeCampaignValue("coverId", data.id);
          setPreview((prev) => ({
            ...prev,
            cover: url,
          }));
        }
      } catch (error) {
        console.error("Error uploading cover:", error);
      } finally {
        setLoading((prev) => ({ ...prev, cover: false }));
      }
    }
  };

  const handleImagesChange = async (e) => {
    const files = Array.from(e.target.files);
    if (files.length) {
      try {
        setLoading((prev) => ({ ...prev, images: true }));
        const uploadPromises = files.map((file) => uploadFile(file));
        const results = await Promise.all(uploadPromises);
        setPreview((prev) => ({
          ...prev,
          images: [...prev.images, ...results.map((result) => result.url)],
        }));
        changeCampaignValue("images", [
          ...preview.images,
          ...results.map((result) => result.url),
        ]);
      } catch (error) {
        console.error("Error uploading images:", error);
      } finally {
        setLoading((prev) => ({ ...prev, images: false }));
      }
    }
  };

  const removeImage = (index) => {
    // const currentImages = watch("images") || [];
    // const newImages = currentImages.filter((_, i) => i !== index);
    // setValue("images", newImages);

    setPreview((prev) => ({
      ...prev,
      images: prev.images.filter((_, i) => i !== index),
    }));
  };

  const renderPreview = (file) => {
    if (file?.startsWith("data:video") || file?.match(/\.(mp4|webm|ogg)$/i)) {
      return (
        <video className="w-full h-full object-cover rounded-lg" controls>
          <source src={file} type="video/mp4" />
          Your browser does not support the video tag.
        </video>
      );
    }

    return (
      <img
        src={file}
        alt="Preview"
        className="w-full h-full object-cover rounded-lg"
      />
    );
  };

  return (
    <div className="container mx-auto space-y-6 md:p-20 p-0">
      {error && (
        <Alert variant="destructive" className="mb-6">
          <AlertCircle className="h-4 w-4" />
          <AlertTitle>Lỗi</AlertTitle>
          <AlertDescription>{error}</AlertDescription>
        </Alert>
      )}
      <div>
        <h2 className="font-semibold text-xl">Hình ảnh cho chiến dịch</h2>
        <p className="text-muted-foreground">
          Thêm hình ảnh để mọi người hiểu rõ hơn về chiến dịch của bạn
        </p>
      </div>

      {/* Cover Image Upload */}
      <div className="space-y-4">
        <Label>Ảnh bìa</Label>
        <div className="relative">
          <Input
            type="file"
            accept="image/*,video/*"
            className="hidden"
            id="cover-upload"
            onChange={handleCoverChange}
            disabled={loading.cover}
          />
          <Label
            htmlFor="cover-upload"
            className="block w-full aspect-video cursor-pointer border-2 border-dashed rounded-lg hover:border-primary transition-colors"
          >
            {loading.cover ? (
              <div className="flex flex-col items-center justify-center h-full space-y-2">
                <Loader2 className="w-8 h-8 animate-spin text-primary" />
                <span className="text-sm text-gray-500">Đang tải lên...</span>
              </div>
            ) : preview.cover ? (
              renderPreview(preview.cover)
            ) : (
              <div className="flex flex-col items-center justify-center h-full space-y-2">
                <ImagePlus className="w-8 h-8 text-gray-400" />
                <span className="text-sm text-gray-500">
                  Click để tải lên ảnh bìa
                </span>
              </div>
            )}
          </Label>
        </div>
      </div>

      {/* Multiple Images Upload */}
      <div className="space-y-4">
        <Label>Hình ảnh bổ sung</Label>
        <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
          {preview.images.map((image, index) => (
            <div key={index} className="relative aspect-square">
              {renderPreview(image)}
              <Button
                size="icon"
                variant="destructive"
                className="absolute -top-2 -right-2 w-6 h-6"
                onClick={() => removeImage(index)}
              >
                <X className="w-4 h-4" />
              </Button>
            </div>
          ))}
          <Input
            type="file"
            accept="image/*,video/*"
            className="hidden"
            id="images-upload"
            multiple
            onChange={handleImagesChange}
            disabled={loading.images}
          />
          <Label
            htmlFor="images-upload"
            className="block aspect-square cursor-pointer border-2 border-dashed rounded-lg hover:border-primary transition-colors"
          >
            <div className="flex flex-col items-center justify-center h-full space-y-2">
              {loading.images ? (
                <Loader2 className="w-8 h-8 animate-spin text-primary" />
              ) : (
                <ImagePlus className="w-8 h-8 text-gray-400" />
              )}
              <span className="text-sm text-gray-500">
                {loading.images ? "Đang tải lên..." : "Thêm hình ảnh"}
              </span>
            </div>
          </Label>
        </div>
      </div>
    </div>
  );
};

export default Media;

```

### src/module/user/pages/Fundraiser/Category.jsx
```jsx
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { ToggleGroup, ToggleGroupItem } from "@/components/ui/toggle-group";
import useCampaign from "@/hooks/useCampaign";
import { useCategory } from "@/hooks/useCategory";
import { useCountry } from "@/hooks/useCountry";
import React, { useState } from "react";
import { useFormContext } from "react-hook-form";
import { useLocation } from "react-router-dom";
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { AlertCircle } from "lucide-react";

const Category = () => {
  const { data: categories, isLoading } = useCategory();
  const { data: countries, isLoading: isLoadingCountry } = useCountry();
  const { newCampaign, changeCampaignValue } = useCampaign();
  const location = useLocation();
  const error = location.state?.error;

  if (isLoading || isLoadingCountry) {
    return <div>Loading...</div>;
  }

  return (
    <div className="container mx-auto space-y-6 md:p-20 p-0">
      {error && (
        <Alert variant="destructive" className="mb-6">
          <AlertCircle className="h-4 w-4" />
          <AlertTitle>Lỗi</AlertTitle>
          <AlertDescription>{error}</AlertDescription>
        </Alert>
      )}
      <div>
        <h2 className="font-semibold text-xl">
          Các khoản tiền sẽ được sử dụng vào đâu?
        </h2>
        <p className="text-muted-foreground">
          Chọn nơi bạn muốn rút khoản tiền quyên góp.
        </p>
      </div>
      <div className="grid grid-cols-2 gap-4">
        <div className="col-span-1">
          <Select
            value={newCampaign.countryId}
            onValueChange={(value) => changeCampaignValue("countryId", value)}
          >
            <SelectTrigger className="w-full">
              <SelectValue placeholder="Địa chỉ" />
            </SelectTrigger>
            <SelectContent>
              {countries?.map((country) => (
                <SelectItem value={country.id} key={country.id}>
                  {country.name}
                </SelectItem>
              ))}
            </SelectContent>
          </Select>
        </div>
      </div>

      <div>
        <h2 className="text-xl mb-3">
          Mô tả nào phù hợp nhất với lý do bạn kêu gọi gây quỹ?
        </h2>
        <div>
          <ToggleGroup
            type="single"
            className="flex flex-wrap gap-2 justify-start"
            value={newCampaign.categoryId}
            onValueChange={(value) => changeCampaignValue("categoryId", value)}
          >
            {categories?.data?.map((category) => (
              <ToggleGroupItem
                key={category.id}
                variant="outline"
                className="rounded-xl min-w-fit"
                value={category.id}
                aria-label="category"
              >
                {category.name}
              </ToggleGroupItem>
            ))}
          </ToggleGroup>
        </div>
      </div>
    </div>
  );
};

export default Category;

```

### src/module/user/layouts/CreateLayout.jsx
```jsx
import React, { useEffect } from "react";
import { Link, Outlet, useNavigate } from "react-router-dom";
import { ChevronLeft, ChevronRight } from "lucide-react";
import { useMutation } from "@tanstack/react-query";
import { Button } from "@/components/ui/button";
import { Separator } from "@/components/ui/separator";
import useCreateStep from "@/hooks/useCreateStep";
import Auth from "./Auth";
import useCampaign from "@/hooks/useCampaign";
import { toast } from "sonner";
import { createCampaign } from "@/services/campaignService";

const CreateLayout = () => {
  const navigate = useNavigate();
  const { steps, nextStep, prevStep, currentStep, canGoNext, canGoPrev } =
    useCreateStep();
  const { newCampaign } = useCampaign();

  const { mutate: createNewCampaign, isPending } = useMutation({
    mutationFn: createCampaign,
    onSuccess: (data) => {
      toast.success("Chiến dịch tạo thành công!");
      console.log(data);
    },
    onError: (error) => {
      toast.error(error.message);
    },
  });

  const handleNextStep = () => {
    // Validate current step before moving to next
    if (validateCurrentStep()) {
      nextStep();
    }
  };

  const handlePrevStep = () => {
    prevStep();
  };

  const validateCurrentStep = () => {
    // Add validation logic here based on currentStep
    return true;
  };

  useEffect(() => {
    // Add protection against direct URL access
    const currentPath = window.location.pathname;
    const currentStepIndex = steps.findIndex(
      (step) => step.slug === currentPath
    );

    if (currentStepIndex !== -1 && currentStepIndex !== currentStep) {
      navigate(steps[currentStep].slug, { replace: true });
    }
  }, [currentStep, navigate, steps]);

  const handleFinish = () => {
    createNewCampaign(newCampaign);
  };

  return (
    <div className="bg-[#F4F2EC] grid grid-cols-3 w-screen h-screen">
      <Auth />
      <div className="col-span-1 p-10 flex flex-col h-screen">
        <Link to="/">
          <img src={"/logo.svg"} className="w-[40px] h-[40px]" />
        </Link>
        <div className="flex-1 flex items-center justify-center flex-col ">
          <div>
            <h2 className="text-left text-4xl mb-4 leading-9">
              {steps[currentStep].title}
            </h2>
            <p className="text-left">{steps[currentStep].description}</p>
          </div>
        </div>
      </div>
      <div className="col-span-2 flex rounded-l-[64px] bg-white h-full py-10 flex-col overflow-auto">
        <main className="flex-1 w-full flex items-center justify-center ">
          <Outlet />
        </main>
        <Separator />
        <div className="h-32 flex px-10 bottom-0 py-6 w-full justify-between items-center">
          {canGoPrev() && (
            <Button
              variant="outline"
              size="lg"
              onClick={handlePrevStep}
              className="text-md"
            >
              <ChevronLeft />
              Quay lại
            </Button>
          )}

          {canGoNext() ? (
            <Button onClick={handleNextStep} size="lg" className="text-md">
              Tiếp tục
              <ChevronRight />
            </Button>
          ) : (
            <Button
              size="lg"
              className="text-md"
              onClick={handleFinish}
              disabled={isPending}
            >
              {isPending ? (
                <>
                  <span className="animate-spin mr-2">◯</span>
                  Đang xử lý...
                </>
              ) : (
                "Hoàn thành"
              )}
            </Button>
          )}
        </div>
      </div>
    </div>
  );
};

export default CreateLayout;

```

### src/module/user/layouts/MainLayout.jsx
```jsx
import { Outlet, Link } from "react-router-dom";
import Footer from "@/components/Footer/Footer";
import Header from "../components/Header";
import Auth from "./Auth";
import { Separator } from "@/components/ui/separator";
import Brand from "../components/Brand";

export default function MainLayout() {
  return (
    <>
      <Header />
      <div className=" mx-auto py-20">
        <Outlet />
      </div>
      <Brand />
      <Footer />
      <Separator className="mt-10" />
      <div className="py-10 container">
        <span className="font-bold ">@MakeByManhCuong</span>
      </div>
      <Auth />
    </>
  );
}

```

### src/module/user/layouts/Auth.jsx
```jsx
import { useProfile } from "@/hooks/useAuth";
import React from "react";

const Auth = () => {
  const { data, isLoading } = useProfile();
  return null;
};

export default Auth;

```

### src/module/user/layouts/AuthLayout.jsx
```jsx
import React from "react";
import { Outlet } from "react-router-dom";

const AuthLayout = () => {
  return (
    <main className="flex items-center justify-center">
      <Outlet />
    </main>
  );
};

export default AuthLayout;

```

### src/module/user/components/CommentBox.jsx
```jsx
import React, { useState } from "react";
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import { Button } from "@/components/ui/button";
import { formatDistance } from "date-fns";
import { vi } from "date-fns/locale"; // Add this import
import { Heart, MessageCircle } from "lucide-react";
import { Skeleton } from "@/components/ui/skeleton";
import { MessageSquare } from "lucide-react";
import CommentForm from "./CommentForm";
import useUserStore from "@/hooks/useUserStore";
import { toast } from "sonner";

const Comment = ({
  comment,
  onReply,
  level = 0,
  parentUser = null,
  activeReplyId,
  setActiveReplyId,
  maxReplies = 2,
  showAllReplies = false,
}) => {
  const [showAll, setShowAll] = useState(false);
  const { user } = useUserStore();
  const isReplyFormVisible = activeReplyId === comment.id;

  // Filter replies based on showAll state
  const displayedReplies =
    showAll || showAllReplies
      ? comment.replies
      : comment.replies?.slice(0, maxReplies);

  const hasMoreReplies = !showAll && comment.replies?.length > maxReplies;

  return (
    <>
      <div className={`flex gap-4 ${level > 0 ? "ml-12" : ""}`}>
        <Avatar>
          <AvatarImage src={comment.user.image} />
          <AvatarFallback>{comment.user.name[0]}</AvatarFallback>
        </Avatar>
        <div className="flex-1 space-y-2">
          <div className="bg-muted p-4 rounded-lg">
            <div className="flex items-center justify-between mb-2">
              <div>
                <span className="font-semibold mr-2">{comment.user.name}</span>
                {comment.parentId && (
                  <span className="text-xs text-muted-foreground mx-2">
                    trả lời
                  </span>
                )}
                <span className="text-xs text-muted-foreground">
                  {formatDistance(new Date(comment.createdAt), new Date(), {
                    addSuffix: true,
                    locale: vi,
                  })}
                </span>
              </div>
            </div>
            <p className="text-sm">
              {level > 1 && parentUser && (
                <span className="text-primary font-medium">
                  @{parentUser.name}{" "}
                </span>
              )}
              {comment.content}
            </p>
          </div>

          <div className="flex items-center gap-4">
            <Button variant="ghost" size="sm" className="text-muted-foreground">
              <Heart className="w-4 h-4 mr-2" />
              {comment._count.Like}
            </Button>
            <Button
              variant="ghost"
              size="sm"
              className="text-muted-foreground"
              onClick={() => {
                if (!user) return toast.warning("Vui lòng đăng nhập!");
                setActiveReplyId(isReplyFormVisible ? null : comment.id);
              }}
            >
              <MessageCircle className="w-4 h-4 mr-2" />
              Trả lời
            </Button>
          </div>
        </div>
      </div>

      {isReplyFormVisible && (
        <div className={level > 0 ? "ml-24" : "ml-12"}>
          <CommentForm
            parentId={comment.id}
            onSubmit={(content) => {
              onReply(content, comment.id);
              setActiveReplyId(null); // Close form after submitting
            }}
            autoFocus
            user={user}
            onCancel={() => setActiveReplyId(null)}
          />
        </div>
      )}

      {/* Show replies */}
      {displayedReplies?.map((reply) => (
        <Comment
          key={reply.id}
          comment={reply}
          onReply={onReply}
          level={level + 1}
          parentUser={comment.user}
          activeReplyId={activeReplyId}
          setActiveReplyId={setActiveReplyId}
          showAllReplies={showAll}
        />
      ))}

      {/* Show "View All" button if there are more replies */}
      {hasMoreReplies && (
        <div className={`ml-12 mt-2`}>
          <Button
            variant="ghost"
            size="sm"
            className="text-primary hover:text-primary/80"
            onClick={() => setShowAll(true)}
          >
            Xem tất cả {comment.replies.length} câu trả lời
          </Button>
        </div>
      )}
    </>
  );
};

const CommentSkeleton = () => {
  return (
    <div className="flex gap-4">
      <Skeleton className="h-10 w-10 rounded-full" />
      <div className="flex-1 space-y-2">
        <div className="bg-muted p-4 rounded-lg">
          <div className="space-y-2">
            <Skeleton className="h-4 w-24" />
            <Skeleton className="h-4 w-full" />
          </div>
        </div>
        <div className="flex items-center gap-4">
          <Skeleton className="h-8 w-16" />
          <Skeleton className="h-8 w-16" />
        </div>
      </div>
    </div>
  );
};

const EmptyState = () => {
  return (
    <div className="text-center py-12">
      <div className="flex justify-center mb-4">
        <MessageSquare className="h-12 w-12 text-muted-foreground/50" />
      </div>
      <h3 className="text-lg font-medium mb-2">Chưa có bình luận nào</h3>
      <p className="text-sm text-muted-foreground">
        Hãy là người đầu tiên bình luận về chiến dịch này
      </p>
    </div>
  );
};

const CommentBox = ({
  comments = [],
  onAddComment,
  onReply,
  isLoading = false,
  isSubmitting = false,
}) => {
  const [activeReplyId, setActiveReplyId] = useState(null);
  const [showAllComments, setShowAllComments] = useState(false);

  const commentMap = comments.reduce((acc, comment) => {
    acc[comment.id] = {
      ...comment,
      replies: [],
    };
    return acc;
  }, {});

  comments.forEach((comment) => {
    if (comment.parentId) {
      const parent = commentMap[comment.parentId];
      if (parent) {
        parent.replies.push(commentMap[comment.id]);
      }
    }
  });

  const topLevelComments = Object.values(commentMap).filter(
    (comment) => !comment.parentId
  );

  const displayedComments = showAllComments
    ? topLevelComments
    : topLevelComments.slice(0, 5);

  const hasMoreComments = !showAllComments && topLevelComments.length > 5;

  if (isLoading) {
    return (
      <div className="space-y-6">
        {[1, 2, 3].map((i) => (
          <CommentSkeleton key={i} />
        ))}
      </div>
    );
  }

  if (!comments.length) {
    return (
      <>
        <CommentForm
          onSubmit={(content) => onAddComment(content)}
          isLoading={isSubmitting}
        />
        <EmptyState />;
      </>
    );
  }

  return (
    <div className="space-y-6">
      {/* Always show CommentForm at the top */}
      <CommentForm
        onSubmit={(content) => onAddComment(content)}
        isLoading={isSubmitting}
      />

      {isLoading ? (
        <div className="space-y-6">
          {[1, 2, 3].map((i) => (
            <CommentSkeleton key={i} />
          ))}
        </div>
      ) : !comments.length ? (
        <EmptyState />
      ) : (
        <div className="space-y-6">
          {displayedComments.map((comment) => (
            <Comment
              key={comment.id}
              comment={comment}
              onReply={onReply}
              activeReplyId={activeReplyId}
              setActiveReplyId={setActiveReplyId}
              maxReplies={2}
            />
          ))}

          {hasMoreComments && (
            <div className="text-center pt-4">
              <Button
                variant="ghost"
                className="text-primary hover:text-primary/80"
                onClick={() => setShowAllComments(true)}
              >
                Xem tất cả {topLevelComments.length} bình luận
              </Button>
            </div>
          )}
        </div>
      )}
    </div>
  );
};

export default CommentBox;

```

### src/module/user/components/guide.cms.js
```js

```

### src/module/user/components/CommentForm.jsx
```jsx
import React, { useState } from "react";
import { Button } from "@/components/ui/button";
import { Textarea } from "@/components/ui/textarea";
import { Send } from "lucide-react";
import { toast } from "sonner";
import useUserStore from "@/hooks/useUserStore";

const CommentForm = ({
  onSubmit,
  isLoading = false,
  parentId = null,
  autoFocus = false,
  onCancel = null,
}) => {
  const [content, setContent] = useState("");

  const { user } = useUserStore();

  const handleSubmit = (e) => {
    e.preventDefault();

    if (!user) return toast.error("Vui lòng đăng nhập!");
    if (!content.trim()) return;

    onSubmit(content, parentId);
    setContent("");
  };

  return (
    <form onSubmit={handleSubmit} className="space-y-4">
      <Textarea
        value={content}
        onChange={(e) => setContent(e.target.value)}
        placeholder={parentId ? "Viết câu trả lời..." : "Viết bình luận..."}
        className="min-h-[100px]"
        autoFocus={autoFocus}
      />
      <div className="flex justify-end gap-2">
        {onCancel && (
          <Button type="button" variant="ghost" onClick={onCancel}>
            Hủy
          </Button>
        )}
        <Button type="submit" disabled={!content.trim() || isLoading}>
          {isLoading ? (
            <>
              <span className="animate-spin mr-2">◯</span>
              Đang gửi...
            </>
          ) : (
            <>
              <Send className="w-4 h-4 mr-2" />
              {parentId ? "Trả lời" : "Bình luận"}
            </>
          )}
        </Button>
      </div>
    </form>
  );
};

export default CommentForm;

```

### src/module/user/components/MetaMaskAccount.jsx
```jsx
import { Button } from "@/components/ui/button";
import { Wallet } from "lucide-react";
import React, { useEffect, useState } from "react";
import { toast } from "sonner";

const MetaMaskAccount = () => {
  const [account, setAccount] = useState(null);

  const getCurrentAccount = async () => {
    if (typeof window.ethereum === "undefined") {
      toast.message(
        "Vui lòng cài MetaMask và mở trang này bằng trình duyệt trong MetaMask."
      );
      return;
    }
    if (window.ethereum) {
      const accounts = await window.ethereum.request({
        method: "eth_requestAccounts",
      });
      setAccount(accounts[0]);
    } else {
      toast.message("Vui lòng cài MetaMask!");
    }
  };

  useEffect(() => {
    getCurrentAccount();
  }, []);

  const shortenAddress = (addr) =>
    addr ? `${addr.slice(0, 6)}...${addr.slice(-4)}` : "";

  return (
    <Button
      variant={account ? "secondary" : "default"}
      className="w-full md:w-32 md:rounded-full text-xs font-medium transition-all"
      onClick={getCurrentAccount}
    >
      <Wallet className="mr-2" />
      {account ? shortenAddress(account) : "Kết nối ví"}
    </Button>
  );
};

export default MetaMaskAccount;

```

### src/module/user/components/CampaignCard.jsx
```jsx
import { Badge } from "@/components/ui/badge";
import { Clock, Target, Pickaxe, Eye } from "lucide-react";
import { Button } from "@/components/ui/button";
import DOMPurify from "dompurify";
import { Link, useNavigate } from "react-router-dom";
import { useCharityDonation } from "@/hooks/useCharityDonation";
import { toast } from "sonner";
import { parseEther } from "ethers";
import { calculateEthGoal, updateCampaign } from "@/services/campaignService";
import { ADDRESS_ZERO } from "@/constants";
import { useState } from "react";

const CampaignCard = ({ campaign }) => {
  const { createCampaign } = useCharityDonation();
  const [isCreating, setIsCreating] = useState(false);
  const navigate = useNavigate();

  const renderMedia = () => {
    if (campaign.cover.type === "VIDEO") {
      return (
        <video
          src={campaign.cover.url}
          className="w-full h-48 object-cover"
          controls
          muted
        >
          <source src={campaign.cover.url} type="video/mp4" />
          Your browser does not support the video tag.
        </video>
      );
    }

    return (
      <img
        src={campaign.cover.url}
        alt={campaign.title}
        className="w-full h-48 object-cover"
      />
    );
  };

  const handleCreateContract = async (e) => {
    e.preventDefault();
    setIsCreating(true);
    try {
      const now = new Date();
      const deadline = new Date(campaign.deadline);
      if (deadline <= now) {
        toast.error("Thời gian hết hạn chiến dịch đã quá hạn.");
        return;
      }
      const durationInMinutes = Math.floor((deadline - now) / (1000 * 60));

      const ethAmount = await calculateEthGoal(campaign.goal);
      const goalInWei = parseEther(ethAmount.toFixed(18));
      const { chainCampaignId, txHash } = await createCampaign(
        campaign.title,
        ADDRESS_ZERO,
        goalInWei,
        durationInMinutes * 60,
        campaign.isNoLimit
      );
      const campaignUpdate = await updateCampaign(campaign.id, {
        chainCampaignId,
        txHash,
      });
      toast.success("Hợp đồng đã được tạo thành công!");
    } catch (error) {
      console.error("Error creating contract:", error);
      toast.error("Không thể tạo hợp đồng: " + error.message);
    } finally {
      setIsCreating(false);
    }
  };

  const handleCardClick = (e) => {
    // Prevent navigation if clicking on the create contract button
    if (e.target.closest("button")) {
      return;
    }
    navigate(`/fund/${campaign.id}`);
  };

  return (
    <div
      onClick={handleCardClick}
      className="border relative rounded-lg cursor-pointer overflow-hidden shadow-sm hover:shadow-md transition-shadow"
    >
      {renderMedia()}
      <div className="p-4">
        <h3
          className="text-xl font-semibold mb-2 truncate"
          title={campaign.title}
        >
          {campaign.title}
        </h3>
        <div
          className="text-gray-600 text-sm mb-4 line-clamp-2 h-10 overflow-hidden"
          dangerouslySetInnerHTML={{
            __html: DOMPurify.sanitize(campaign.description),
          }}
        />

        <div className="space-y-4">
          <div className="flex justify-between text-sm">
            <div className="flex items-center gap-2">
              <Target className="w-4 h-4" />
              <span>{campaign.goal.eth} ETH</span>
            </div>
            <div className="flex items-center gap-2">
              <Clock className="w-4 h-4" />
              <span>{campaign.deadline}</span>
            </div>
          </div>

          <div className="w-full bg-gray-200 rounded-full h-2">
            <div
              className="bg-primary h-2 rounded-full transition-all"
              style={{ width: `${campaign.totalDonated.progress}%` }}
            />
          </div>

          <div className="flex justify-between text-sm text-gray-600">
            <span>Đã gây quỹ: {campaign.totalDonated.eth} ETH</span>
            <span>{campaign.totalDonated.progress}%</span>
          </div>

          {campaign.status === "ACTIVE" && !campaign.chainCampaignId && (
            <Button
              onClick={handleCreateContract}
              className="w-full"
              variant="outline"
              disabled={isCreating}
            >
              {isCreating ? (
                <>
                  <span className="animate-spin mr-2">◯</span>
                  Đang tạo hợp đồng...
                </>
              ) : (
                <>
                  <Pickaxe className="w-4 h-4 mr-2" />
                  Tạo hợp đồng
                </>
              )}
            </Button>
          )}
          {campaign.chainCampaignId && (
            <a
              href={`https://sepolia.etherscan.io/tx/${campaign.txHash}`}
              target="_blank"
              rel="noopener noreferrer"
              className="inline-flex items-center justify-center w-full rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 border border-input bg-background hover:bg-accent hover:text-accent-foreground h-10 px-4 py-2"
            >
              <Eye className="w-4 h-4 mr-2" />
              Xem hợp đồng
            </a>
          )}
        </div>
      </div>
      <Badge
        className="absolute top-4 right-4"
        variant={campaign.status === "ACTIVE" ? "default" : "secondary"}
      >
        {campaign.status}
      </Badge>
    </div>
  );
};

export default CampaignCard;

```

### src/module/user/components/KeyFeature.jsx
```jsx
import { Gem, Origami, Zap } from "lucide-react";
import React from "react";

const KeyFeature = () => {
  const features = [
    {
      icon: <Origami className="w-5 h-5" />,
      text: "Miễn phí",
    },
    {
      icon: <Zap className="w-5 h-5" />,
      text: "Giao dịch nhanh chóng",
    },
    {
      icon: <Gem className="w-5 h-5" />,
      text: "Đảm bảo tính bảo mật và an toàn",
    },
  ];

  return (
    <div className="bg-[#F9F4CB] text-primary py-8">
      <div className="container mx-auto px-4">
        <div className="flex flex-col md:flex-row items-center justify-center gap-6 md:gap-4">
          {features.map((feature, index) => (
            <React.Fragment key={index}>
              <div className="flex items-center gap-2 text-sm md:text-base">
                {feature.icon}
                <span>{feature.text}</span>
              </div>
              {index < features.length - 1 && (
                <hr className="hidden md:block w-20 border border-primary border-dashed" />
              )}
            </React.Fragment>
          ))}
        </div>
      </div>
    </div>
  );
};

export default KeyFeature;

```

### src/module/user/components/FundBox.jsx
```jsx
import ShareModal from "@/components/ShareModal/ShareModal";
import { Button } from "@/components/ui/button";
import { formatVND } from "@/utils/helper";
import {
  ChartNoAxesCombined,
  Clock,
  HandHeart,
  Share,
  ExternalLink,
} from "lucide-react";
import React, { useState } from "react";
import { useQuery } from "@tanstack/react-query";
import { useCharityDonation } from "@/hooks/useCharityDonation";
import { formatEther, parseEther } from "ethers";
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog";
import { Input } from "@/components/ui/input";
import { toast } from "sonner";
import { Progress } from "@/components/ui/progress";
import CircleProgress from "@/components/CircleProgress/CircleProgress";
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from "@/components/ui/tooltip";
import { createDonation } from "@/services/donationService";

const FundBox = ({ campaign, onChainCampaign, donors, isDonorsLoading }) => {
  const [showAll, setShowAll] = useState(false);
  const [amount, setAmount] = useState("");
  const [isLoading, setIsLoading] = useState(false);
  const { donateETH } = useCharityDonation();

  const handleDonate = async () => {
    if (!amount || Number(amount) <= 0) {
      toast.error("Vui lòng nhập số tiền hợp lệ");
      return;
    }
    try {
      setIsLoading(true);
      const { txHash, receipt } = await donateETH(
        campaign.chainCampaignId,
        amount
      );
      console.log("Receipt:", receipt);
      console.log("txHash:", txHash);
      const donation = await createDonation({
        campaignId: campaign.id,
        amount: Number(amount),
        txHash: txHash,
      });
      console.log("donation:", donation);

      toast.success("Quyên góp thành công!");
      setAmount("");
    } catch (error) {
      console.error("Donation error:", error);
      toast.error("Quyên góp thất bại: " + error.message);
    } finally {
      setIsLoading(false);
    }
  };

  const displayDonations = showAll ? donors : donors?.slice(0, 3);
  const progress = onChainCampaign?.totalDonated?.progress || 0;

  return (
    <div className="bg-white shadow-md rounded-lg p-6 flex flex-col gap-6">
      <div className="flex items-center gap-6">
        <div>
          <h3 className="font-semibold text-2xl">
            {campaign.status === "FINISHED" && onChainCampaign?.goal.eth}
            {onChainCampaign?.totalDonated.eth} ETH Raise
          </h3>
          <div className="text-sm text-muted-foreground flex gap-2 items-center">
            <span className="font-semibold underline">
              {onChainCampaign?.goal.eth} ETH
            </span>
            <span>·</span>
            <span>{donors?.length || 0} Đóng góp</span>
          </div>
        </div>
        <div className="relative w-24 h-2w-24">
          {campaign.status === "FINISHED" && <CircleProgress progress={100} />}
          {campaign.status !== "FINISHED" && (
            <CircleProgress progress={progress} />
          )}
        </div>
      </div>
      <div className="flex gap-3 flex-col">
        {campaign.status !== "FINISHED" && <ShareModal campaign={campaign} />}
        {campaign.status !== "FINISHED" && (
          <Dialog>
            <DialogTrigger asChild>
              <Button size="lg" className="text-lg font-medium">
                <HandHeart className="mr-2 h-5 w-5" /> Quyên góp
              </Button>
            </DialogTrigger>
            <DialogContent className="sm:max-w-[425px]">
              <DialogHeader>
                <DialogTitle className="text-2xl font-semibold text-center pb-2">
                  Quyên góp cho chiến dịch
                </DialogTitle>
                <p className="text-center text-muted-foreground">
                  Mọi khoản đóng góp đều có ý nghĩa, dù lớn hay nhỏ
                </p>
              </DialogHeader>
              <div className="space-y-6 pt-4">
                <div className="space-y-4">
                  <div className="bg-muted/50 p-4 rounded-lg space-y-2">
                    <div className="flex justify-between text-sm">
                      <span className="text-muted-foreground">Mục tiêu</span>
                      <span className="font-medium">
                        {onChainCampaign?.goal.eth} ETH
                      </span>
                    </div>
                    <div className="flex justify-between text-sm">
                      <span className="text-muted-foreground">
                        Đã quyên góp
                      </span>
                      <span className="font-medium">
                        {onChainCampaign?.totalDonated.eth} ETH
                      </span>
                    </div>
                    <Progress value={progress} className="h-2" />
                  </div>

                  <div className="space-y-2">
                    <label htmlFor="amount" className="text-sm font-medium">
                      Số lượng ETH muốn quyên góp
                    </label>
                    <div className="relative">
                      <Input
                        id="amount"
                        type="number"
                        step="0.01"
                        min="0"
                        value={amount}
                        onChange={(e) => setAmount(e.target.value)}
                        placeholder="0.00"
                        className="pr-12 text-lg"
                      />
                      <div className="absolute inset-y-0 right-3 flex items-center text-sm font-medium text-muted-foreground">
                        ETH
                      </div>
                    </div>
                    <p className="text-xs text-muted-foreground">
                      Tối thiểu 0.01 ETH
                    </p>
                  </div>
                </div>

                <Button
                  className="w-full h-12 text-lg font-medium"
                  onClick={handleDonate}
                  disabled={isLoading || !amount || Number(amount) <= 0}
                >
                  {isLoading ? (
                    <>
                      <span className="animate-spin mr-2">◯</span>
                      Đang xử lý...
                    </>
                  ) : (
                    "Xác nhận quyên góp"
                  )}
                </Button>

                <p className="text-xs text-center text-muted-foreground">
                  Bằng cách quyên góp, bạn đồng ý với{" "}
                  <a href="#" className="underline hover:text-primary">
                    điều khoản dịch vụ
                  </a>{" "}
                  của chúng tôi
                </p>
              </div>
            </DialogContent>
          </Dialog>
        )}
        {campaign.status === "FINISHED" && (
          <Button size="lg" className="" variant="outline">
            <Clock /> Chiến dịch gây quỹ đã kết thúc
          </Button>
        )}
      </div>
      <div className="flex gap-4 items-center">
        <span className="size-10 rounded-full bg-slate-200 flex items-center justify-center">
          <ChartNoAxesCombined size={18} />
        </span>
        <span className="text-primary font-semibold">
          {donors?.length || 0} người đã quyên góp
        </span>
      </div>

      <div className="grid grid-cols-1 gap-2" id="donors">
        {isDonorsLoading ? (
          <div className="animate-pulse space-y-4">
            {[1, 2, 3].map((i) => (
              <div key={i} className="flex gap-4 items-center">
                <div className="size-10 bg-gray-200 rounded-full" />
                <div className="flex-1 space-y-2">
                  <div className="h-4 bg-gray-200 rounded w-1/4" />
                  <div className="h-4 bg-gray-200 rounded w-1/2" />
                </div>
              </div>
            ))}
          </div>
        ) : (
          displayDonations?.map((donation, index) => (
            <div key={index} className="flex gap-4 items-center">
              <Avatar>
                <AvatarFallback>A</AvatarFallback>
              </Avatar>
              <div className="flex flex-col">
                <TooltipProvider>
                  <Tooltip>
                    <TooltipTrigger>
                      <a
                        href={`https://sepolia.etherscan.io/address/${donation?.address}`}
                        target="_blank"
                        rel="noopener noreferrer"
                        className="flex items-center gap-1 hover:text-primary"
                      >
                        {donation?.short}
                        <ExternalLink className="w-3 h-3" />
                      </a>
                    </TooltipTrigger>
                    <TooltipContent>{donation?.address}</TooltipContent>
                  </Tooltip>
                </TooltipProvider>
                <div className="flex items-center gap-2">
                  <p className="font-semibold">
                    {/* {Number(formatEther(donation.amount)).toFixed(4)} ETH */}
                  </p>
                  <span className="text-sm text-muted-foreground">
                    {/* {new Date(donation.timestamp * 1000).toLocaleDateString()} */}
                  </span>
                </div>
              </div>
            </div>
          ))
        )}
      </div>

      <div className="flex gap-4">
        <Button
          variant="outline"
          className="flex-1"
          onClick={() => setShowAll(!showAll)}
          disabled={!donors?.length}
        >
          {showAll ? "Ẩn bớt" : "Xem tất cả"}
        </Button>
        <Button variant="outline" className="flex-1" disabled={!donors?.length}>
          Xem top
        </Button>
      </div>
    </div>
  );
};

export default FundBox;

```

### src/module/user/components/Topic.jsx
```jsx
import TopicCard from "@/components/Topic/TopicCard";
import React from "react";

const Topic = () => {
  return (
    <div className="container py-10 mx-auto px-4">
      <h2
        dangerouslySetInnerHTML={{ __html: "Featured topics" }}
        className="text-2xl md:text-3xl font-semibold text-center md:text-left"
      />
      <div className="grid gap-4 md:gap-6 mt-6 md:mt-8">
        {/* Horizontal card - full width on all devices */}
        <TopicCard layout="horizontal" />

        {/* Grid of cards - responsive columns */}
        <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-4 md:gap-6">
          <TopicCard />
          <TopicCard />
          <TopicCard />
        </div>
      </div>
    </div>
  );
};

export default Topic;

```

### src/module/user/components/Discover.jsx
```jsx
import Card from "@/components/Card/Card";
import { getCampaigns } from "@/services/campaignService";
import { useQuery } from "@tanstack/react-query";

const Discover = () => {
  const { data: campaigns, isLoading } = useQuery({
    queryKey: ["campaigns"],
    queryFn: () =>
      getCampaigns({
        page: 1,
        limit: 5,
      }),
  });
  console.log("campaigns", campaigns);

  return (
    <section className="py-10">
      <h2
        className="font-semibold mb-6 md:mb-10 text-2xl md:text-3xl text-center md:text-left"
        dangerouslySetInnerHTML={{
          __html:
            "Khám phá những người gây quỹ lấy cảm hứng từ những gì bạn quan tâm",
        }}
      />

      <div className="grid grid-cols-1 md:grid-cols-2 gap-4 md:gap-8">
        {/* Featured campaign */}
        {campaigns?.data?.[0] && (
          <Card
            size="lg"
            titleMaxLength={50}
            className="col-span-1 md:col-span-1"
            campaign={campaigns.data[0]}
          />
        )}

        {/* Grid of other campaigns */}
        <div className="grid grid-cols-1 sm:grid-cols-2 gap-4 md:gap-8">
          {campaigns?.data?.slice(1, 5).map((campaign) => (
            <Card key={campaign.id} campaign={campaign} titleMaxLength={30} />
          ))}
        </div>
      </div>

      {/* {isLoading && (
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4 md:gap-8">
          {[...Array(5)].map((_, i) => (
            <div key={i} className="animate-pulse">
              <div className="bg-gray-200 h-48 rounded-lg" />
            </div>
          ))}
        </div>
      )} */}
    </section>
  );
};

export default Discover;

```

### src/module/user/components/Guide.jsx
```jsx
import { Button } from "@/components/ui/button";
import React from "react";

const Guide = () => {
  return (
    <div className="container mx-auto py-10 md:py-20 px-4 md:px-6">
      <h2
        className="text-center font-semibold text-2xl md:text-4xl px-4"
        dangerouslySetInnerHTML={{
          __html: "Quyên góp với blockchain dễ dàng,<br/> bảo mật và minh bạch",
        }}
      />
      <div className="flex flex-col-reverse md:flex-row gap-6 mt-8 md:mt-16">
        {/* Image container */}
        <div className="flex-1 bg-primary relative rounded-md min-h-[300px] md:min-h-0">
          <img
            className="absolute bottom-0 left-1/2 -translate-x-1/2 w-[250px] md:w-[350px]"
            src="/step-3.png"
            alt="Guide illustration"
          />
        </div>

        {/* Steps container */}
        <div className="flex-1 flex gap-6 md:gap-8 flex-col">
          {/* Step 1 */}
          <div className="flex gap-4">
            <Button
              variant="outline"
              className="rounded-full font-semibold text-lg md:text-xl h-10 w-10 md:h-12 md:w-12 flex-shrink-0"
            >
              1
            </Button>
            <div>
              <h2
                className="font-semibold mb-2 text-xl md:text-2xl"
                dangerouslySetInnerHTML={{
                  __html:
                    "Sử dụng công cụ của chúng tôi để tạo chiến dịch quyên góp",
                }}
              />
              <p
                className="text-muted-foreground text-base md:text-2xl"
                dangerouslySetInnerHTML={{
                  __html:
                    "Giao diện đơn giản của chúng tôi sẽ hướng dẫn bạn thiết lập chiến dịch quyên góp, xác định mục tiêu và cập nhật bất kỳ lúc nào, tất cả đều với sự minh bạch của blockchain.",
                }}
              />
            </div>
          </div>

          {/* Step 2 */}
          <div className="flex gap-4">
            <Button
              variant="outline"
              className="rounded-full font-semibold text-lg md:text-xl h-10 w-10 md:h-12 md:w-12 flex-shrink-0"
            >
              2
            </Button>
            <div>
              <h2
                className="font-semibold mb-2 text-xl md:text-2xl"
                dangerouslySetInnerHTML={{
                  __html: "Tiếp cận người quyên góp bằng cách chia sẻ",
                }}
              />
              <p
                className="text-muted-foreground text-base md:text-2xl"
                dangerouslySetInnerHTML={{
                  __html:
                    "Chia sẻ liên kết chiến dịch của bạn và tận dụng sức mạnh của blockchain để thu hút người quyên góp, đảm bảo mỗi khoản đóng góp đều được theo dõi và minh bạch.",
                }}
              />
            </div>
          </div>

          {/* Step 3 */}
          <div className="flex gap-4">
            <Button
              variant="outline"
              className="rounded-full font-semibold text-lg md:text-xl h-10 w-10 md:h-12 md:w-12 flex-shrink-0"
            >
              3
            </Button>
            <div>
              <h2
                className="font-semibold mb-2 text-xl md:text-2xl"
                dangerouslySetInnerHTML={{
                  __html: "Nhận quyên góp một cách bảo mật",
                }}
              />
              <p
                className="text-muted-foreground text-base md:text-2xl"
                dangerouslySetInnerHTML={{
                  __html:
                    "Thêm thông tin ví của bạn hoặc mời người nhận quyên góp của bạn làm tương tự. Blockchain đảm bảo rằng mỗi khoản quyên góp được xử lý và ghi lại một cách bảo mật.",
                }}
              />
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default Guide;

```

### src/module/user/components/EditProfileForm.jsx
```jsx
import { Button } from "@/components/ui/button";
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import { useState } from "react";
import { Edit, Loader2 } from "lucide-react";

const EditProfileForm = ({ user, onSubmit, isLoading }) => {
  const [formData, setFormData] = useState({
    name: user?.name || "",
    bio: user?.bio || "",
    phoneNumber: user?.phoneNumber || "",
  });

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData((prev) => ({ ...prev, [name]: value }));
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    onSubmit(formData);
  };

  return (
    <Dialog>
      <DialogTrigger asChild>
        <Button variant="outline" size="sm">
          <Edit className="h-4 w-4 mr-2" />
          Chỉnh sửa
        </Button>
      </DialogTrigger>
      <DialogContent>
        <DialogHeader>
          <DialogTitle>Chỉnh sửa thông tin</DialogTitle>
        </DialogHeader>
        <form onSubmit={handleSubmit} className="space-y-4">
          <div className="space-y-2">
            <Label htmlFor="name">Tên</Label>
            <Input
              id="name"
              name="name"
              value={formData.name}
              onChange={handleChange}
              placeholder="Nhập tên của bạn"
            />
          </div>

          <div className="space-y-2">
            <Label htmlFor="bio">Tiểu sử</Label>
            <Textarea
              id="bio"
              name="bio"
              value={formData.bio}
              onChange={handleChange}
              placeholder="Giới thiệu về bản thân"
              rows={4}
            />
          </div>

          <div className="space-y-2">
            <Label htmlFor="phoneNumber">Số điện thoại</Label>
            <Input
              id="phoneNumber"
              name="phoneNumber"
              value={formData.phoneNumber}
              onChange={handleChange}
              placeholder="Nhập số điện thoại"
            />
          </div>

          <div className="flex justify-end gap-2">
            <Button type="submit" disabled={isLoading}>
              {isLoading ? (
                <>
                  <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                  Đang cập nhật...
                </>
              ) : (
                "Cập nhật"
              )}
            </Button>
          </div>
        </form>
      </DialogContent>
    </Dialog>
  );
};

export default EditProfileForm;

```

### src/module/user/components/Banner.jsx
```jsx
import { Button } from "@/components/ui/button";
import React from "react";

const Banner = () => {
  return (
    <div className="flex md:min-h-[80vh] py-10 flex-col justify-center ">
      <div className="flex flex-1 ">
        <div className="flex-1"></div>
        <div className="flex items-center flex-col gap-4">
          <p className="md:text-xl text-base font-semibold text-primary text-center md:mb-6 mb-2">
            {"#1 Nền tảng gây quỹ cộng đồng Blockchain"}
          </p>
          <h1
            className="md:text-7xl text-4xl  text-center capitalize leading-[48px] font-semibold tracking-tight md:leading-[90px]"
            dangerouslySetInnerHTML={{
              __html:
                "Gây quỹ <br/> Minh bạch <br/> với Hợp đồng <br/> Thông minh",
            }}
          />
          <Button size="xl" className="font-semibold text-lg mt-2 rounded-2xl">
            {"Bắt đầu chiến dịch"}
          </Button>
        </div>
        <div className="flex-1"></div>
      </div>
      <div className="flex gap-10 pt-10 md:px-0 px-4">
        <div className="flex w-2/5 justify-end">
          <p
            className="font-semibold md:text-2xl text-base"
            dangerouslySetInnerHTML={{
              __html:
                "Kết nối từ thiện toàn cầu <br/> với công nghệ Blockchain.*",
            }}
          />
        </div>
        <div className="flex w-3/5 justify-start">
          <p
            className="text-xl text-muted-foreground md:block hidden"
            dangerouslySetInnerHTML={{
              __html:
                "Bắt đầu chỉ trong vài phút — Với công nghệ Blockchain minh bạch,<br/> bạn có thể dễ dàng tạo chiến dịch, chia sẻ câu chuyện ý nghĩa <br/> và kết nối mạnh mẽ với cộng đồng để lan tỏa lòng tốt đến mọi người.",
            }}
          />
          <p
            className="text-xl text-muted-foreground md:hidden block"
            dangerouslySetInnerHTML={{
              __html:
                "Bắt đầu chỉ trong vài phút — Với công nghệ Blockchain minh bạch.",
            }}
          />
        </div>
      </div>
    </div>
  );
};

export default Banner;

```

### src/module/user/components/Brand.jsx
```jsx
import { BicepsFlexed, Send, ShieldCheck } from "lucide-react";
import React from "react";

const Brand = () => {
  return (
    <div className="bg-primary/10 py-8 md:py-[88px]">
      <div className="container mx-auto px-4 md:px-0">
        <div className="mb-8 md:mb-12 text-lg md:text-[20px] font-semibold leading-6 text-center md:text-left">
          Nhà dễ dàng, mạnh mẽ và đáng tin cậy của bạn để được giúp đỡ
        </div>
        <div className="grid grid-cols-1 md:grid-cols-3 gap-6 md:gap-12">
          <div className="flex gap-4 items-center">
            <Send className="w-8 h-8 md:w-8 md:h-8" strokeWidth={0.75} />
            <div>
              <div className="font-semibold">Dễ dàng</div>
              <span className="text-sm md:text-base text-muted-foreground">
                Quyên góp nhanh chóng và dễ dàng
              </span>
            </div>
          </div>
          <div className="flex gap-4 items-center">
            <BicepsFlexed
              className="w-8 h-8 md:w-8 md:h-8"
              strokeWidth={0.75}
            />
            <div>
              <div className="font-semibold">Mạnh mẽ</div>
              <span className="text-sm md:text-base text-muted-foreground">
                Gửi sự giúp đỡ ngay cho mọi người
              </span>
            </div>
          </div>
          <div className="flex gap-4 items-center">
            <ShieldCheck className="w-8 h-8 md:w-8 md:h-8" strokeWidth={0.75} />
            <div>
              <div className="font-semibold">Đáng tin cậy</div>
              <span className="text-sm md:text-base text-muted-foreground">
                Hợp đồng thông minh
              </span>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default Brand;

```

### src/module/user/components/TopicTab.jsx
```jsx
import React from "react";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import Discover from "./Discover";

const TopicTab = () => {
  return (
    <Tabs defaultValue="trending" className="mt-8">
      <div className="w-[500px]">
        <TabsList className="grid grid-cols-3 ">
          <TabsTrigger value="trending">{"Xu hướng"}</TabsTrigger>
          <TabsTrigger value="nearYou">{"Tổ chức phi lợi nhuận"}</TabsTrigger>
          <TabsTrigger value="nonprofits">{"Gần bạn"}</TabsTrigger>
        </TabsList>
      </div>
      <TabsContent value="trending">
        <Discover />
      </TabsContent>
      <TabsContent value="nearYou">
        <Discover />
      </TabsContent>
      <TabsContent value="nonprofits">
        <Discover />
      </TabsContent>
    </Tabs>
  );
};

export default TopicTab;

```

### src/module/user/components/Header.jsx
```jsx
import { Button } from "@/components/ui/button";
import { HeartHandshake, LogIn, Menu, Search } from "lucide-react";
import { useEffect, useState } from "react";

import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import {
  NavigationMenu,
  NavigationMenuContent,
  NavigationMenuItem,
  NavigationMenuLink,
  NavigationMenuList,
  NavigationMenuTrigger,
} from "@/components/ui/navigation-menu";
import { Sheet, SheetContent, SheetTrigger } from "@/components/ui/sheet";
import useUserStore from "@/hooks/useUserStore";
import { LogOut, Settings, User } from "lucide-react";
import { Link } from "react-router-dom";
import MetaMaskAccount from "./MetaMaskAccount";
import { useNotification } from "@/components/NotificationProvider";
import NotificationList from "@/components/NotificationList";

const Header = () => {
  const [isScrolled, setIsScrolled] = useState(false);
  const { unreadCount } = useNotification();
  useEffect(() => {
    const handleScroll = () => {
      setIsScrolled(window.scrollY > 10);
    };

    window.addEventListener("scroll", handleScroll);
    return () => window.removeEventListener("scroll", handleScroll);
  }, []);

  const handleNaivigation = (path) => {
    window.scrollTo({
      top: 0,
      behavior: "smooth",
    });
    setTimeout(() => {
      window.location.href = path;
    }, 500);
  };
  const { user } = useUserStore();

  const MobileNav = () => (
    <Sheet>
      <SheetTrigger asChild>
        <Button variant="ghost" size="icon" className="md:hidden">
          <Menu className="h-6 w-6" />
        </Button>
      </SheetTrigger>
      <SheetContent side="left" className="w-72 flex flex-col justify-between">
        <div className="flex flex-col  gap-4 mt-4">
          <div className="flex flex-col gap-2">
            <div className="flex items-center gap-2">
              <MetaMaskAccount />
            </div>
            <Button
              className="w-full justify-start font-semibold"
              variant={""}
              onClick={() => handleNaivigation("/create/fundraiser/category")}
            >
              <span>Tạo chiến dịch</span>
            </Button>
          </div>

          <div className="border-t pt-4">
            <Link to="/search" className="flex items-center gap-2">
              <Search className="h-5 w-5" />
              <span>Tìm kiếm</span>
            </Link>
          </div>

          {/* Existing mobile menu items */}
          <div className="space-y-4">
            <div>
              <h3 className="font-semibold mb-2">Quyên góp</h3>
              <div className="grid gap-2 pl-2">
                <Link to="/discover">Danh mục</Link>
                <Link to="/category">Hỗ trợ khẩn cấp</Link>
                <Link to="/category">Quỹ tác động xã hội</Link>
                <Link to="/category">Không gian ủng hộ</Link>
              </div>
            </div>
            <div>
              <h3 className="font-semibold mb-2">Gây quỹ</h3>
              <div className="grid gap-2 pl-2">
                <Link to="/category">Cách bắt đầu</Link>
                <Link to="/category">Danh mục gây quỹ</Link>
                <Link to="/category">Gây quỹ theo nhóm</Link>
                <Link to="/category">Blog về gây quỹ</Link>
              </div>
            </div>
          </div>
        </div>
        <div>
          {!user && (
            <Button
              variant="outline"
              className="flex gap-1 w-full justify-start"
              onClick={() => handleNaivigation("/sign-in")}
            >
              <LogIn />
              <span>Đăng nhập</span>
            </Button>
          )}
        </div>
      </SheetContent>
    </Sheet>
  );

  return (
    <header
      className={`z-50 h-20 py-4 items-center fixed top-0 left-0 right-0 transition-all duration-300 
        ${
          isScrolled
            ? "bg-white/80 backdrop-blur-lg shadow-md"
            : "bg-transparent"
        }`}
    >
      <div className="flex items-center container mx-auto px-4">
        <div className="flex-1 flex gap-2 items-center">
          <MobileNav />
          <div className="hidden md:flex gap-2">
            <Button
              variant="nav"
              className="flex gap-1"
              onClick={() => handleNaivigation("/search")}
            >
              <Search />
              <span>Tìm kiếm</span>
            </Button>
            <NavigationMenu>
              <NavigationMenuList>
                <NavigationMenuItem>
                  <NavigationMenuTrigger className="bg-transparent rounded-full">
                    <span>Quyên góp</span>
                  </NavigationMenuTrigger>
                  <NavigationMenuContent className="w-fit">
                    <div className="p-3 md:w-[600px] w-fit flex flex-col">
                      <div className="flex gap-2 items-center font-semibold">
                        <img
                          className="size-10"
                          src="/images/heart.png"
                          alt="heart"
                        />
                        <h2 className="text-nowrap text-lg">
                          Khám phá các chiến dịch gây quỹ để ủng hộ
                        </h2>
                      </div>
                      <div className="grid grid-cols-2 gap-4 mt-4">
                        <NavLink
                          href={"/discover"}
                          title={"Danh mục"}
                          sub={"Duyệt các chiến dịch theo danh mục"}
                        />
                      </div>
                    </div>
                  </NavigationMenuContent>
                </NavigationMenuItem>
                <NavigationMenuItem>
                  <NavigationMenuItem>
                    <NavigationMenuTrigger className="bg-transparent rounded-full">
                      <span>{"Gây quỹ"}</span>
                    </NavigationMenuTrigger>
                    <NavigationMenuContent className="w-fit">
                      <div className="p-3 md:w-[600px] w-fit flex flex-col">
                        <div className="flex gap-2 items-center font-semibold">
                          <img
                            className="size-10"
                            src="/images/heart.png"
                            alt="heart"
                          />
                          <h2 className="text-nowrap text-lg">
                            {"Bắt đầu gây quỹ, mẹo và tài nguyên"}
                          </h2>
                        </div>
                        <div className="grid grid-cols-2 gap-4 mt-4">
                          <NavLink
                            href={"/category"}
                            title={"Cách bắt đầu một chiến dịch Chain4Good"}
                            sub={
                              "Hướng dẫn từng bước, ví dụ minh họa và hơn thế nữa"
                            }
                          />
                          <NavLink
                            href={"/category"}
                            title={"Danh mục gây quỹ"}
                            sub={"Tìm danh mục phù hợp với bạn"}
                          />
                          <NavLink
                            href={"/category"}
                            title={"Gây quỹ theo nhóm"}
                            sub={"Gây quỹ cùng với một nhóm"}
                          />
                        </div>
                      </div>
                    </NavigationMenuContent>
                  </NavigationMenuItem>
                </NavigationMenuItem>
              </NavigationMenuList>
            </NavigationMenu>
          </div>
        </div>

        {/* Logo */}
        <div>
          <Link to="/">
            <img
              src={"/logo.png"}
              alt="logo"
              className="object-center overflow-hidden w-[100px] md:w-[120px]"
            />
          </Link>
        </div>

        {/* Right section */}
        <div className="flex-1 hidden md:flex gap-2 items-center justify-end">
          <MetaMaskAccount />
          {!user && (
            <Button
              variant="nav"
              className="flex gap-1"
              onClick={() => handleNaivigation("/sign-up")}
            >
              <span>Đăng nhập</span>
            </Button>
          )}
          <Button
            className="font-semibold rounded-full text-sm md:text-base"
            variant={""}
            onClick={() => handleNaivigation("/create/fundraiser/category")}
          >
            <span>Bắt đầu chiến dịch</span>
          </Button>
          <div>
            <NotificationList />
          </div>
          {user && (
            <DropdownMenu>
              <DropdownMenuTrigger>
                <Avatar>
                  <AvatarImage
                    src={user.image || "https://github.com/shadcn.png"}
                    alt="@shadcn"
                  />
                  <AvatarFallback>CG</AvatarFallback>
                </Avatar>
              </DropdownMenuTrigger>
              <DropdownMenuContent align="end">
                <DropdownMenuLabel>Tài khoản của tôi</DropdownMenuLabel>
                <DropdownMenuSeparator />
                <DropdownMenuItem
                  className="cursor-pointer"
                  onClick={() => handleNaivigation("/profile")}
                >
                  <User className="mr-2 h-4 w-4" />
                  <span>Hồ sơ</span>
                </DropdownMenuItem>
                <DropdownMenuItem
                  className="cursor-pointer"
                  onClick={() => handleNaivigation("/my-campaigns")}
                >
                  <HeartHandshake className="mr-2 h-4 w-4" />
                  <span>Chiến dịch của tôi</span>
                </DropdownMenuItem>
                <DropdownMenuItem
                  className="cursor-pointer"
                  onClick={() => handleNaivigation("/settings")}
                >
                  <Settings className="mr-2 h-4 w-4" />
                  <span>Cài đặt</span>
                </DropdownMenuItem>
                <DropdownMenuSeparator />
                <DropdownMenuItem
                  className="cursor-pointer text-red-600"
                  onClick={() => {
                    const userStore = useUserStore.getState();
                    userStore.logout();
                    handleNaivigation("/");
                  }}
                >
                  <LogOut className="mr-2 h-4 w-4" />
                  <span>Đăng xuất</span>
                </DropdownMenuItem>
              </DropdownMenuContent>
            </DropdownMenu>
          )}
        </div>
      </div>
    </header>
  );
};

// Update NavLink component for mobile responsiveness
const NavLink = ({ href, title, sub }) => {
  return (
    <NavigationMenuLink
      href={href}
      className="cursor-pointer hover:bg-primary/10 rounded-md p-2 flex flex-col"
    >
      <h3 className="font-semibold text-sm md:text-base">{title}</h3>
      <p className="text-muted-foreground text-xs hidden md:block">{sub}</p>
    </NavigationMenuLink>
  );
};

export default Header;

```

### src/module/user/components/ShareModal.jsx
```jsx
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog";

const ShareModal = ({ isOpen, onClose, onOpen }) => {
  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      <DialogContent>
        <DialogHeader>
          <DialogTitle>Are you absolutely sure?</DialogTitle>
          <DialogDescription>
            This action cannot be undone. This will permanently delete your
            account and remove your data from our servers.
          </DialogDescription>
        </DialogHeader>
      </DialogContent>
    </Dialog>
  );
};

export default ShareModal;

```

### src/services/coverService.js
```js
import { CoverV1 } from "@/constants/linkApis";
import queryString from "query-string";
import requestInstance from "@/services/axiosInstance";

export const createCover = async (media, type) => {
  const url = queryString.stringifyUrl({
    url: CoverV1.CREATE_COVER,
  });
  const { data } = await requestInstance.post(url, {
    url: media,
    type: type ?? "IMAGE",
  });
  return data;
};

```

### src/services/axiosInstance.js
```js
import axios from "axios";
import Cookies from "js-cookie";

const instance = axios.create({
  baseURL:
    import.meta.env.VITE_APP_BACKEND_URL || "https://api.chain4good.io.vn",
  timeout: 120000,
  withCredentials: true,
});

instance.interceptors.request.use((config) => {
  const accessToken = Cookies.get("access_token");
  if (accessToken) {
    config.headers.Authorization = `Bearer ${accessToken}`;
  }
  return config;
});

instance.interceptors.response.use(
  (response) => response,
  async (error) => {
    const originalRequest = error.config;

    // Nếu lỗi 401 và chưa thử refresh token
    if (error.response.status === 401 && !originalRequest._retry) {
      originalRequest._retry = true;

      try {
        // Gọi API refresh token
        await instance.post("/auth/refresh");

        // Thử lại request ban đầu
        return instance(originalRequest);
      } catch (refreshError) {
        // Nếu refresh token thất bại, chuyển về trang login
        // window.location.href = "/login";
        return Promise.reject(refreshError);
      }
    }

    return Promise.reject(error);
  }
);

export default instance;

```

### src/services/countryService.js
```js
import { AuthV1, CategoryV1, CountryV1 } from "@/constants/linkApis";
import queryString from "query-string";
import requestInstance from "@/services/axiosInstance";

export const getCountries = async () => {
  const url = queryString.stringifyUrl({
    url: CountryV1.GET_COUNTRIES,
  });
  const { data } = await requestInstance.get(url);
  return data;
};

```

### src/services/campaignService.js
```js
import { CampaignV1 } from "@/constants/linkApis";
import requestInstance from "@/services/axiosInstance";
import queryString from "query-string";

export const createCampaign = async (values) => {
  const url = queryString.stringifyUrl({
    url: CampaignV1.CREATE_CAMPAIGN,
  });
  const { data } = await requestInstance.post(url, values);
  return data;
};

// export const getCampaigns = async () => {
//   const url = queryString.stringifyUrl({
//     url: CampaignV1.GET_CAMPAIGNS,
//   });
//   const { data } = await requestInstance.get(url);
//   return data;
// };

export const getCampaignById = async (id) => {
  const url = queryString.stringifyUrl({
    url: `${CampaignV1.GET_CAMPAIGN}/${id}`,
  });
  const { data } = await requestInstance.get(url);
  return data;
};

export const getMyCampaigns = async (page, limit) => {
  const url = queryString.stringifyUrl({
    url: CampaignV1.GET_MY_CAMPAIGNS,
    query: {
      page,
      limit,
    },
  });
  const { data } = await requestInstance.get(url);
  return data;
};

export const updateCampaign = async (id, values) => {
  const url = queryString.stringifyUrl({
    url: `${CampaignV1.UPDATE_CAMPAIGN}/${id}`,
  });
  const { data } = await requestInstance.patch(url, values);
  return data;
};

export const calculateEthGoal = async (amount) => {
  const url = queryString.stringifyUrl({
    url: CampaignV1.GET_CALCULATE_ETH_GOAL,
    query: {
      vndAmount: amount,
    },
  });
  const { data } = await requestInstance.get(url);
  return data;
};

export const getCampaignsByCategoryId = async (id, page, limit) => {
  const url = queryString.stringifyUrl({
    url: `${CampaignV1.GET_CAMPAIGNS}`,
    query: {
      categoryId: id,
      page,
      limit,
    },
  });
  const { data } = await requestInstance.get(url);
  return data;
};

export const getCampaigns = async (filters) => {
  // Add artificial delay
  // await new Promise((resolve) => setTimeout(resolve, 1500)); // 1.5 second delay

  const url = queryString.stringifyUrl({
    url: CampaignV1.GET_CAMPAIGNS,
    query: {
      ...filters,
    },
  });
  const { data } = await requestInstance.get(url);
  return data;
};

```

### src/services/fundraiseTypeService.js
```js
import {
  AuthV1,
  CategoryV1,
  CountryV1,
  FundraiseTypeV1,
} from "@/constants/linkApis";
import queryString from "query-string";
import requestInstance from "@/services/axiosInstance";

export const getFundraiseTypes = async () => {
  const url = queryString.stringifyUrl({
    url: FundraiseTypeV1.GET_FUNDRAISE_TYPES,
  });
  const { data } = await requestInstance.get(url);
  return data;
};

```

### src/services/categoryService.js
```js
import { AuthV1, CategoryV1 } from "@/constants/linkApis";
import queryString from "query-string";
import requestInstance from "@/services/axiosInstance";

export const getCategories = async () => {
  const url = queryString.stringifyUrl({
    url: CategoryV1.GET_CATEGORIES,
  });
  const { data } = await requestInstance.get(url);
  return { data };
};

export const getCategoryById = async (id) => {
  const url = queryString.stringifyUrl({
    url: `${CategoryV1.GET_CATEGORY}/${id}`,
  });
  const { data } = await requestInstance.get(url);
  return data;
};

```

### src/services/commentService.js
```js
import { CommentV1 } from "@/constants/linkApis";
import queryString from "query-string";
import requestInstance from "@/services/axiosInstance";
export const getCommentsByCampaign = async (id) => {
  const url = queryString.stringifyUrl({
    url: `${CommentV1.GET_COMMENT_BY_CAMPAIGN}/${id}`,
  });
  const { data } = await requestInstance.get(url);
  return data;
};

export const createComment = async (values) => {
  const url = queryString.stringifyUrl({
    url: CommentV1.CREATE_COMMENT,
  });
  const { data } = await requestInstance.post(url, values);
  return data;
};

```

### src/services/uploadService.js
```js
import { UploadV1 } from "@/constants/linkApis";
import requestInstance from "@/services/axiosInstance";
import queryString from "query-string";

export const uploadFile = async (file) => {
  const url = queryString.stringifyUrl({
    url: UploadV1.UPLOADS,
  });
  const formData = new FormData();
  formData.append("file", file);
  const { data } = await requestInstance.post(url, formData);
  return data;
};

```

### src/services/notificationService.js
```js
import { NotificationV1 } from "@/constants/linkApis";
import queryString from "query-string";
import requestInstance from "@/services/axiosInstance";
export const markAsRead = async (id) => {
  const url = queryString.stringifyUrl({
    url: `${NotificationV1.READ_NOTIFICATION}/${id}/read`,
  });
  const { data } = await requestInstance.patch(url);
  return data;
};

export const getNotifications = async (filters) => {
  const url = queryString.stringifyUrl({
    url: NotificationV1.GET_NOTIFICATIONS,
    query: {
      ...filters,
    },
  });
  const { data } = await requestInstance.get(url);
  return data;
};

export const markAllAsRead = async () => {
  const url = queryString.stringifyUrl({
    url: NotificationV1.MARK_ALL_AS_READ,
  });
  const { data } = await requestInstance.patch(url);
  return data;
};

export const getUnreadNotifications = async () => {
  const url = queryString.stringifyUrl({
    url: NotificationV1.UNREAD_COUNT,
  });
  const { data } = await requestInstance.get(url);
  return data;
};

```

### src/services/userService.js
```js
import { UserV1 } from "@/constants/linkApis";
import requestInstance from "@/services/axiosInstance";
import queryString from "query-string";

export const updateUser = async (id, values) => {
  const url = queryString.stringifyUrl({
    url: UserV1.UPDATE_USER + `/${id}`,
  });
  const { data } = await requestInstance.patch(url, values);
  return data;
};

export const updateUserImage = async (userId, data) => {
  const url = queryString.stringifyUrl({
    url: `${UserV1.UPDATE_USER}/${userId}`,
  });
  const response = await requestInstance.patch(url, data);
  return response.data;
};

```

### src/services/aiService.js
```js
import { AiV1 } from "@/constants/linkApis";
import queryString from "query-string";
import requestInstance from "@/services/axiosInstance";
export const analyzeCampaign = async (values) => {
  const url = queryString.stringifyUrl({
    url: AiV1.AI_ANALYZE_CAMPAIGN,
  });
  const { data } = await requestInstance.post(url, values);
  return data;
};

```

### src/services/authService.js
```js
import { AuthV1 } from "@/constants/linkApis";
import useUserStore from "@/hooks/useUserStore";
import requestInstance from "@/services/axiosInstance";
import queryString from "query-string";

export const signup = async (data) => {
  const url = queryString.stringifyUrl({
    url: AuthV1.REGISTER,
  });
  const response = await requestInstance.post(url, data);
  return response;
};

export const signin = async (data) => {
  const url = queryString.stringifyUrl({
    url: AuthV1.LOGIN,
  });
  const response = await requestInstance.post(url, data);
  return response;
};

export const getProfile = async () => {
  const url = queryString.stringifyUrl({
    url: AuthV1.GET_PROFILE,
  });
  const response = await requestInstance.get(url);
  const userStore = useUserStore.getState();
  userStore.setUser(response.data);
  return response;
};

```

### src/services/donationService.js
```js
import { DonationV1 } from "@/constants/linkApis";
import queryString from "query-string";
import requestInstance from "@/services/axiosInstance";

export const createDonation = async (values) => {
  const url = queryString.stringifyUrl({
    url: DonationV1.CREATE_DONATION,
  });
  const { data } = await requestInstance.post(url, values);
  return data;
};

export const getDonations = async () => {
  const url = queryString.stringifyUrl({
    url: DonationV1.GET_DONATIONS,
  });
  const { data } = await requestInstance.get(url);
  return data;
};

export const getDonationById = async (id) => {
  const url = queryString.stringifyUrl({
    url: `${DonationV1.GET_DONATION}/${id}`,
  });
  const { data } = await requestInstance.get(url);
  return data;
};

export const updateDonation = async (id, values) => {
  const url = queryString.stringifyUrl({
    url: `${DonationV1.UPDATE_DONATION}/${id}`,
  });
  const { data } = await requestInstance.patch(url, values);
  return data;
};

export const deleteDonation = async (id) => {
  const url = queryString.stringifyUrl({
    url: `${DonationV1.DELETE_DONATION}/${id}`,
  });
  const { data } = await requestInstance.delete(url);
  return data;
};

```

### src/utils/helper.js
```js
export function randomizePosition(min, max) {
  return Math.floor(Math.random() * (max - min + 1)) + min;
}
export const formatVND = (value) => {
  const number = value.replace(/\D/g, "");
  if (number === "") return "";
  return parseInt(number).toLocaleString("vi-VN");
};

```

### src/utils/metamask.js
```js
export const getCurrentAccount = async () => {
  if (window.ethereum) {
    const accounts = await window.ethereum.request({
      method: "eth_requestAccounts",
    });
    return accounts[0];
  } else {
    throw new Error("MetaMask chưa được cài");
  }
};

```

### src/components/DonateDialog.jsx
```jsx
import { useCharityDonation } from "@/hooks/useCharityDonation";
import { useState } from "react";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { toast } from "sonner";

const DonateDialog = ({ campaignId }) => {
  const { donateToken } = useCharityDonation();
  const [amount, setAmount] = useState("");
  const [isLoading, setIsLoading] = useState(false);

  const handleDonate = async () => {
    try {
      setIsLoading(true);

      // USDC token address on Ethereum
      const USDC_ADDRESS = "0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48";

      await donateToken(
        campaignId,
        USDC_ADDRESS,
        amount,
        6 // USDC has 6 decimals
      );

      toast.success("Quyên góp thành công!");
      setAmount("");
    } catch (error) {
      console.error("Donation error:", error);
      toast.error("Không thể quyên góp: " + error.message);
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="space-y-4">
      <Input
        type="number"
        value={amount}
        onChange={(e) => setAmount(e.target.value)}
        placeholder="Nhập số lượng token..."
        disabled={isLoading}
      />
      <Button
        onClick={handleDonate}
        disabled={!amount || isLoading}
        className="w-full"
      >
        {isLoading ? "Đang xử lý..." : "Quyên góp"}
      </Button>
    </div>
  );
};

export default DonateDialog;

```

### src/components/TextSplit/TextSplit.jsx
```jsx
import { animate } from 'motion'
import React, { useRef } from 'react'

const TextSplit = ({text, ...props}) => {
  const containerRef = useRef(null)

  useEffect(() => {
      document.fonts.ready.then(() => {
          if (!containerRef.current) return
          containerRef.current.style.visibility = "visible"
          const { words } = splitText(
              containerRef.current.querySelector("h1")!
          )
          animate(
              words,
              { opacity: [0, 1], y: [10, 0] },
              {
                  type: "spring",
                  duration: 2,
                  bounce: 0,
                  delay: stagger(0.05),
              }
          )
      })
  }, [])

  return (
      <div className="container" ref={containerRef}>
          <h1 className="h1" {...props}>
              {text}
          </h1>
      </div>
  )
}

export default TextSplit

```

### src/components/CreateCampaign/CreateCampaign.jsx
```jsx
import React, { useState } from "react";
import { ethers } from "ethers";
import { useCharityDonation } from "@/hooks/useCharityDonation";

const CreateCampaign = () => {
  const { createCampaign } = useCharityDonation();

  const [title, setTitle] = useState("");
  const [tokenAddress, setTokenAddress] = useState(
    "0x0000000000000000000000000000000000000000"
  ); // Default ETH
  const [goal, setGoal] = useState("");
  const [duration, setDuration] = useState("");
  const [isNoLimit, setIsNoLimit] = useState(false);
  const [loading, setLoading] = useState(false);
  const [success, setSuccess] = useState("");

  const handleSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);
    setSuccess("");
    try {
      const parsedGoal = ethers.parseEther(goal); // goal in ETH or tokens
      const parsedDuration = parseInt(duration) * 60; // assume duration in minutes

      await createCampaign(
        title,
        tokenAddress,
        parsedGoal,
        parsedDuration,
        isNoLimit
      );
      setSuccess("Chiến dịch đã được tạo thành công!");
    } catch (err) {
      console.error(err);
      alert(err?.message || "Có lỗi xảy ra");
    }
    setLoading(false);
  };

  return (
    <form
      onSubmit={handleSubmit}
      className="p-4 border rounded shadow-md max-w-md mx-auto"
    >
      <h2 className="text-xl font-bold mb-4">Tạo chiến dịch từ thiện</h2>

      <label className="block mb-2">
        Tiêu đề:
        <input
          type="text"
          value={title}
          onChange={(e) => setTitle(e.target.value)}
          className="w-full border px-2 py-1 rounded mt-1"
          required
        />
      </label>

      <label className="block mb-2">
        Địa chỉ Token (0x0 cho ETH):
        <input
          type="text"
          value={tokenAddress}
          onChange={(e) => setTokenAddress(e.target.value)}
          className="w-full border px-2 py-1 rounded mt-1"
          required
        />
      </label>

      <label className="block mb-2">
        Mục tiêu (ví dụ: 1.5):
        <input
          type="number"
          value={goal}
          onChange={(e) => setGoal(e.target.value)}
          className="w-full border px-2 py-1 rounded mt-1"
          required
          step="any"
        />
      </label>

      <label className="block mb-2">
        Thời hạn (phút):
        <input
          type="number"
          value={duration}
          onChange={(e) => setDuration(e.target.value)}
          className="w-full border px-2 py-1 rounded mt-1"
          required
        />
      </label>

      <label className="flex items-center mb-4">
        <input
          type="checkbox"
          checked={isNoLimit}
          onChange={(e) => setIsNoLimit(e.target.checked)}
          className="mr-2"
        />
        Không giới hạn (bỏ qua mục tiêu)
      </label>

      <button
        type="submit"
        className="bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700 disabled:opacity-50"
        disabled={loading}
      >
        {loading ? "Đang tạo..." : "Tạo chiến dịch"}
      </button>

      {success && <p className="text-green-600 mt-3">{success}</p>}
    </form>
  );
};

export default CreateCampaign;

```

### src/components/Icons/ZaloSvg.jsx
```jsx
import React from "react";

const ZaloSvg = (props) => {
  return (
    <svg
      xmlns="http://www.w3.org/2000/svg"
      viewBox="0 0 48 48"
      width="48px"
      height="48px"
      {...props}
    >
      <path
        fill="#2962ff"
        d="M15,36V6.827l-1.211-0.811C8.64,8.083,5,13.112,5,19v10c0,7.732,6.268,14,14,14h10 c4.722,0,8.883-2.348,11.417-5.931V36H15z"
      />
      <path
        fill="#eee"
        d="M29,5H19c-1.845,0-3.601,0.366-5.214,1.014C10.453,9.25,8,14.528,8,19 c0,6.771,0.936,10.735,3.712,14.607c0.216,0.301,0.357,0.653,0.376,1.022c0.043,0.835-0.129,2.365-1.634,3.742 c-0.162,0.148-0.059,0.419,0.16,0.428c0.942,0.041,2.843-0.014,4.797-0.877c0.557-0.246,1.191-0.203,1.729,0.083 C20.453,39.764,24.333,40,28,40c4.676,0,9.339-1.04,12.417-2.916C42.038,34.799,43,32.014,43,29V19C43,11.268,36.732,5,29,5z"
      />
      <path
        fill="#2962ff"
        d="M36.75,27C34.683,27,33,25.317,33,23.25s1.683-3.75,3.75-3.75s3.75,1.683,3.75,3.75 S38.817,27,36.75,27z M36.75,21c-1.24,0-2.25,1.01-2.25,2.25s1.01,2.25,2.25,2.25S39,24.49,39,23.25S37.99,21,36.75,21z"
      />
      <path
        fill="#2962ff"
        d="M31.5,27h-1c-0.276,0-0.5-0.224-0.5-0.5V18h1.5V27z"
      />
      <path
        fill="#2962ff"
        d="M27,19.75v0.519c-0.629-0.476-1.403-0.769-2.25-0.769c-2.067,0-3.75,1.683-3.75,3.75 S22.683,27,24.75,27c0.847,0,1.621-0.293,2.25-0.769V26.5c0,0.276,0.224,0.5,0.5,0.5h1v-7.25H27z M24.75,25.5 c-1.24,0-2.25-1.01-2.25-2.25S23.51,21,24.75,21S27,22.01,27,23.25S25.99,25.5,24.75,25.5z"
      />
      <path
        fill="#2962ff"
        d="M21.25,18h-8v1.5h5.321L13,26h0.026c-0.163,0.211-0.276,0.463-0.276,0.75V27h7.5 c0.276,0,0.5-0.224,0.5-0.5v-1h-5.321L21,19h-0.026c0.163-0.211,0.276-0.463,0.276-0.75V18z"
      />
    </svg>
  );
};

export default ZaloSvg;

```

### src/components/Icons/HeartDonateSvg.jsx
```jsx
import React from "react";

const HeartDonateSvg = () => {
  return (
    <svg
      aria-hidden="true"
      class="hrt-icon hrt-icon--large"
      focusable="false"
      viewBox="0 0 24 24"
    >
      <use href="/_next/static/images/core-df55c1862092b9c0b58bb2ef70e513712d74cb3a460950b367eede29e993e2ae.svg#donor"></use>
    </svg>
  );
};

export default HeartDonateSvg;

```

### src/components/Icons/GoogleIconSvg.jsx
```jsx
import React from "react";

const GoogleIconSvg = ({ ...rest }) => {
  return (
    <>
      <svg
        xmlns="http://www.w3.org/2000/svg"
        x="0px"
        y="0px"
        width="100"
        height="100"
        viewBox="0 0 48 48"
        {...rest}
      >
        <path
          fill="#fbc02d"
          d="M43.611,20.083H42V20H24v8h11.303c-1.649,4.657-6.08,8-11.303,8c-6.627,0-12-5.373-12-12	s5.373-12,12-12c3.059,0,5.842,1.154,7.961,3.039l5.657-5.657C34.046,6.053,29.268,4,24,4C12.955,4,4,12.955,4,24s8.955,20,20,20	s20-8.955,20-20C44,22.659,43.862,21.35,43.611,20.083z"
        ></path>
        <path
          fill="#e53935"
          d="M6.306,14.691l6.571,4.819C14.655,15.108,18.961,12,24,12c3.059,0,5.842,1.154,7.961,3.039	l5.657-5.657C34.046,6.053,29.268,4,24,4C16.318,4,9.656,8.337,6.306,14.691z"
        ></path>
        <path
          fill="#4caf50"
          d="M24,44c5.166,0,9.86-1.977,13.409-5.192l-6.19-5.238C29.211,35.091,26.715,36,24,36	c-5.202,0-9.619-3.317-11.283-7.946l-6.522,5.025C9.505,39.556,16.227,44,24,44z"
        ></path>
        <path
          fill="#1565c0"
          d="M43.611,20.083L43.595,20L42,20H24v8h11.303c-0.792,2.237-2.231,4.166-4.087,5.571	c0.001-0.001,0.002-0.001,0.003-0.002l6.19,5.238C36.971,39.205,44,34,44,24C44,22.659,43.862,21.35,43.611,20.083z"
        ></path>
      </svg>
    </>
  );
};

export default GoogleIconSvg;

```

### src/components/Icons/FacebookSvg.jsx
```jsx
import React from "react";

const FacebookSvg = ({ ...rest }) => {
  return (
    <svg
      xmlns="http://www.w3.org/2000/svg"
      x="0px"
      y="0px"
      width="100"
      height="100"
      viewBox="0 0 48 48"
      {...rest}
    >
      <path fill="#039be5" d="M24 5A19 19 0 1 0 24 43A19 19 0 1 0 24 5Z"></path>
      <path
        fill="#fff"
        d="M26.572,29.036h4.917l0.772-4.995h-5.69v-2.73c0-2.075,0.678-3.915,2.619-3.915h3.119v-4.359c-0.548-0.074-1.707-0.236-3.897-0.236c-4.573,0-7.254,2.415-7.254,7.917v3.323h-4.701v4.995h4.701v13.729C22.089,42.905,23.032,43,24,43c0.875,0,1.729-0.08,2.572-0.194V29.036z"
      ></path>
    </svg>
  );
};

export default FacebookSvg;

```

### src/components/NotificationProvider/index.jsx
```jsx
import { useSocket } from "@/hooks/useSocket";
import {
  getNotifications,
  getUnreadNotifications,
  markAllAsRead,
  markAsRead,
} from "@/services/notificationService";
import React, { useContext, useEffect, useState } from "react";

const NotificationContext = React.createContext({
  notifications: [],
  unreadCount: 0,
  markAsReadNotification: async () => {},
  markAllAsReadNotification: async () => {},
});

export const NotificationProvider = ({ children }) => {
  const [unreadCount, setUnreadCount] = useState(0);
  const { notifications, setNotifications } = useSocket();
  const [filters, setFilters] = useState({
    page: 1,
    limit: 10,
  });

  const markAsReadNotification = async (id) => {
    try {
      await markAsRead(id);
      setUnreadCount((prev) => Math.max(0, prev - 1));
    } catch (error) {
      console.error("Error marking notification as read:", error);
    }
  };

  const markAllAsReadNotification = async () => {
    try {
      await markAllAsRead();
      setUnreadCount(0);
    } catch (error) {
      console.error("Error marking all notifications as read:", error);
    }
  };

  useEffect(() => {
    const fetchUnreadCount = async () => {
      const data = await getUnreadNotifications();
      setUnreadCount(data);
    };
    fetchUnreadCount();
  }, [notifications]);

  useEffect(() => {
    const fetchNotifications = async () => {
      const { data } = await getNotifications(filters);
      setNotifications(data);
    };
    fetchNotifications();
  }, [filters, setNotifications, unreadCount]);

  return (
    <NotificationContext.Provider
      value={{
        notifications,
        unreadCount,
        markAsReadNotification,
        markAllAsReadNotification,
      }}
    >
      {children}
    </NotificationContext.Provider>
  );
};

// eslint-disable-next-line react-refresh/only-export-components
export const useNotification = () => useContext(NotificationContext);

```

### src/components/AnalyzeButton/index.jsx
```jsx
import { Button } from "@/components/ui/button";
import { Brain } from "lucide-react";

const AnalyzeButton = ({ onClick, isAnalyzing }) => {
  return (
    <Button
      onClick={onClick}
      disabled={isAnalyzing}
      variant="outline"
      className="w-full mb-4"
    >
      <Brain className={`mr-2 h-4 w-4 ${isAnalyzing ? "animate-pulse" : ""}`} />
      {isAnalyzing ? "Đang phân tích..." : "Phân tích bằng AI"}
    </Button>
  );
};

export default AnalyzeButton;

```

### src/components/ProgressBar/ProgressBar.jsx
```jsx
const ProgressBar = ({ value, max }) => {
  const percentage = (value / max) * 100;
  console.log(percentage);

  return (
    <div className="w-full">
      <div className="w-full bg-gray-200 rounded-full h-2 relative">
        <div
          className="h-2 rounded-full bg-gradient-to-r from-green-500 to-green-700"
          style={{ width: `${percentage}%` }}
        />
      </div>
      <div className="flex justify-between mt-1">
        <p className=" text-black font-semibold">
          {percentage === 100
            ? "Đã hoàn thành"
            : `${value.toLocaleString()} ETH`}
        </p>
        <p>
          <span className="text-gray-500">{max.toLocaleString()} ETH</span>
        </p>
      </div>
    </div>
  );
};

export default ProgressBar;

```

### src/components/VideoPlayer/VideoPlayer.jsx
```jsx
import React, { useState, useRef } from "react";
import { Play, Pause, Volume2, VolumeX, Maximize2 } from "lucide-react";
import { cn } from "@/lib/utils";
import { Button } from "@/components/ui/button";
import { Slider } from "@/components/ui/slider";

const VideoPlayer = ({ src, onVideoClick }) => {
  const [isPlaying, setIsPlaying] = useState(false);
  const [isMuted, setIsMuted] = useState(true);
  const [progress, setProgress] = useState(0);
  const [duration, setDuration] = useState(0);
  const videoRef = useRef(null);

  const togglePlay = (e) => {
    e.stopPropagation();
    if (isPlaying) {
      videoRef.current.pause();
    } else {
      videoRef.current.play();
    }
    setIsPlaying(!isPlaying);
  };

  const toggleMute = (e) => {
    e.stopPropagation();
    videoRef.current.muted = !isMuted;
    setIsMuted(!isMuted);
  };

  const handleTimeUpdate = () => {
    const progress =
      (videoRef.current.currentTime / videoRef.current.duration) * 100;
    setProgress(progress);
  };

  const handleLoadedMetadata = () => {
    setDuration(videoRef.current.duration);
  };

  const handleSeek = (value) => {
    const time = (value[0] / 100) * duration;
    videoRef.current.currentTime = time;
    setProgress(value[0]);
  };

  const formatTime = (time) => {
    const minutes = Math.floor(time / 60);
    const seconds = Math.floor(time % 60);
    return `${minutes}:${seconds < 10 ? "0" : ""}${seconds}`;
  };

  const toggleFullScreen = (e) => {
    e.stopPropagation();
    if (!document.fullscreenElement) {
      videoRef.current.requestFullscreen();
    } else {
      document.exitFullscreen();
    }
  };

  return (
    <div className="relative group" onClick={onVideoClick}>
      <video
        ref={videoRef}
        className="rounded-lg shadow-md w-full h-96 object-cover cursor-pointer"
        autoPlay
        muted={isMuted}
        onTimeUpdate={handleTimeUpdate}
        onLoadedMetadata={handleLoadedMetadata}
      >
        <source src={src} type="video/mp4" />
        Your browser does not support the video tag.
      </video>

      {/* Custom Controls */}
      <div className="absolute bottom-0 left-0 right-0 p-4 bg-gradient-to-t from-black/70 to-transparent opacity-0 group-hover:opacity-100 transition-opacity">
        <div className="flex flex-col gap-2">
          {/* Progress bar */}
          <Slider
            value={[progress]}
            max={100}
            step={0.1}
            className="cursor-pointer"
            onValueChange={handleSeek}
          />

          <div className="flex items-center justify-between">
            <div className="flex items-center gap-2">
              {/* Play/Pause button */}
              <Button
                variant="ghost"
                size="icon"
                className="text-white hover:bg-white/20"
                onClick={togglePlay}
              >
                {isPlaying ? (
                  <Pause className="h-5 w-5" />
                ) : (
                  <Play className="h-5 w-5" />
                )}
              </Button>

              {/* Mute button */}
              <Button
                variant="ghost"
                size="icon"
                className="text-white hover:bg-white/20"
                onClick={toggleMute}
              >
                {isMuted ? (
                  <VolumeX className="h-5 w-5" />
                ) : (
                  <Volume2 className="h-5 w-5" />
                )}
              </Button>

              {/* Time display */}
              <span className="text-white text-sm">
                {formatTime(videoRef.current?.currentTime || 0)} /{" "}
                {formatTime(duration)}
              </span>
            </div>

            {/* Fullscreen button */}
            <Button
              variant="ghost"
              size="icon"
              className="text-white hover:bg-white/20"
              onClick={toggleFullScreen}
            >
              <Maximize2 className="h-5 w-5" />
            </Button>
          </div>
        </div>
      </div>
    </div>
  );
};

export default VideoPlayer;

```

### src/components/ui/tabs.jsx
```jsx
import * as React from "react"
import * as TabsPrimitive from "@radix-ui/react-tabs"

import { cn } from "@/lib/utils"

const Tabs = TabsPrimitive.Root

const TabsList = React.forwardRef(({ className, ...props }, ref) => (
  <TabsPrimitive.List
    ref={ref}
    className={cn(
      "inline-flex h-9 items-center justify-center rounded-lg bg-muted p-1 text-muted-foreground",
      className
    )}
    {...props} />
))
TabsList.displayName = TabsPrimitive.List.displayName

const TabsTrigger = React.forwardRef(({ className, ...props }, ref) => (
  <TabsPrimitive.Trigger
    ref={ref}
    className={cn(
      "inline-flex items-center justify-center whitespace-nowrap rounded-md px-3 py-1 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow",
      className
    )}
    {...props} />
))
TabsTrigger.displayName = TabsPrimitive.Trigger.displayName

const TabsContent = React.forwardRef(({ className, ...props }, ref) => (
  <TabsPrimitive.Content
    ref={ref}
    className={cn(
      "mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2",
      className
    )}
    {...props} />
))
TabsContent.displayName = TabsPrimitive.Content.displayName

export { Tabs, TabsList, TabsTrigger, TabsContent }

```

### src/components/ui/dialog.jsx
```jsx
"use client"

import * as React from "react"
import * as DialogPrimitive from "@radix-ui/react-dialog"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const Dialog = DialogPrimitive.Root

const DialogTrigger = DialogPrimitive.Trigger

const DialogPortal = DialogPrimitive.Portal

const DialogClose = DialogPrimitive.Close

const DialogOverlay = React.forwardRef(({ className, ...props }, ref) => (
  <DialogPrimitive.Overlay
    ref={ref}
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props} />
))
DialogOverlay.displayName = DialogPrimitive.Overlay.displayName

const DialogContent = React.forwardRef(({ className, children, ...props }, ref) => (
  <DialogPortal>
    <DialogOverlay />
    <DialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className
      )}
      {...props}>
      {children}
      <DialogPrimitive.Close
        className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground">
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </DialogPrimitive.Close>
    </DialogPrimitive.Content>
  </DialogPortal>
))
DialogContent.displayName = DialogPrimitive.Content.displayName

const DialogHeader = ({
  className,
  ...props
}) => (
  <div
    className={cn("flex flex-col space-y-1.5 text-center sm:text-left", className)}
    {...props} />
)
DialogHeader.displayName = "DialogHeader"

const DialogFooter = ({
  className,
  ...props
}) => (
  <div
    className={cn("flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2", className)}
    {...props} />
)
DialogFooter.displayName = "DialogFooter"

const DialogTitle = React.forwardRef(({ className, ...props }, ref) => (
  <DialogPrimitive.Title
    ref={ref}
    className={cn("text-lg font-semibold leading-none tracking-tight", className)}
    {...props} />
))
DialogTitle.displayName = DialogPrimitive.Title.displayName

const DialogDescription = React.forwardRef(({ className, ...props }, ref) => (
  <DialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props} />
))
DialogDescription.displayName = DialogPrimitive.Description.displayName

export {
  Dialog,
  DialogPortal,
  DialogOverlay,
  DialogTrigger,
  DialogClose,
  DialogContent,
  DialogHeader,
  DialogFooter,
  DialogTitle,
  DialogDescription,
}

```

### src/components/ui/hover-card.jsx
```jsx
"use client"

import * as React from "react"
import * as HoverCardPrimitive from "@radix-ui/react-hover-card"

import { cn } from "@/lib/utils"

const HoverCard = HoverCardPrimitive.Root

const HoverCardTrigger = HoverCardPrimitive.Trigger

const HoverCardContent = React.forwardRef(({ className, align = "center", sideOffset = 4, ...props }, ref) => (
  <HoverCardPrimitive.Content
    ref={ref}
    align={align}
    sideOffset={sideOffset}
    className={cn(
      "z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]",
      className
    )}
    {...props} />
))
HoverCardContent.displayName = HoverCardPrimitive.Content.displayName

export { HoverCard, HoverCardTrigger, HoverCardContent }

```

### src/components/ui/dropdown-menu.jsx
```jsx
import * as React from "react"
import * as DropdownMenuPrimitive from "@radix-ui/react-dropdown-menu"
import { Check, ChevronRight, Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const DropdownMenu = DropdownMenuPrimitive.Root

const DropdownMenuTrigger = DropdownMenuPrimitive.Trigger

const DropdownMenuGroup = DropdownMenuPrimitive.Group

const DropdownMenuPortal = DropdownMenuPrimitive.Portal

const DropdownMenuSub = DropdownMenuPrimitive.Sub

const DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup

const DropdownMenuSubTrigger = React.forwardRef(({ className, inset, children, ...props }, ref) => (
  <DropdownMenuPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
      inset && "pl-8",
      className
    )}
    {...props}>
    {children}
    <ChevronRight className="ml-auto" />
  </DropdownMenuPrimitive.SubTrigger>
))
DropdownMenuSubTrigger.displayName =
  DropdownMenuPrimitive.SubTrigger.displayName

const DropdownMenuSubContent = React.forwardRef(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]",
      className
    )}
    {...props} />
))
DropdownMenuSubContent.displayName =
  DropdownMenuPrimitive.SubContent.displayName

const DropdownMenuContent = React.forwardRef(({ className, sideOffset = 4, ...props }, ref) => (
  <DropdownMenuPrimitive.Portal>
    <DropdownMenuPrimitive.Content
      ref={ref}
      sideOffset={sideOffset}
      className={cn(
        "z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md",
        "data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]",
        className
      )}
      {...props} />
  </DropdownMenuPrimitive.Portal>
))
DropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName

const DropdownMenuItem = React.forwardRef(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&>svg]:size-4 [&>svg]:shrink-0",
      inset && "pl-8",
      className
    )}
    {...props} />
))
DropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName

const DropdownMenuCheckboxItem = React.forwardRef(({ className, children, checked, ...props }, ref) => (
  <DropdownMenuPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    checked={checked}
    {...props}>
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.CheckboxItem>
))
DropdownMenuCheckboxItem.displayName =
  DropdownMenuPrimitive.CheckboxItem.displayName

const DropdownMenuRadioItem = React.forwardRef(({ className, children, ...props }, ref) => (
  <DropdownMenuPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}>
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.RadioItem>
))
DropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName

const DropdownMenuLabel = React.forwardRef(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Label
    ref={ref}
    className={cn("px-2 py-1.5 text-sm font-semibold", inset && "pl-8", className)}
    {...props} />
))
DropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName

const DropdownMenuSeparator = React.forwardRef(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props} />
))
DropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName

const DropdownMenuShortcut = ({
  className,
  ...props
}) => {
  return (
    <span
      className={cn("ml-auto text-xs tracking-widest opacity-60", className)}
      {...props} />
  );
}
DropdownMenuShortcut.displayName = "DropdownMenuShortcut"

export {
  DropdownMenu,
  DropdownMenuTrigger,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuCheckboxItem,
  DropdownMenuRadioItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuShortcut,
  DropdownMenuGroup,
  DropdownMenuPortal,
  DropdownMenuSub,
  DropdownMenuSubContent,
  DropdownMenuSubTrigger,
  DropdownMenuRadioGroup,
}

```

### src/components/ui/toggle.jsx
```jsx
import * as React from "react"
import * as TogglePrimitive from "@radix-ui/react-toggle"
import { cva } from "class-variance-authority";

import { cn } from "@/lib/utils"

const toggleVariants = cva(
  "inline-flex items-center justify-center gap-2 rounded-md text-sm font-medium transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
  {
    variants: {
      variant: {
        default: "bg-transparent",
        outline:
          "border border-input bg-transparent shadow-sm hover:bg-accent hover:text-accent-foreground",
      },
      size: {
        default: "h-9 px-2 min-w-9",
        sm: "h-8 px-1.5 min-w-8",
        lg: "h-10 px-2.5 min-w-10",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

const Toggle = React.forwardRef(({ className, variant, size, ...props }, ref) => (
  <TogglePrimitive.Root
    ref={ref}
    className={cn(toggleVariants({ variant, size, className }))}
    {...props} />
))

Toggle.displayName = TogglePrimitive.Root.displayName

export { Toggle, toggleVariants }

```

### src/components/ui/avatar.jsx
```jsx
"use client"

import * as React from "react"
import * as AvatarPrimitive from "@radix-ui/react-avatar"

import { cn } from "@/lib/utils"

const Avatar = React.forwardRef(({ className, ...props }, ref) => (
  <AvatarPrimitive.Root
    ref={ref}
    className={cn("relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full", className)}
    {...props} />
))
Avatar.displayName = AvatarPrimitive.Root.displayName

const AvatarImage = React.forwardRef(({ className, ...props }, ref) => (
  <AvatarPrimitive.Image
    ref={ref}
    className={cn("aspect-square h-full w-full", className)}
    {...props} />
))
AvatarImage.displayName = AvatarPrimitive.Image.displayName

const AvatarFallback = React.forwardRef(({ className, ...props }, ref) => (
  <AvatarPrimitive.Fallback
    ref={ref}
    className={cn(
      "flex h-full w-full items-center justify-center rounded-full bg-muted",
      className
    )}
    {...props} />
))
AvatarFallback.displayName = AvatarPrimitive.Fallback.displayName

export { Avatar, AvatarImage, AvatarFallback }

```

### src/components/ui/input.jsx
```jsx
import * as React from "react"

import { cn } from "@/lib/utils"

const Input = React.forwardRef(({ className, type, ...props }, ref) => {
  return (
    <input
      type={type}
      className={cn(
        "flex h-9 w-full rounded-md border border-input bg-transparent px-3 py-1 text-base shadow-sm transition-colors file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
        className
      )}
      ref={ref}
      {...props} />
  );
})
Input.displayName = "Input"

export { Input }

```

### src/components/ui/badge.jsx
```jsx
import * as React from "react"
import { cva } from "class-variance-authority";

import { cn } from "@/lib/utils"

const badgeVariants = cva(
  "inline-flex items-center rounded-md border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2",
  {
    variants: {
      variant: {
        default:
          "border-transparent bg-primary text-primary-foreground shadow hover:bg-primary/80",
        secondary:
          "border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80",
        destructive:
          "border-transparent bg-destructive text-destructive-foreground shadow hover:bg-destructive/80",
        outline: "text-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

function Badge({
  className,
  variant,
  ...props
}) {
  return (<div className={cn(badgeVariants({ variant }), className)} {...props} />);
}

export { Badge, badgeVariants }

```

### src/components/ui/label.jsx
```jsx
import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"
import { cva } from "class-variance-authority";

import { cn } from "@/lib/utils"

const labelVariants = cva(
  "text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
)

const Label = React.forwardRef(({ className, ...props }, ref) => (
  <LabelPrimitive.Root ref={ref} className={cn(labelVariants(), className)} {...props} />
))
Label.displayName = LabelPrimitive.Root.displayName

export { Label }

```

### src/components/ui/sheet.jsx
```jsx
"use client";
import * as React from "react"
import * as SheetPrimitive from "@radix-ui/react-dialog"
import { cva } from "class-variance-authority";
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const Sheet = SheetPrimitive.Root

const SheetTrigger = SheetPrimitive.Trigger

const SheetClose = SheetPrimitive.Close

const SheetPortal = SheetPrimitive.Portal

const SheetOverlay = React.forwardRef(({ className, ...props }, ref) => (
  <SheetPrimitive.Overlay
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
    ref={ref} />
))
SheetOverlay.displayName = SheetPrimitive.Overlay.displayName

const sheetVariants = cva(
  "fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=closed]:duration-300 data-[state=open]:duration-500 data-[state=open]:animate-in data-[state=closed]:animate-out",
  {
    variants: {
      side: {
        top: "inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top",
        bottom:
          "inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom",
        left: "inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm",
        right:
          "inset-y-0 right-0 h-full w-3/4 border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm",
      },
    },
    defaultVariants: {
      side: "right",
    },
  }
)

const SheetContent = React.forwardRef(({ side = "right", className, children, ...props }, ref) => (
  <SheetPortal>
    <SheetOverlay />
    <SheetPrimitive.Content ref={ref} className={cn(sheetVariants({ side }), className)} {...props}>
      <SheetPrimitive.Close
        className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary">
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </SheetPrimitive.Close>
      {children}
    </SheetPrimitive.Content>
  </SheetPortal>
))
SheetContent.displayName = SheetPrimitive.Content.displayName

const SheetHeader = ({
  className,
  ...props
}) => (
  <div
    className={cn("flex flex-col space-y-2 text-center sm:text-left", className)}
    {...props} />
)
SheetHeader.displayName = "SheetHeader"

const SheetFooter = ({
  className,
  ...props
}) => (
  <div
    className={cn("flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2", className)}
    {...props} />
)
SheetFooter.displayName = "SheetFooter"

const SheetTitle = React.forwardRef(({ className, ...props }, ref) => (
  <SheetPrimitive.Title
    ref={ref}
    className={cn("text-lg font-semibold text-foreground", className)}
    {...props} />
))
SheetTitle.displayName = SheetPrimitive.Title.displayName

const SheetDescription = React.forwardRef(({ className, ...props }, ref) => (
  <SheetPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props} />
))
SheetDescription.displayName = SheetPrimitive.Description.displayName

export {
  Sheet,
  SheetPortal,
  SheetOverlay,
  SheetTrigger,
  SheetClose,
  SheetContent,
  SheetHeader,
  SheetFooter,
  SheetTitle,
  SheetDescription,
}

```

### src/components/ui/tooltip.jsx
```jsx
"use client"

import * as React from "react"
import * as TooltipPrimitive from "@radix-ui/react-tooltip"

import { cn } from "@/lib/utils"

const TooltipProvider = TooltipPrimitive.Provider

const Tooltip = TooltipPrimitive.Root

const TooltipTrigger = TooltipPrimitive.Trigger

const TooltipContent = React.forwardRef(({ className, sideOffset = 4, ...props }, ref) => (
  <TooltipPrimitive.Portal>
    <TooltipPrimitive.Content
      ref={ref}
      sideOffset={sideOffset}
      className={cn(
        "z-50 overflow-hidden rounded-md bg-primary px-3 py-1.5 text-xs text-primary-foreground animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]",
        className
      )}
      {...props} />
  </TooltipPrimitive.Portal>
))
TooltipContent.displayName = TooltipPrimitive.Content.displayName

export { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }

```

### src/components/ui/table.jsx
```jsx
import * as React from "react"

import { cn } from "@/lib/utils"

const Table = React.forwardRef(({ className, ...props }, ref) => (
  <div className="relative w-full overflow-auto">
    <table
      ref={ref}
      className={cn("w-full caption-bottom text-sm", className)}
      {...props} />
  </div>
))
Table.displayName = "Table"

const TableHeader = React.forwardRef(({ className, ...props }, ref) => (
  <thead ref={ref} className={cn("[&_tr]:border-b", className)} {...props} />
))
TableHeader.displayName = "TableHeader"

const TableBody = React.forwardRef(({ className, ...props }, ref) => (
  <tbody
    ref={ref}
    className={cn("[&_tr:last-child]:border-0", className)}
    {...props} />
))
TableBody.displayName = "TableBody"

const TableFooter = React.forwardRef(({ className, ...props }, ref) => (
  <tfoot
    ref={ref}
    className={cn("border-t bg-muted/50 font-medium [&>tr]:last:border-b-0", className)}
    {...props} />
))
TableFooter.displayName = "TableFooter"

const TableRow = React.forwardRef(({ className, ...props }, ref) => (
  <tr
    ref={ref}
    className={cn(
      "border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted",
      className
    )}
    {...props} />
))
TableRow.displayName = "TableRow"

const TableHead = React.forwardRef(({ className, ...props }, ref) => (
  <th
    ref={ref}
    className={cn(
      "h-10 px-2 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0 [&>[role=checkbox]]:translate-y-[2px]",
      className
    )}
    {...props} />
))
TableHead.displayName = "TableHead"

const TableCell = React.forwardRef(({ className, ...props }, ref) => (
  <td
    ref={ref}
    className={cn(
      "p-2 align-middle [&:has([role=checkbox])]:pr-0 [&>[role=checkbox]]:translate-y-[2px]",
      className
    )}
    {...props} />
))
TableCell.displayName = "TableCell"

const TableCaption = React.forwardRef(({ className, ...props }, ref) => (
  <caption
    ref={ref}
    className={cn("mt-4 text-sm text-muted-foreground", className)}
    {...props} />
))
TableCaption.displayName = "TableCaption"

export {
  Table,
  TableHeader,
  TableBody,
  TableFooter,
  TableHead,
  TableRow,
  TableCell,
  TableCaption,
}

```

### src/components/ui/alert.jsx
```jsx
import * as React from "react"
import { cva } from "class-variance-authority";

import { cn } from "@/lib/utils"

const alertVariants = cva(
  "relative w-full rounded-lg border px-4 py-3 text-sm [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground [&>svg~*]:pl-7",
  {
    variants: {
      variant: {
        default: "bg-background text-foreground",
        destructive:
          "border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

const Alert = React.forwardRef(({ className, variant, ...props }, ref) => (
  <div
    ref={ref}
    role="alert"
    className={cn(alertVariants({ variant }), className)}
    {...props} />
))
Alert.displayName = "Alert"

const AlertTitle = React.forwardRef(({ className, ...props }, ref) => (
  <h5
    ref={ref}
    className={cn("mb-1 font-medium leading-none tracking-tight", className)}
    {...props} />
))
AlertTitle.displayName = "AlertTitle"

const AlertDescription = React.forwardRef(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("text-sm [&_p]:leading-relaxed", className)}
    {...props} />
))
AlertDescription.displayName = "AlertDescription"

export { Alert, AlertTitle, AlertDescription }

```

### src/components/ui/sidebar.jsx
```jsx
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva } from "class-variance-authority";
import { PanelLeft } from "lucide-react"

import { useIsMobile } from "@/hooks/use-mobile"
import { cn } from "@/lib/utils"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Separator } from "@/components/ui/separator"
import {
  Sheet,
  SheetContent,
  SheetDescription,
  SheetHeader,
  SheetTitle,
} from "@/components/ui/sheet"
import { Skeleton } from "@/components/ui/skeleton"
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from "@/components/ui/tooltip"

const SIDEBAR_COOKIE_NAME = "sidebar_state"
const SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7
const SIDEBAR_WIDTH = "16rem"
const SIDEBAR_WIDTH_MOBILE = "18rem"
const SIDEBAR_WIDTH_ICON = "3rem"
const SIDEBAR_KEYBOARD_SHORTCUT = "b"

const SidebarContext = React.createContext(null)

function useSidebar() {
  const context = React.useContext(SidebarContext)
  if (!context) {
    throw new Error("useSidebar must be used within a SidebarProvider.")
  }

  return context
}

const SidebarProvider = React.forwardRef((
  {
    defaultOpen = true,
    open: openProp,
    onOpenChange: setOpenProp,
    className,
    style,
    children,
    ...props
  },
  ref
) => {
  const isMobile = useIsMobile()
  const [openMobile, setOpenMobile] = React.useState(false)

  // This is the internal state of the sidebar.
  // We use openProp and setOpenProp for control from outside the component.
  const [_open, _setOpen] = React.useState(defaultOpen)
  const open = openProp ?? _open
  const setOpen = React.useCallback((value) => {
    const openState = typeof value === "function" ? value(open) : value
    if (setOpenProp) {
      setOpenProp(openState)
    } else {
      _setOpen(openState)
    }

    // This sets the cookie to keep the sidebar state.
    document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`
  }, [setOpenProp, open])

  // Helper to toggle the sidebar.
  const toggleSidebar = React.useCallback(() => {
    return isMobile
      ? setOpenMobile((open) => !open)
      : setOpen((open) => !open);
  }, [isMobile, setOpen, setOpenMobile])

  // Adds a keyboard shortcut to toggle the sidebar.
  React.useEffect(() => {
    const handleKeyDown = (event) => {
      if (
        event.key === SIDEBAR_KEYBOARD_SHORTCUT &&
        (event.metaKey || event.ctrlKey)
      ) {
        event.preventDefault()
        toggleSidebar()
      }
    }

    window.addEventListener("keydown", handleKeyDown)
    return () => window.removeEventListener("keydown", handleKeyDown);
  }, [toggleSidebar])

  // We add a state so that we can do data-state="expanded" or "collapsed".
  // This makes it easier to style the sidebar with Tailwind classes.
  const state = open ? "expanded" : "collapsed"

  const contextValue = React.useMemo(() => ({
    state,
    open,
    setOpen,
    isMobile,
    openMobile,
    setOpenMobile,
    toggleSidebar,
  }), [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar])

  return (
    <SidebarContext.Provider value={contextValue}>
      <TooltipProvider delayDuration={0}>
        <div
          style={
            {
              "--sidebar-width": SIDEBAR_WIDTH,
              "--sidebar-width-icon": SIDEBAR_WIDTH_ICON,
              ...style
            }
          }
          className={cn(
            "group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar",
            className
          )}
          ref={ref}
          {...props}>
          {children}
        </div>
      </TooltipProvider>
    </SidebarContext.Provider>
  );
})
SidebarProvider.displayName = "SidebarProvider"

const Sidebar = React.forwardRef((
  {
    side = "left",
    variant = "sidebar",
    collapsible = "offcanvas",
    className,
    children,
    ...props
  },
  ref
) => {
  const { isMobile, state, openMobile, setOpenMobile } = useSidebar()

  if (collapsible === "none") {
    return (
      <div
        className={cn(
          "flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground",
          className
        )}
        ref={ref}
        {...props}>
        {children}
      </div>
    );
  }

  if (isMobile) {
    return (
      <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>
        <SheetContent
          data-sidebar="sidebar"
          data-mobile="true"
          className="w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden"
          style={
            {
              "--sidebar-width": SIDEBAR_WIDTH_MOBILE
            }
          }
          side={side}>
          <SheetHeader className="sr-only">
            <SheetTitle>Sidebar</SheetTitle>
            <SheetDescription>Displays the mobile sidebar.</SheetDescription>
          </SheetHeader>
          <div className="flex h-full w-full flex-col">{children}</div>
        </SheetContent>
      </Sheet>
    );
  }

  return (
    <div
      ref={ref}
      className="group peer hidden text-sidebar-foreground md:block"
      data-state={state}
      data-collapsible={state === "collapsed" ? collapsible : ""}
      data-variant={variant}
      data-side={side}>
      {/* This is what handles the sidebar gap on desktop */}
      <div
        className={cn(
          "relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear",
          "group-data-[collapsible=offcanvas]:w-0",
          "group-data-[side=right]:rotate-180",
          variant === "floating" || variant === "inset"
            ? "group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]"
            : "group-data-[collapsible=icon]:w-[--sidebar-width-icon]"
        )} />
      <div
        className={cn(
          "fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex",
          side === "left"
            ? "left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]"
            : "right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]",
          // Adjust the padding for floating and inset variants.
          variant === "floating" || variant === "inset"
            ? "p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]"
            : "group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l",
          className
        )}
        {...props}>
        <div
          data-sidebar="sidebar"
          className="flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow">
          {children}
        </div>
      </div>
    </div>
  );
})
Sidebar.displayName = "Sidebar"

const SidebarTrigger = React.forwardRef(({ className, onClick, ...props }, ref) => {
  const { toggleSidebar } = useSidebar()

  return (
    <Button
      ref={ref}
      data-sidebar="trigger"
      variant="ghost"
      size="icon"
      className={cn("h-7 w-7", className)}
      onClick={(event) => {
        onClick?.(event)
        toggleSidebar()
      }}
      {...props}>
      <PanelLeft />
      <span className="sr-only">Toggle Sidebar</span>
    </Button>
  );
})
SidebarTrigger.displayName = "SidebarTrigger"

const SidebarRail = React.forwardRef(({ className, ...props }, ref) => {
  const { toggleSidebar } = useSidebar()

  return (
    <button
      ref={ref}
      data-sidebar="rail"
      aria-label="Toggle Sidebar"
      tabIndex={-1}
      onClick={toggleSidebar}
      title="Toggle Sidebar"
      className={cn(
        "absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex",
        "[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize",
        "[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize",
        "group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar",
        "[[data-side=left][data-collapsible=offcanvas]_&]:-right-2",
        "[[data-side=right][data-collapsible=offcanvas]_&]:-left-2",
        className
      )}
      {...props} />
  );
})
SidebarRail.displayName = "SidebarRail"

const SidebarInset = React.forwardRef(({ className, ...props }, ref) => {
  return (
    <main
      ref={ref}
      className={cn(
        "relative flex w-full flex-1 flex-col bg-background",
        "md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow",
        className
      )}
      {...props} />
  );
})
SidebarInset.displayName = "SidebarInset"

const SidebarInput = React.forwardRef(({ className, ...props }, ref) => {
  return (
    <Input
      ref={ref}
      data-sidebar="input"
      className={cn(
        "h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring",
        className
      )}
      {...props} />
  );
})
SidebarInput.displayName = "SidebarInput"

const SidebarHeader = React.forwardRef(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="header"
      className={cn("flex flex-col gap-2 p-2", className)}
      {...props} />
  );
})
SidebarHeader.displayName = "SidebarHeader"

const SidebarFooter = React.forwardRef(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="footer"
      className={cn("flex flex-col gap-2 p-2", className)}
      {...props} />
  );
})
SidebarFooter.displayName = "SidebarFooter"

const SidebarSeparator = React.forwardRef(({ className, ...props }, ref) => {
  return (
    <Separator
      ref={ref}
      data-sidebar="separator"
      className={cn("mx-2 w-auto bg-sidebar-border", className)}
      {...props} />
  );
})
SidebarSeparator.displayName = "SidebarSeparator"

const SidebarContent = React.forwardRef(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="content"
      className={cn(
        "flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden",
        className
      )}
      {...props} />
  );
})
SidebarContent.displayName = "SidebarContent"

const SidebarGroup = React.forwardRef(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="group"
      className={cn("relative flex w-full min-w-0 flex-col p-2", className)}
      {...props} />
  );
})
SidebarGroup.displayName = "SidebarGroup"

const SidebarGroupLabel = React.forwardRef(({ className, asChild = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "div"

  return (
    <Comp
      ref={ref}
      data-sidebar="group-label"
      className={cn(
        "flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0",
        "group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0",
        className
      )}
      {...props} />
  );
})
SidebarGroupLabel.displayName = "SidebarGroupLabel"

const SidebarGroupAction = React.forwardRef(({ className, asChild = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "button"

  return (
    <Comp
      ref={ref}
      data-sidebar="group-action"
      className={cn(
        "absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0",
        // Increases the hit area of the button on mobile.
        "after:absolute after:-inset-2 after:md:hidden",
        "group-data-[collapsible=icon]:hidden",
        className
      )}
      {...props} />
  );
})
SidebarGroupAction.displayName = "SidebarGroupAction"

const SidebarGroupContent = React.forwardRef(({ className, ...props }, ref) => (
  <div
    ref={ref}
    data-sidebar="group-content"
    className={cn("w-full text-sm", className)}
    {...props} />
))
SidebarGroupContent.displayName = "SidebarGroupContent"

const SidebarMenu = React.forwardRef(({ className, ...props }, ref) => (
  <ul
    ref={ref}
    data-sidebar="menu"
    className={cn("flex w-full min-w-0 flex-col gap-1", className)}
    {...props} />
))
SidebarMenu.displayName = "SidebarMenu"

const SidebarMenuItem = React.forwardRef(({ className, ...props }, ref) => (
  <li
    ref={ref}
    data-sidebar="menu-item"
    className={cn("group/menu-item relative", className)}
    {...props} />
))
SidebarMenuItem.displayName = "SidebarMenuItem"

const sidebarMenuButtonVariants = cva(
  "peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0",
  {
    variants: {
      variant: {
        default: "hover:bg-sidebar-accent hover:text-sidebar-accent-foreground",
        outline:
          "bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]",
      },
      size: {
        default: "h-8 text-sm",
        sm: "h-7 text-xs",
        lg: "h-12 text-sm group-data-[collapsible=icon]:!p-0",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

const SidebarMenuButton = React.forwardRef((
  {
    asChild = false,
    isActive = false,
    variant = "default",
    size = "default",
    tooltip,
    className,
    ...props
  },
  ref
) => {
  const Comp = asChild ? Slot : "button"
  const { isMobile, state } = useSidebar()

  const button = (
    <Comp
      ref={ref}
      data-sidebar="menu-button"
      data-size={size}
      data-active={isActive}
      className={cn(sidebarMenuButtonVariants({ variant, size }), className)}
      {...props} />
  )

  if (!tooltip) {
    return button
  }

  if (typeof tooltip === "string") {
    tooltip = {
      children: tooltip,
    }
  }

  return (
    <Tooltip>
      <TooltipTrigger asChild>{button}</TooltipTrigger>
      <TooltipContent
        side="right"
        align="center"
        hidden={state !== "collapsed" || isMobile}
        {...tooltip} />
    </Tooltip>
  );
})
SidebarMenuButton.displayName = "SidebarMenuButton"

const SidebarMenuAction = React.forwardRef(({ className, asChild = false, showOnHover = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "button"

  return (
    <Comp
      ref={ref}
      data-sidebar="menu-action"
      className={cn(
        "absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0",
        // Increases the hit area of the button on mobile.
        "after:absolute after:-inset-2 after:md:hidden",
        "peer-data-[size=sm]/menu-button:top-1",
        "peer-data-[size=default]/menu-button:top-1.5",
        "peer-data-[size=lg]/menu-button:top-2.5",
        "group-data-[collapsible=icon]:hidden",
        showOnHover &&
          "group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0",
        className
      )}
      {...props} />
  );
})
SidebarMenuAction.displayName = "SidebarMenuAction"

const SidebarMenuBadge = React.forwardRef(({ className, ...props }, ref) => (
  <div
    ref={ref}
    data-sidebar="menu-badge"
    className={cn(
      "pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground",
      "peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground",
      "peer-data-[size=sm]/menu-button:top-1",
      "peer-data-[size=default]/menu-button:top-1.5",
      "peer-data-[size=lg]/menu-button:top-2.5",
      "group-data-[collapsible=icon]:hidden",
      className
    )}
    {...props} />
))
SidebarMenuBadge.displayName = "SidebarMenuBadge"

const SidebarMenuSkeleton = React.forwardRef(({ className, showIcon = false, ...props }, ref) => {
  // Random width between 50 to 90%.
  const width = React.useMemo(() => {
    return `${Math.floor(Math.random() * 40) + 50}%`;
  }, [])

  return (
    <div
      ref={ref}
      data-sidebar="menu-skeleton"
      className={cn("flex h-8 items-center gap-2 rounded-md px-2", className)}
      {...props}>
      {showIcon && (
        <Skeleton className="size-4 rounded-md" data-sidebar="menu-skeleton-icon" />
      )}
      <Skeleton
        className="h-4 max-w-[--skeleton-width] flex-1"
        data-sidebar="menu-skeleton-text"
        style={
          {
            "--skeleton-width": width
          }
        } />
    </div>
  );
})
SidebarMenuSkeleton.displayName = "SidebarMenuSkeleton"

const SidebarMenuSub = React.forwardRef(({ className, ...props }, ref) => (
  <ul
    ref={ref}
    data-sidebar="menu-sub"
    className={cn(
      "mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5",
      "group-data-[collapsible=icon]:hidden",
      className
    )}
    {...props} />
))
SidebarMenuSub.displayName = "SidebarMenuSub"

const SidebarMenuSubItem = React.forwardRef(({ ...props }, ref) => <li ref={ref} {...props} />)
SidebarMenuSubItem.displayName = "SidebarMenuSubItem"

const SidebarMenuSubButton = React.forwardRef(
  ({ asChild = false, size = "md", isActive, className, ...props }, ref) => {
    const Comp = asChild ? Slot : "a"

    return (
      <Comp
        ref={ref}
        data-sidebar="menu-sub-button"
        data-size={size}
        data-active={isActive}
        className={cn(
          "flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground",
          "data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground",
          size === "sm" && "text-xs",
          size === "md" && "text-sm",
          "group-data-[collapsible=icon]:hidden",
          className
        )}
        {...props} />
    );
  }
)
SidebarMenuSubButton.displayName = "SidebarMenuSubButton"

export {
  Sidebar,
  SidebarContent,
  SidebarFooter,
  SidebarGroup,
  SidebarGroupAction,
  SidebarGroupContent,
  SidebarGroupLabel,
  SidebarHeader,
  SidebarInput,
  SidebarInset,
  SidebarMenu,
  SidebarMenuAction,
  SidebarMenuBadge,
  SidebarMenuButton,
  SidebarMenuItem,
  SidebarMenuSkeleton,
  SidebarMenuSub,
  SidebarMenuSubButton,
  SidebarMenuSubItem,
  SidebarProvider,
  SidebarRail,
  SidebarSeparator,
  SidebarTrigger,
  useSidebar,
}

```

### src/components/ui/scroll-area.jsx
```jsx
import * as React from "react"
import * as ScrollAreaPrimitive from "@radix-ui/react-scroll-area"

import { cn } from "@/lib/utils"

const ScrollArea = React.forwardRef(({ className, children, ...props }, ref) => (
  <ScrollAreaPrimitive.Root
    ref={ref}
    className={cn("relative overflow-hidden", className)}
    {...props}>
    <ScrollAreaPrimitive.Viewport className="h-full w-full rounded-[inherit]">
      {children}
    </ScrollAreaPrimitive.Viewport>
    <ScrollBar />
    <ScrollAreaPrimitive.Corner />
  </ScrollAreaPrimitive.Root>
))
ScrollArea.displayName = ScrollAreaPrimitive.Root.displayName

const ScrollBar = React.forwardRef(({ className, orientation = "vertical", ...props }, ref) => (
  <ScrollAreaPrimitive.ScrollAreaScrollbar
    ref={ref}
    orientation={orientation}
    className={cn(
      "flex touch-none select-none transition-colors",
      orientation === "vertical" &&
        "h-full w-2.5 border-l border-l-transparent p-[1px]",
      orientation === "horizontal" &&
        "h-2.5 flex-col border-t border-t-transparent p-[1px]",
      className
    )}
    {...props}>
    <ScrollAreaPrimitive.ScrollAreaThumb className="relative flex-1 rounded-full bg-border" />
  </ScrollAreaPrimitive.ScrollAreaScrollbar>
))
ScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName

export { ScrollArea, ScrollBar }

```

### src/components/ui/breadcrumb.jsx
```jsx
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { ChevronRight, MoreHorizontal } from "lucide-react"

import { cn } from "@/lib/utils"

const Breadcrumb = React.forwardRef(
  ({ ...props }, ref) => <nav ref={ref} aria-label="breadcrumb" {...props} />
)
Breadcrumb.displayName = "Breadcrumb"

const BreadcrumbList = React.forwardRef(({ className, ...props }, ref) => (
  <ol
    ref={ref}
    className={cn(
      "flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5",
      className
    )}
    {...props} />
))
BreadcrumbList.displayName = "BreadcrumbList"

const BreadcrumbItem = React.forwardRef(({ className, ...props }, ref) => (
  <li
    ref={ref}
    className={cn("inline-flex items-center gap-1.5", className)}
    {...props} />
))
BreadcrumbItem.displayName = "BreadcrumbItem"

const BreadcrumbLink = React.forwardRef(({ asChild, className, ...props }, ref) => {
  const Comp = asChild ? Slot : "a"

  return (
    <Comp
      ref={ref}
      className={cn("transition-colors hover:text-foreground", className)}
      {...props} />
  );
})
BreadcrumbLink.displayName = "BreadcrumbLink"

const BreadcrumbPage = React.forwardRef(({ className, ...props }, ref) => (
  <span
    ref={ref}
    role="link"
    aria-disabled="true"
    aria-current="page"
    className={cn("font-normal text-foreground", className)}
    {...props} />
))
BreadcrumbPage.displayName = "BreadcrumbPage"

const BreadcrumbSeparator = ({
  children,
  className,
  ...props
}) => (
  <li
    role="presentation"
    aria-hidden="true"
    className={cn("[&>svg]:w-3.5 [&>svg]:h-3.5", className)}
    {...props}>
    {children ?? <ChevronRight />}
  </li>
)
BreadcrumbSeparator.displayName = "BreadcrumbSeparator"

const BreadcrumbEllipsis = ({
  className,
  ...props
}) => (
  <span
    role="presentation"
    aria-hidden="true"
    className={cn("flex h-9 w-9 items-center justify-center", className)}
    {...props}>
    <MoreHorizontal className="h-4 w-4" />
    <span className="sr-only">More</span>
  </span>
)
BreadcrumbEllipsis.displayName = "BreadcrumbElipssis"

export {
  Breadcrumb,
  BreadcrumbList,
  BreadcrumbItem,
  BreadcrumbLink,
  BreadcrumbPage,
  BreadcrumbSeparator,
  BreadcrumbEllipsis,
}

```

### src/components/ui/sonner.jsx
```jsx
"use client";
import { useTheme } from "next-themes"
import { Toaster as Sonner } from "sonner"

const Toaster = ({
  ...props
}) => {
  const { theme = "system" } = useTheme()

  return (
    <Sonner
      theme={theme}
      className="toaster group"
      toastOptions={{
        classNames: {
          toast:
            "group toast group-[.toaster]:bg-background group-[.toaster]:text-foreground group-[.toaster]:border-border group-[.toaster]:shadow-lg",
          description: "group-[.toast]:text-muted-foreground",
          actionButton:
            "group-[.toast]:bg-primary group-[.toast]:text-primary-foreground",
          cancelButton:
            "group-[.toast]:bg-muted group-[.toast]:text-muted-foreground",
        },
      }}
      {...props} />
  );
}

export { Toaster }

```

### src/components/ui/textarea.jsx
```jsx
import * as React from "react"

import { cn } from "@/lib/utils"

const Textarea = React.forwardRef(({ className, ...props }, ref) => {
  return (
    <textarea
      className={cn(
        "flex min-h-[60px] w-full rounded-md border border-input bg-transparent px-3 py-2 text-base shadow-sm placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
        className
      )}
      ref={ref}
      {...props} />
  );
})
Textarea.displayName = "Textarea"

export { Textarea }

```

### src/components/ui/progress.jsx
```jsx
"use client"

import * as React from "react"
import * as ProgressPrimitive from "@radix-ui/react-progress"

import { cn } from "@/lib/utils"

const Progress = React.forwardRef(({ className, value, ...props }, ref) => (
  <ProgressPrimitive.Root
    ref={ref}
    className={cn(
      "relative h-2 w-full overflow-hidden rounded-full bg-primary/20",
      className
    )}
    {...props}>
    <ProgressPrimitive.Indicator
      className="h-full w-full flex-1 bg-primary transition-all"
      style={{ transform: `translateX(-${100 - (value || 0)}%)` }} />
  </ProgressPrimitive.Root>
))
Progress.displayName = ProgressPrimitive.Root.displayName

export { Progress }

```

### src/components/ui/checkbox.jsx
```jsx
import * as React from "react"
import * as CheckboxPrimitive from "@radix-ui/react-checkbox"
import { Check } from "lucide-react"

import { cn } from "@/lib/utils"

const Checkbox = React.forwardRef(({ className, ...props }, ref) => (
  <CheckboxPrimitive.Root
    ref={ref}
    className={cn(
      "peer h-4 w-4 shrink-0 rounded-sm border border-primary shadow focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground",
      className
    )}
    {...props}>
    <CheckboxPrimitive.Indicator className={cn("flex items-center justify-center text-current")}>
      <Check className="h-4 w-4" />
    </CheckboxPrimitive.Indicator>
  </CheckboxPrimitive.Root>
))
Checkbox.displayName = CheckboxPrimitive.Root.displayName

export { Checkbox }

```

### src/components/ui/input-otp.jsx
```jsx
import * as React from "react"
import { OTPInput, OTPInputContext } from "input-otp"
import { Minus } from "lucide-react"

import { cn } from "@/lib/utils"

const InputOTP = React.forwardRef(({ className, containerClassName, ...props }, ref) => (
  <OTPInput
    ref={ref}
    containerClassName={cn("flex items-center gap-2 has-[:disabled]:opacity-50", containerClassName)}
    className={cn("disabled:cursor-not-allowed", className)}
    {...props} />
))
InputOTP.displayName = "InputOTP"

const InputOTPGroup = React.forwardRef(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("flex items-center", className)} {...props} />
))
InputOTPGroup.displayName = "InputOTPGroup"

const InputOTPSlot = React.forwardRef(({ index, className, ...props }, ref) => {
  const inputOTPContext = React.useContext(OTPInputContext)
  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]

  return (
    <div
      ref={ref}
      className={cn(
        "relative flex h-9 w-9 items-center justify-center border-y border-r border-input text-sm shadow-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md",
        isActive && "z-10 ring-1 ring-ring",
        className
      )}
      {...props}>
      {char}
      {hasFakeCaret && (
        <div
          className="pointer-events-none absolute inset-0 flex items-center justify-center">
          <div className="h-4 w-px animate-caret-blink bg-foreground duration-1000" />
        </div>
      )}
    </div>
  );
})
InputOTPSlot.displayName = "InputOTPSlot"

const InputOTPSeparator = React.forwardRef(({ ...props }, ref) => (
  <div ref={ref} role="separator" {...props}>
    <Minus />
  </div>
))
InputOTPSeparator.displayName = "InputOTPSeparator"

export { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }

```

### src/components/ui/drawer.jsx
```jsx
"use client"

import * as React from "react"
import { Drawer as DrawerPrimitive } from "vaul"

import { cn } from "@/lib/utils"

const Drawer = ({
  shouldScaleBackground = true,
  ...props
}) => (
  <DrawerPrimitive.Root shouldScaleBackground={shouldScaleBackground} {...props} />
)
Drawer.displayName = "Drawer"

const DrawerTrigger = DrawerPrimitive.Trigger

const DrawerPortal = DrawerPrimitive.Portal

const DrawerClose = DrawerPrimitive.Close

const DrawerOverlay = React.forwardRef(({ className, ...props }, ref) => (
  <DrawerPrimitive.Overlay
    ref={ref}
    className={cn("fixed inset-0 z-50 bg-black/80", className)}
    {...props} />
))
DrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName

const DrawerContent = React.forwardRef(({ className, children, ...props }, ref) => (
  <DrawerPortal>
    <DrawerOverlay />
    <DrawerPrimitive.Content
      ref={ref}
      className={cn(
        "fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background",
        className
      )}
      {...props}>
      <div className="mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted" />
      {children}
    </DrawerPrimitive.Content>
  </DrawerPortal>
))
DrawerContent.displayName = "DrawerContent"

const DrawerHeader = ({
  className,
  ...props
}) => (
  <div
    className={cn("grid gap-1.5 p-4 text-center sm:text-left", className)}
    {...props} />
)
DrawerHeader.displayName = "DrawerHeader"

const DrawerFooter = ({
  className,
  ...props
}) => (
  <div className={cn("mt-auto flex flex-col gap-2 p-4", className)} {...props} />
)
DrawerFooter.displayName = "DrawerFooter"

const DrawerTitle = React.forwardRef(({ className, ...props }, ref) => (
  <DrawerPrimitive.Title
    ref={ref}
    className={cn("text-lg font-semibold leading-none tracking-tight", className)}
    {...props} />
))
DrawerTitle.displayName = DrawerPrimitive.Title.displayName

const DrawerDescription = React.forwardRef(({ className, ...props }, ref) => (
  <DrawerPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props} />
))
DrawerDescription.displayName = DrawerPrimitive.Description.displayName

export {
  Drawer,
  DrawerPortal,
  DrawerOverlay,
  DrawerTrigger,
  DrawerClose,
  DrawerContent,
  DrawerHeader,
  DrawerFooter,
  DrawerTitle,
  DrawerDescription,
}

```

### src/components/ui/context-menu.jsx
```jsx
import * as React from "react"
import * as ContextMenuPrimitive from "@radix-ui/react-context-menu"
import { Check, ChevronRight, Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const ContextMenu = ContextMenuPrimitive.Root

const ContextMenuTrigger = ContextMenuPrimitive.Trigger

const ContextMenuGroup = ContextMenuPrimitive.Group

const ContextMenuPortal = ContextMenuPrimitive.Portal

const ContextMenuSub = ContextMenuPrimitive.Sub

const ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup

const ContextMenuSubTrigger = React.forwardRef(({ className, inset, children, ...props }, ref) => (
  <ContextMenuPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground",
      inset && "pl-8",
      className
    )}
    {...props}>
    {children}
    <ChevronRight className="ml-auto h-4 w-4" />
  </ContextMenuPrimitive.SubTrigger>
))
ContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName

const ContextMenuSubContent = React.forwardRef(({ className, ...props }, ref) => (
  <ContextMenuPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]",
      className
    )}
    {...props} />
))
ContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName

const ContextMenuContent = React.forwardRef(({ className, ...props }, ref) => (
  <ContextMenuPrimitive.Portal>
    <ContextMenuPrimitive.Content
      ref={ref}
      className={cn(
        "z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]",
        className
      )}
      {...props} />
  </ContextMenuPrimitive.Portal>
))
ContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName

const ContextMenuItem = React.forwardRef(({ className, inset, ...props }, ref) => (
  <ContextMenuPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      inset && "pl-8",
      className
    )}
    {...props} />
))
ContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName

const ContextMenuCheckboxItem = React.forwardRef(({ className, children, checked, ...props }, ref) => (
  <ContextMenuPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    checked={checked}
    {...props}>
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <ContextMenuPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </ContextMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </ContextMenuPrimitive.CheckboxItem>
))
ContextMenuCheckboxItem.displayName =
  ContextMenuPrimitive.CheckboxItem.displayName

const ContextMenuRadioItem = React.forwardRef(({ className, children, ...props }, ref) => (
  <ContextMenuPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}>
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <ContextMenuPrimitive.ItemIndicator>
        <Circle className="h-4 w-4 fill-current" />
      </ContextMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </ContextMenuPrimitive.RadioItem>
))
ContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName

const ContextMenuLabel = React.forwardRef(({ className, inset, ...props }, ref) => (
  <ContextMenuPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold text-foreground",
      inset && "pl-8",
      className
    )}
    {...props} />
))
ContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName

const ContextMenuSeparator = React.forwardRef(({ className, ...props }, ref) => (
  <ContextMenuPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-border", className)}
    {...props} />
))
ContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName

const ContextMenuShortcut = ({
  className,
  ...props
}) => {
  return (
    <span
      className={cn("ml-auto text-xs tracking-widest text-muted-foreground", className)}
      {...props} />
  );
}
ContextMenuShortcut.displayName = "ContextMenuShortcut"

export {
  ContextMenu,
  ContextMenuTrigger,
  ContextMenuContent,
  ContextMenuItem,
  ContextMenuCheckboxItem,
  ContextMenuRadioItem,
  ContextMenuLabel,
  ContextMenuSeparator,
  ContextMenuShortcut,
  ContextMenuGroup,
  ContextMenuPortal,
  ContextMenuSub,
  ContextMenuSubContent,
  ContextMenuSubTrigger,
  ContextMenuRadioGroup,
}

```

### src/components/ui/button.jsx
```jsx
import * as React from "react";
import { Slot } from "@radix-ui/react-slot";
import { cva } from "class-variance-authority";

import { cn } from "@/lib/utils";

const buttonVariants = cva(
  "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
  {
    variants: {
      variant: {
        default:
          "bg-primary text-primary-foreground shadow hover:bg-primary/90",
        destructive:
          "bg-destructive text-destructive-foreground shadow-sm hover:bg-destructive/90",
        outline:
          "border border-input bg-background shadow-sm hover:bg-accent hover:text-accent-foreground",
        secondary:
          "bg-secondary text-secondary-foreground shadow-sm hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-9 px-4 py-2",
        sm: "h-8 rounded-md px-3 text-xs",
        lg: "h-10 rounded-md px-8",
        icon: "h-9 w-9",
        xl: "h-12 rounded-md px-8",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
);

const Button = React.forwardRef(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : "button";
    return (
      <Comp
        className={cn(buttonVariants({ variant, size, className }))}
        ref={ref}
        {...props}
      />
    );
  }
);
Button.displayName = "Button";

export { Button, buttonVariants };

```

### src/components/ui/separator.jsx
```jsx
import * as React from "react"
import * as SeparatorPrimitive from "@radix-ui/react-separator"

import { cn } from "@/lib/utils"

const Separator = React.forwardRef((
  { className, orientation = "horizontal", decorative = true, ...props },
  ref
) => (
  <SeparatorPrimitive.Root
    ref={ref}
    decorative={decorative}
    orientation={orientation}
    className={cn(
      "shrink-0 bg-border",
      orientation === "horizontal" ? "h-[1px] w-full" : "h-full w-[1px]",
      className
    )}
    {...props} />
))
Separator.displayName = SeparatorPrimitive.Root.displayName

export { Separator }

```

### src/components/ui/chart.jsx
```jsx
"use client";
import * as React from "react";
import * as RechartsPrimitive from "recharts";

import { cn } from "@/lib/utils";

// Format: { THEME_NAME: CSS_SELECTOR }
const THEMES = {
  light: "",
  dark: ".dark",
};

const ChartContext = React.createContext(null);

function useChart() {
  const context = React.useContext(ChartContext);

  if (!context) {
    throw new Error("useChart must be used within a <ChartContainer />");
  }

  return context;
}

const ChartContainer = React.forwardRef(
  ({ id, className, children, config, ...props }, ref) => {
    const uniqueId = React.useId();
    const chartId = `chart-${id || uniqueId.replace(/:/g, "")}`;

    return (
      <ChartContext.Provider value={{ config }}>
        <div
          data-chart={chartId}
          ref={ref}
          className={cn(
            "flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none",
            className
          )}
          {...props}
        >
          <ChartStyle id={chartId} config={config} />
          <RechartsPrimitive.ResponsiveContainer>
            {children}
          </RechartsPrimitive.ResponsiveContainer>
        </div>
      </ChartContext.Provider>
    );
  }
);
ChartContainer.displayName = "Chart";

const ChartStyle = ({ id, config }) => {
  const colorConfig = Object.entries(config).filter(
    ([, config]) => config.theme || config.color
  );

  if (!colorConfig.length) {
    return null;
  }

  return (
    <style
      dangerouslySetInnerHTML={{
        __html: Object.entries(THEMES)
          .map(
            ([theme, prefix]) => `
${prefix} [data-chart=${id}] {
${colorConfig
  .map(([key, itemConfig]) => {
    const color = itemConfig.theme?.[theme] || itemConfig.color;
    return color ? `  --color-${key}: ${color};` : null;
  })
  .join("\n")}
}
`
          )
          .join("\n"),
      }}
    />
  );
};

const ChartTooltip = RechartsPrimitive.Tooltip;

const ChartTooltipContent = React.forwardRef(
  (
    {
      active,
      payload,
      className,
      indicator = "dot",
      hideLabel = false,
      hideIndicator = false,
      label,
      labelFormatter,
      labelClassName,
      formatter,
      color,
      nameKey,
      labelKey,
    },
    ref
  ) => {
    const { config } = useChart();

    const tooltipLabel = React.useMemo(() => {
      if (hideLabel || !payload?.length) {
        return null;
      }

      const [item] = payload;
      const key = `${labelKey || item?.dataKey || item?.name || "value"}`;
      const itemConfig = getPayloadConfigFromPayload(config, item, key);
      const value =
        !labelKey && typeof label === "string"
          ? config[label]?.label || label
          : itemConfig?.label;

      if (labelFormatter) {
        return (
          <div className={cn("font-medium", labelClassName)}>
            {labelFormatter(value, payload)}
          </div>
        );
      }

      if (!value) {
        return null;
      }

      return <div className={cn("font-medium", labelClassName)}>{value}</div>;
    }, [
      label,
      labelFormatter,
      payload,
      hideLabel,
      labelClassName,
      config,
      labelKey,
    ]);

    if (!active || !payload?.length) {
      return null;
    }

    const nestLabel = payload.length === 1 && indicator !== "dot";

    return (
      <div
        ref={ref}
        className={cn(
          "grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl",
          className
        )}
      >
        {!nestLabel ? tooltipLabel : null}
        <div className="grid gap-1.5">
          {payload.map((item, index) => {
            const key = `${nameKey || item.name || item.dataKey || "value"}`;
            const itemConfig = getPayloadConfigFromPayload(config, item, key);
            const indicatorColor = color || item.payload.fill || item.color;

            return (
              <div
                key={item.dataKey}
                className={cn(
                  "flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground",
                  indicator === "dot" && "items-center"
                )}
              >
                {formatter && item?.value !== undefined && item.name ? (
                  formatter(item.value, item.name, item, index, item.payload)
                ) : (
                  <>
                    {itemConfig?.icon ? (
                      <itemConfig.icon />
                    ) : (
                      !hideIndicator && (
                        <div
                          className={cn(
                            "shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]",
                            {
                              "h-2.5 w-2.5": indicator === "dot",
                              "w-1": indicator === "line",
                              "w-0 border-[1.5px] border-dashed bg-transparent":
                                indicator === "dashed",
                              "my-0.5": nestLabel && indicator === "dashed",
                            }
                          )}
                          style={{
                            "--color-bg": indicatorColor,
                            "--color-border": indicatorColor,
                          }}
                        />
                      )
                    )}
                    <div
                      className={cn(
                        "flex flex-1 justify-between leading-none",
                        nestLabel ? "items-end" : "items-center"
                      )}
                    >
                      <div className="grid gap-1.5">
                        {nestLabel ? tooltipLabel : null}
                        <span className="text-muted-foreground">
                          {itemConfig?.label || item.name}
                        </span>
                      </div>
                      {item.value && (
                        <span className="font-mono font-medium tabular-nums text-foreground">
                          {item.value.toLocaleString()}
                        </span>
                      )}
                    </div>
                  </>
                )}
              </div>
            );
          })}
        </div>
      </div>
    );
  }
);
ChartTooltipContent.displayName = "ChartTooltip";

const ChartLegend = RechartsPrimitive.Legend;

const ChartLegendContent = React.forwardRef(
  (
    { className, hideIcon = false, payload, verticalAlign = "bottom", nameKey },
    ref
  ) => {
    const { config } = useChart();

    if (!payload?.length) {
      return null;
    }

    return (
      <div
        ref={ref}
        className={cn(
          "flex items-center justify-center gap-4",
          verticalAlign === "top" ? "pb-3" : "pt-3",
          className
        )}
      >
        {payload.map((item) => {
          const key = `${nameKey || item.dataKey || "value"}`;
          const itemConfig = getPayloadConfigFromPayload(config, item, key);

          return (
            <div
              key={item.value}
              className={cn(
                "flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground"
              )}
            >
              {itemConfig?.icon && !hideIcon ? (
                <itemConfig.icon />
              ) : (
                <div
                  className="h-2 w-2 shrink-0 rounded-[2px]"
                  style={{
                    backgroundColor: item.color,
                  }}
                />
              )}
              {itemConfig?.label}
            </div>
          );
        })}
      </div>
    );
  }
);
ChartLegendContent.displayName = "ChartLegend";

// Helper to extract item config from a payload.
function getPayloadConfigFromPayload(config, payload, key) {
  if (typeof payload !== "object" || payload === null) {
    return undefined;
  }

  const payloadPayload =
    "payload" in payload &&
    typeof payload.payload === "object" &&
    payload.payload !== null
      ? payload.payload
      : undefined;

  let configLabelKey = key;

  if (key in payload && typeof payload[key] === "string") {
    configLabelKey = payload[key];
  } else if (
    payloadPayload &&
    key in payloadPayload &&
    typeof payloadPayload[key] === "string"
  ) {
    configLabelKey = payloadPayload[key];
  }

  return configLabelKey in config ? config[configLabelKey] : config[key];
}

export {
  ChartContainer,
  ChartTooltip,
  ChartTooltipContent,
  ChartLegend,
  ChartLegendContent,
  ChartStyle,
};

```

### src/components/ui/switch.jsx
```jsx
import * as React from "react"
import * as SwitchPrimitives from "@radix-ui/react-switch"

import { cn } from "@/lib/utils"

const Switch = React.forwardRef(({ className, ...props }, ref) => (
  <SwitchPrimitives.Root
    className={cn(
      "peer inline-flex h-5 w-9 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent shadow-sm transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input",
      className
    )}
    {...props}
    ref={ref}>
    <SwitchPrimitives.Thumb
      className={cn(
        "pointer-events-none block h-4 w-4 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-4 data-[state=unchecked]:translate-x-0"
      )} />
  </SwitchPrimitives.Root>
))
Switch.displayName = SwitchPrimitives.Root.displayName

export { Switch }

```

### src/components/ui/card.jsx
```jsx
import * as React from "react"

import { cn } from "@/lib/utils"

const Card = React.forwardRef(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("rounded-xl border bg-card text-card-foreground shadow", className)}
    {...props} />
))
Card.displayName = "Card"

const CardHeader = React.forwardRef(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex flex-col space-y-1.5 p-6", className)}
    {...props} />
))
CardHeader.displayName = "CardHeader"

const CardTitle = React.forwardRef(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("font-semibold leading-none tracking-tight", className)}
    {...props} />
))
CardTitle.displayName = "CardTitle"

const CardDescription = React.forwardRef(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props} />
))
CardDescription.displayName = "CardDescription"

const CardContent = React.forwardRef(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("p-6 pt-0", className)} {...props} />
))
CardContent.displayName = "CardContent"

const CardFooter = React.forwardRef(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex items-center p-6 pt-0", className)}
    {...props} />
))
CardFooter.displayName = "CardFooter"

export { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }

```

### src/components/ui/pagination.jsx
```jsx
import * as React from "react"
import { ChevronLeft, ChevronRight, MoreHorizontal } from "lucide-react"

import { cn } from "@/lib/utils"
import { buttonVariants } from "@/components/ui/button";

const Pagination = ({
  className,
  ...props
}) => (
  <nav
    role="navigation"
    aria-label="pagination"
    className={cn("mx-auto flex w-full justify-center", className)}
    {...props} />
)
Pagination.displayName = "Pagination"

const PaginationContent = React.forwardRef(({ className, ...props }, ref) => (
  <ul
    ref={ref}
    className={cn("flex flex-row items-center gap-1", className)}
    {...props} />
))
PaginationContent.displayName = "PaginationContent"

const PaginationItem = React.forwardRef(({ className, ...props }, ref) => (
  <li ref={ref} className={cn("", className)} {...props} />
))
PaginationItem.displayName = "PaginationItem"

const PaginationLink = ({
  className,
  isActive,
  size = "icon",
  ...props
}) => (
  <a
    aria-current={isActive ? "page" : undefined}
    className={cn(buttonVariants({
      variant: isActive ? "outline" : "ghost",
      size,
    }), className)}
    {...props} />
)
PaginationLink.displayName = "PaginationLink"

const PaginationPrevious = ({
  className,
  ...props
}) => (
  <PaginationLink
    aria-label="Go to previous page"
    size="default"
    className={cn("gap-1 pl-2.5", className)}
    {...props}>
    <ChevronLeft className="h-4 w-4" />
    <span>Previous</span>
  </PaginationLink>
)
PaginationPrevious.displayName = "PaginationPrevious"

const PaginationNext = ({
  className,
  ...props
}) => (
  <PaginationLink
    aria-label="Go to next page"
    size="default"
    className={cn("gap-1 pr-2.5", className)}
    {...props}>
    <span>Next</span>
    <ChevronRight className="h-4 w-4" />
  </PaginationLink>
)
PaginationNext.displayName = "PaginationNext"

const PaginationEllipsis = ({
  className,
  ...props
}) => (
  <span
    aria-hidden
    className={cn("flex h-9 w-9 items-center justify-center", className)}
    {...props}>
    <MoreHorizontal className="h-4 w-4" />
    <span className="sr-only">More pages</span>
  </span>
)
PaginationEllipsis.displayName = "PaginationEllipsis"

export {
  Pagination,
  PaginationContent,
  PaginationLink,
  PaginationItem,
  PaginationPrevious,
  PaginationNext,
  PaginationEllipsis,
}

```

### src/components/ui/navigation-menu.jsx
```jsx
import * as React from "react"
import * as NavigationMenuPrimitive from "@radix-ui/react-navigation-menu"
import { cva } from "class-variance-authority"
import { ChevronDown } from "lucide-react"

import { cn } from "@/lib/utils"

const NavigationMenu = React.forwardRef(({ className, children, ...props }, ref) => (
  <NavigationMenuPrimitive.Root
    ref={ref}
    className={cn(
      "relative z-10 flex max-w-max flex-1 items-center justify-center",
      className
    )}
    {...props}>
    {children}
    <NavigationMenuViewport />
  </NavigationMenuPrimitive.Root>
))
NavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName

const NavigationMenuList = React.forwardRef(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.List
    ref={ref}
    className={cn(
      "group flex flex-1 list-none items-center justify-center space-x-1",
      className
    )}
    {...props} />
))
NavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName

const NavigationMenuItem = NavigationMenuPrimitive.Item

const navigationMenuTriggerStyle = cva(
  "group inline-flex h-9 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent"
)

const NavigationMenuTrigger = React.forwardRef(({ className, children, ...props }, ref) => (
  <NavigationMenuPrimitive.Trigger
    ref={ref}
    className={cn(navigationMenuTriggerStyle(), "group", className)}
    {...props}>
    {children}{" "}
    <ChevronDown
      className="relative top-[1px] ml-1 h-3 w-3 transition duration-300 group-data-[state=open]:rotate-180"
      aria-hidden="true" />
  </NavigationMenuPrimitive.Trigger>
))
NavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName

const NavigationMenuContent = React.forwardRef(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.Content
    ref={ref}
    className={cn(
      "left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto ",
      className
    )}
    {...props} />
))
NavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName

const NavigationMenuLink = NavigationMenuPrimitive.Link

const NavigationMenuViewport = React.forwardRef(({ className, ...props }, ref) => (
  <div className={cn("absolute left-0 top-full flex justify-center")}>
    <NavigationMenuPrimitive.Viewport
      className={cn(
        "origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]",
        className
      )}
      ref={ref}
      {...props} />
  </div>
))
NavigationMenuViewport.displayName =
  NavigationMenuPrimitive.Viewport.displayName

const NavigationMenuIndicator = React.forwardRef(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.Indicator
    ref={ref}
    className={cn(
      "top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in",
      className
    )}
    {...props}>
    <div
      className="relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md" />
  </NavigationMenuPrimitive.Indicator>
))
NavigationMenuIndicator.displayName =
  NavigationMenuPrimitive.Indicator.displayName

export {
  navigationMenuTriggerStyle,
  NavigationMenu,
  NavigationMenuList,
  NavigationMenuItem,
  NavigationMenuContent,
  NavigationMenuTrigger,
  NavigationMenuLink,
  NavigationMenuIndicator,
  NavigationMenuViewport,
}

```

### src/components/ui/radio-group.jsx
```jsx
import * as React from "react"
import * as RadioGroupPrimitive from "@radix-ui/react-radio-group"
import { Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const RadioGroup = React.forwardRef(({ className, ...props }, ref) => {
  return (<RadioGroupPrimitive.Root className={cn("grid gap-2", className)} {...props} ref={ref} />);
})
RadioGroup.displayName = RadioGroupPrimitive.Root.displayName

const RadioGroupItem = React.forwardRef(({ className, ...props }, ref) => {
  return (
    <RadioGroupPrimitive.Item
      ref={ref}
      className={cn(
        "aspect-square h-4 w-4 rounded-full border border-primary text-primary shadow focus:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50",
        className
      )}
      {...props}>
      <RadioGroupPrimitive.Indicator className="flex items-center justify-center">
        <Circle className="h-3.5 w-3.5 fill-primary" />
      </RadioGroupPrimitive.Indicator>
    </RadioGroupPrimitive.Item>
  );
})
RadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName

export { RadioGroup, RadioGroupItem }

```

### src/components/ui/calendar.jsx
```jsx
import * as React from "react"
import { ChevronLeft, ChevronRight } from "lucide-react"
import { DayPicker } from "react-day-picker"

import { cn } from "@/lib/utils"
import { buttonVariants } from "@/components/ui/button"

function Calendar({
  className,
  classNames,
  showOutsideDays = true,
  ...props
}) {
  return (
    <DayPicker
      showOutsideDays={showOutsideDays}
      className={cn("p-3", className)}
      classNames={{
        months: "flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0",
        month: "space-y-4",
        caption: "flex justify-center pt-1 relative items-center",
        caption_label: "text-sm font-medium",
        nav: "space-x-1 flex items-center",
        nav_button: cn(
          buttonVariants({ variant: "outline" }),
          "h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100"
        ),
        nav_button_previous: "absolute left-1",
        nav_button_next: "absolute right-1",
        table: "w-full border-collapse space-y-1",
        head_row: "flex",
        head_cell:
          "text-muted-foreground rounded-md w-8 font-normal text-[0.8rem]",
        row: "flex w-full mt-2",
        cell: cn(
          "relative p-0 text-center text-sm focus-within:relative focus-within:z-20 [&:has([aria-selected])]:bg-accent [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected].day-range-end)]:rounded-r-md",
          props.mode === "range"
            ? "[&:has(>.day-range-end)]:rounded-r-md [&:has(>.day-range-start)]:rounded-l-md first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md"
            : "[&:has([aria-selected])]:rounded-md"
        ),
        day: cn(
          buttonVariants({ variant: "ghost" }),
          "h-8 w-8 p-0 font-normal aria-selected:opacity-100"
        ),
        day_range_start: "day-range-start",
        day_range_end: "day-range-end",
        day_selected:
          "bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground",
        day_today: "bg-accent text-accent-foreground",
        day_outside:
          "day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground",
        day_disabled: "text-muted-foreground opacity-50",
        day_range_middle:
          "aria-selected:bg-accent aria-selected:text-accent-foreground",
        day_hidden: "invisible",
        ...classNames,
      }}
      components={{
        IconLeft: ({ className, ...props }) => (
          <ChevronLeft className={cn("h-4 w-4", className)} {...props} />
        ),
        IconRight: ({ className, ...props }) => (
          <ChevronRight className={cn("h-4 w-4", className)} {...props} />
        ),
      }}
      {...props} />
  );
}
Calendar.displayName = "Calendar"

export { Calendar }

```

### src/components/ui/collapsible.jsx
```jsx
"use client"

import * as CollapsiblePrimitive from "@radix-ui/react-collapsible"

const Collapsible = CollapsiblePrimitive.Root

const CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger

const CollapsibleContent = CollapsiblePrimitive.CollapsibleContent

export { Collapsible, CollapsibleTrigger, CollapsibleContent }

```

### src/components/ui/popover.jsx
```jsx
import * as React from "react"
import * as PopoverPrimitive from "@radix-ui/react-popover"

import { cn } from "@/lib/utils"

const Popover = PopoverPrimitive.Root

const PopoverTrigger = PopoverPrimitive.Trigger

const PopoverAnchor = PopoverPrimitive.Anchor

const PopoverContent = React.forwardRef(({ className, align = "center", sideOffset = 4, ...props }, ref) => (
  <PopoverPrimitive.Portal>
    <PopoverPrimitive.Content
      ref={ref}
      align={align}
      sideOffset={sideOffset}
      className={cn(
        "z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]",
        className
      )}
      {...props} />
  </PopoverPrimitive.Portal>
))
PopoverContent.displayName = PopoverPrimitive.Content.displayName

export { Popover, PopoverTrigger, PopoverContent, PopoverAnchor }

```

### src/components/ui/carousel.jsx
```jsx
import * as React from "react";
import useEmblaCarousel from "embla-carousel-react";
import { ArrowLeft, ArrowRight } from "lucide-react";

import { cn } from "@/lib/utils";
import { Button } from "@/components/ui/button";

const CarouselContext = React.createContext(null);

function useCarousel() {
  const context = React.useContext(CarouselContext);

  if (!context) {
    throw new Error("useCarousel must be used within a <Carousel />");
  }

  return context;
}

const Carousel = React.forwardRef(
  (
    {
      orientation = "horizontal",
      opts,
      setApi,
      plugins,
      className,
      children,
      ...props
    },
    ref
  ) => {
    const [carouselRef, api] = useEmblaCarousel(
      {
        ...opts,
        axis: orientation === "horizontal" ? "x" : "y",
      },
      plugins
    );
    const [canScrollPrev, setCanScrollPrev] = React.useState(false);
    const [canScrollNext, setCanScrollNext] = React.useState(false);

    const onSelect = React.useCallback((api) => {
      if (!api) {
        return;
      }

      setCanScrollPrev(api.canScrollPrev());
      setCanScrollNext(api.canScrollNext());
    }, []);

    const scrollPrev = React.useCallback(() => {
      api?.scrollPrev();
    }, [api]);

    const scrollNext = React.useCallback(() => {
      api?.scrollNext();
    }, [api]);

    const handleKeyDown = React.useCallback(
      (event) => {
        if (event.key === "ArrowLeft") {
          event.preventDefault();
          scrollPrev();
        } else if (event.key === "ArrowRight") {
          event.preventDefault();
          scrollNext();
        }
      },
      [scrollPrev, scrollNext]
    );

    React.useEffect(() => {
      if (!api || !setApi) {
        return;
      }

      setApi(api);
    }, [api, setApi]);

    React.useEffect(() => {
      if (!api) {
        return;
      }

      onSelect(api);
      api.on("reInit", onSelect);
      api.on("select", onSelect);

      return () => {
        api?.off("select", onSelect);
      };
    }, [api, onSelect]);

    return (
      <CarouselContext.Provider
        value={{
          carouselRef,
          api: api,
          opts,
          orientation:
            orientation || (opts?.axis === "y" ? "vertical" : "horizontal"),
          scrollPrev,
          scrollNext,
          canScrollPrev,
          canScrollNext,
        }}
      >
        <div
          ref={ref}
          onKeyDownCapture={handleKeyDown}
          className={cn("relative", className)}
          role="region"
          aria-roledescription="carousel"
          {...props}
        >
          {children}
        </div>
      </CarouselContext.Provider>
    );
  }
);
Carousel.displayName = "Carousel";

const CarouselContent = React.forwardRef(({ className, ...props }, ref) => {
  const { carouselRef, orientation } = useCarousel();

  return (
    <div ref={carouselRef} className="overflow-hidden">
      <div
        ref={ref}
        className={cn(
          "flex",
          orientation === "horizontal" ? "-ml-4" : "-mt-4 flex-col",
          className
        )}
        {...props}
      />
    </div>
  );
});
CarouselContent.displayName = "CarouselContent";

const CarouselItem = React.forwardRef(({ className, ...props }, ref) => {
  const { orientation } = useCarousel();

  return (
    <div
      ref={ref}
      role="group"
      aria-roledescription="slide"
      className={cn(
        "min-w-0 shrink-0 grow-0 basis-full",
        orientation === "horizontal" ? "pl-4" : "pt-4",
        className
      )}
      {...props}
    />
  );
});
CarouselItem.displayName = "CarouselItem";

const CarouselPrevious = React.forwardRef(
  ({ className, variant = "outline", size = "icon", ...props }, ref) => {
    const { orientation, scrollPrev, canScrollPrev } = useCarousel();

    return (
      <Button
        ref={ref}
        variant={variant}
        size={size}
        className={cn(
          "absolute  h-8 w-8 rounded-full",
          orientation === "horizontal"
            ? "-left-12 top-1/2 -translate-y-1/2"
            : "-top-12 left-1/2 -translate-x-1/2 rotate-90",
          className
        )}
        disabled={!canScrollPrev}
        onClick={scrollPrev}
        {...props}
      >
        <ArrowLeft className="h-4 w-4" />
        <span className="sr-only">Previous slide</span>
      </Button>
    );
  }
);
CarouselPrevious.displayName = "CarouselPrevious";

const CarouselNext = React.forwardRef(
  ({ className, variant = "outline", size = "icon", ...props }, ref) => {
    const { orientation, scrollNext, canScrollNext } = useCarousel();

    return (
      <Button
        ref={ref}
        variant={variant}
        size={size}
        className={cn(
          "absolute h-8 w-8 rounded-full",
          orientation === "horizontal"
            ? "-right-12 top-1/2 -translate-y-1/2"
            : "-bottom-12 left-1/2 -translate-x-1/2 rotate-90",
          className
        )}
        disabled={!canScrollNext}
        onClick={scrollNext}
        {...props}
      >
        <ArrowRight className="h-4 w-4" />
        <span className="sr-only">Next slide</span>
      </Button>
    );
  }
);
CarouselNext.displayName = "CarouselNext";

export {
  Carousel,
  CarouselContent,
  CarouselItem,
  CarouselPrevious,
  CarouselNext,
};

```

### src/components/ui/menubar.jsx
```jsx
"use client"

import * as React from "react"
import * as MenubarPrimitive from "@radix-ui/react-menubar"
import { Check, ChevronRight, Circle } from "lucide-react"

import { cn } from "@/lib/utils"

function MenubarMenu({
  ...props
}) {
  return <MenubarPrimitive.Menu {...props} />;
}

function MenubarGroup({
  ...props
}) {
  return <MenubarPrimitive.Group {...props} />;
}

function MenubarPortal({
  ...props
}) {
  return <MenubarPrimitive.Portal {...props} />;
}

function MenubarRadioGroup({
  ...props
}) {
  return <MenubarPrimitive.RadioGroup {...props} />;
}

function MenubarSub({
  ...props
}) {
  return <MenubarPrimitive.Sub data-slot="menubar-sub" {...props} />;
}

const Menubar = React.forwardRef(({ className, ...props }, ref) => (
  <MenubarPrimitive.Root
    ref={ref}
    className={cn(
      "flex h-9 items-center space-x-1 rounded-md border bg-background p-1 shadow-sm",
      className
    )}
    {...props} />
))
Menubar.displayName = MenubarPrimitive.Root.displayName

const MenubarTrigger = React.forwardRef(({ className, ...props }, ref) => (
  <MenubarPrimitive.Trigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-3 py-1 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground",
      className
    )}
    {...props} />
))
MenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName

const MenubarSubTrigger = React.forwardRef(({ className, inset, children, ...props }, ref) => (
  <MenubarPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground",
      inset && "pl-8",
      className
    )}
    {...props}>
    {children}
    <ChevronRight className="ml-auto h-4 w-4" />
  </MenubarPrimitive.SubTrigger>
))
MenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName

const MenubarSubContent = React.forwardRef(({ className, ...props }, ref) => (
  <MenubarPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]",
      className
    )}
    {...props} />
))
MenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName

const MenubarContent = React.forwardRef((
  { className, align = "start", alignOffset = -4, sideOffset = 8, ...props },
  ref
) => (
  <MenubarPrimitive.Portal>
    <MenubarPrimitive.Content
      ref={ref}
      align={align}
      alignOffset={alignOffset}
      sideOffset={sideOffset}
      className={cn(
        "z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]",
        className
      )}
      {...props} />
  </MenubarPrimitive.Portal>
))
MenubarContent.displayName = MenubarPrimitive.Content.displayName

const MenubarItem = React.forwardRef(({ className, inset, ...props }, ref) => (
  <MenubarPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      inset && "pl-8",
      className
    )}
    {...props} />
))
MenubarItem.displayName = MenubarPrimitive.Item.displayName

const MenubarCheckboxItem = React.forwardRef(({ className, children, checked, ...props }, ref) => (
  <MenubarPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    checked={checked}
    {...props}>
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <MenubarPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </MenubarPrimitive.ItemIndicator>
    </span>
    {children}
  </MenubarPrimitive.CheckboxItem>
))
MenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName

const MenubarRadioItem = React.forwardRef(({ className, children, ...props }, ref) => (
  <MenubarPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}>
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <MenubarPrimitive.ItemIndicator>
        <Circle className="h-4 w-4 fill-current" />
      </MenubarPrimitive.ItemIndicator>
    </span>
    {children}
  </MenubarPrimitive.RadioItem>
))
MenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName

const MenubarLabel = React.forwardRef(({ className, inset, ...props }, ref) => (
  <MenubarPrimitive.Label
    ref={ref}
    className={cn("px-2 py-1.5 text-sm font-semibold", inset && "pl-8", className)}
    {...props} />
))
MenubarLabel.displayName = MenubarPrimitive.Label.displayName

const MenubarSeparator = React.forwardRef(({ className, ...props }, ref) => (
  <MenubarPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props} />
))
MenubarSeparator.displayName = MenubarPrimitive.Separator.displayName

const MenubarShortcut = ({
  className,
  ...props
}) => {
  return (
    <span
      className={cn("ml-auto text-xs tracking-widest text-muted-foreground", className)}
      {...props} />
  );
}
MenubarShortcut.displayname = "MenubarShortcut"

export {
  Menubar,
  MenubarMenu,
  MenubarTrigger,
  MenubarContent,
  MenubarItem,
  MenubarSeparator,
  MenubarLabel,
  MenubarCheckboxItem,
  MenubarRadioGroup,
  MenubarRadioItem,
  MenubarPortal,
  MenubarSubContent,
  MenubarSubTrigger,
  MenubarGroup,
  MenubarSub,
  MenubarShortcut,
}

```

### src/components/ui/select.jsx
```jsx
"use client"

import * as React from "react"
import * as SelectPrimitive from "@radix-ui/react-select"
import { Check, ChevronDown, ChevronUp } from "lucide-react"

import { cn } from "@/lib/utils"

const Select = SelectPrimitive.Root

const SelectGroup = SelectPrimitive.Group

const SelectValue = SelectPrimitive.Value

const SelectTrigger = React.forwardRef(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Trigger
    ref={ref}
    className={cn(
      "flex h-9 w-full items-center justify-between whitespace-nowrap rounded-md border border-input bg-transparent px-3 py-2 text-sm shadow-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-1 focus:ring-ring disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1",
      className
    )}
    {...props}>
    {children}
    <SelectPrimitive.Icon asChild>
      <ChevronDown className="h-4 w-4 opacity-50" />
    </SelectPrimitive.Icon>
  </SelectPrimitive.Trigger>
))
SelectTrigger.displayName = SelectPrimitive.Trigger.displayName

const SelectScrollUpButton = React.forwardRef(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollUpButton
    ref={ref}
    className={cn("flex cursor-default items-center justify-center py-1", className)}
    {...props}>
    <ChevronUp className="h-4 w-4" />
  </SelectPrimitive.ScrollUpButton>
))
SelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName

const SelectScrollDownButton = React.forwardRef(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollDownButton
    ref={ref}
    className={cn("flex cursor-default items-center justify-center py-1", className)}
    {...props}>
    <ChevronDown className="h-4 w-4" />
  </SelectPrimitive.ScrollDownButton>
))
SelectScrollDownButton.displayName =
  SelectPrimitive.ScrollDownButton.displayName

const SelectContent = React.forwardRef(({ className, children, position = "popper", ...props }, ref) => (
  <SelectPrimitive.Portal>
    <SelectPrimitive.Content
      ref={ref}
      className={cn(
        "relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]",
        position === "popper" &&
          "data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1",
        className
      )}
      position={position}
      {...props}>
      <SelectScrollUpButton />
      <SelectPrimitive.Viewport
        className={cn("p-1", position === "popper" &&
          "h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]")}>
        {children}
      </SelectPrimitive.Viewport>
      <SelectScrollDownButton />
    </SelectPrimitive.Content>
  </SelectPrimitive.Portal>
))
SelectContent.displayName = SelectPrimitive.Content.displayName

const SelectLabel = React.forwardRef(({ className, ...props }, ref) => (
  <SelectPrimitive.Label
    ref={ref}
    className={cn("px-2 py-1.5 text-sm font-semibold", className)}
    {...props} />
))
SelectLabel.displayName = SelectPrimitive.Label.displayName

const SelectItem = React.forwardRef(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-2 pr-8 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}>
    <span className="absolute right-2 flex h-3.5 w-3.5 items-center justify-center">
      <SelectPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </SelectPrimitive.ItemIndicator>
    </span>
    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>
  </SelectPrimitive.Item>
))
SelectItem.displayName = SelectPrimitive.Item.displayName

const SelectSeparator = React.forwardRef(({ className, ...props }, ref) => (
  <SelectPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props} />
))
SelectSeparator.displayName = SelectPrimitive.Separator.displayName

export {
  Select,
  SelectGroup,
  SelectValue,
  SelectTrigger,
  SelectContent,
  SelectLabel,
  SelectItem,
  SelectSeparator,
  SelectScrollUpButton,
  SelectScrollDownButton,
}

```

### src/components/ui/command.jsx
```jsx
import * as React from "react"
import { Command as CommandPrimitive } from "cmdk"
import { Search } from "lucide-react"

import { cn } from "@/lib/utils"
import { Dialog, DialogContent } from "@/components/ui/dialog"

const Command = React.forwardRef(({ className, ...props }, ref) => (
  <CommandPrimitive
    ref={ref}
    className={cn(
      "flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground",
      className
    )}
    {...props} />
))
Command.displayName = CommandPrimitive.displayName

const CommandDialog = ({
  children,
  ...props
}) => {
  return (
    <Dialog {...props}>
      <DialogContent className="overflow-hidden p-0">
        <Command
          className="[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5">
          {children}
        </Command>
      </DialogContent>
    </Dialog>
  );
}

const CommandInput = React.forwardRef(({ className, ...props }, ref) => (
  <div className="flex items-center border-b px-3" cmdk-input-wrapper="">
    <Search className="mr-2 h-4 w-4 shrink-0 opacity-50" />
    <CommandPrimitive.Input
      ref={ref}
      className={cn(
        "flex h-10 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50",
        className
      )}
      {...props} />
  </div>
))

CommandInput.displayName = CommandPrimitive.Input.displayName

const CommandList = React.forwardRef(({ className, ...props }, ref) => (
  <CommandPrimitive.List
    ref={ref}
    className={cn("max-h-[300px] overflow-y-auto overflow-x-hidden", className)}
    {...props} />
))

CommandList.displayName = CommandPrimitive.List.displayName

const CommandEmpty = React.forwardRef((props, ref) => (
  <CommandPrimitive.Empty ref={ref} className="py-6 text-center text-sm" {...props} />
))

CommandEmpty.displayName = CommandPrimitive.Empty.displayName

const CommandGroup = React.forwardRef(({ className, ...props }, ref) => (
  <CommandPrimitive.Group
    ref={ref}
    className={cn(
      "overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground",
      className
    )}
    {...props} />
))

CommandGroup.displayName = CommandPrimitive.Group.displayName

const CommandSeparator = React.forwardRef(({ className, ...props }, ref) => (
  <CommandPrimitive.Separator ref={ref} className={cn("-mx-1 h-px bg-border", className)} {...props} />
))
CommandSeparator.displayName = CommandPrimitive.Separator.displayName

const CommandItem = React.forwardRef(({ className, ...props }, ref) => (
  <CommandPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected=true]:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
      className
    )}
    {...props} />
))

CommandItem.displayName = CommandPrimitive.Item.displayName

const CommandShortcut = ({
  className,
  ...props
}) => {
  return (
    <span
      className={cn("ml-auto text-xs tracking-widest text-muted-foreground", className)}
      {...props} />
  );
}
CommandShortcut.displayName = "CommandShortcut"

export {
  Command,
  CommandDialog,
  CommandInput,
  CommandList,
  CommandEmpty,
  CommandGroup,
  CommandItem,
  CommandShortcut,
  CommandSeparator,
}

```

### src/components/ui/skeleton.jsx
```jsx
import { cn } from "@/lib/utils"

function Skeleton({
  className,
  ...props
}) {
  return (
    <div
      className={cn("animate-pulse rounded-md bg-primary/10", className)}
      {...props} />
  );
}

export { Skeleton }

```

### src/components/ui/toggle-group.jsx
```jsx
"use client";
import * as React from "react"
import * as ToggleGroupPrimitive from "@radix-ui/react-toggle-group"

import { cn } from "@/lib/utils"
import { toggleVariants } from "@/components/ui/toggle"

const ToggleGroupContext = React.createContext({
  size: "default",
  variant: "default",
})

const ToggleGroup = React.forwardRef(({ className, variant, size, children, ...props }, ref) => (
  <ToggleGroupPrimitive.Root
    ref={ref}
    className={cn("flex items-center justify-center gap-1", className)}
    {...props}>
    <ToggleGroupContext.Provider value={{ variant, size }}>
      {children}
    </ToggleGroupContext.Provider>
  </ToggleGroupPrimitive.Root>
))

ToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName

const ToggleGroupItem = React.forwardRef(({ className, children, variant, size, ...props }, ref) => {
  const context = React.useContext(ToggleGroupContext)

  return (
    <ToggleGroupPrimitive.Item
      ref={ref}
      className={cn(toggleVariants({
        variant: context.variant || variant,
        size: context.size || size,
      }), className)}
      {...props}>
      {children}
    </ToggleGroupPrimitive.Item>
  );
})

ToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName

export { ToggleGroup, ToggleGroupItem }

```

### src/components/ui/form.jsx
```jsx
"use client";
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { Controller, FormProvider, useFormContext } from "react-hook-form";

import { cn } from "@/lib/utils"
import { Label } from "@/components/ui/label"

const Form = FormProvider

const FormFieldContext = React.createContext({})

const FormField = (
  {
    ...props
  }
) => {
  return (
    <FormFieldContext.Provider value={{ name: props.name }}>
      <Controller {...props} />
    </FormFieldContext.Provider>
  );
}

const useFormField = () => {
  const fieldContext = React.useContext(FormFieldContext)
  const itemContext = React.useContext(FormItemContext)
  const { getFieldState, formState } = useFormContext()

  const fieldState = getFieldState(fieldContext.name, formState)

  if (!fieldContext) {
    throw new Error("useFormField should be used within <FormField>")
  }

  const { id } = itemContext

  return {
    id,
    name: fieldContext.name,
    formItemId: `${id}-form-item`,
    formDescriptionId: `${id}-form-item-description`,
    formMessageId: `${id}-form-item-message`,
    ...fieldState,
  }
}

const FormItemContext = React.createContext({})

const FormItem = React.forwardRef(({ className, ...props }, ref) => {
  const id = React.useId()

  return (
    <FormItemContext.Provider value={{ id }}>
      <div ref={ref} className={cn("space-y-2", className)} {...props} />
    </FormItemContext.Provider>
  );
})
FormItem.displayName = "FormItem"

const FormLabel = React.forwardRef(({ className, ...props }, ref) => {
  const { error, formItemId } = useFormField()

  return (
    <Label
      ref={ref}
      className={cn(error && "text-destructive", className)}
      htmlFor={formItemId}
      {...props} />
  );
})
FormLabel.displayName = "FormLabel"

const FormControl = React.forwardRef(({ ...props }, ref) => {
  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()

  return (
    <Slot
      ref={ref}
      id={formItemId}
      aria-describedby={
        !error
          ? `${formDescriptionId}`
          : `${formDescriptionId} ${formMessageId}`
      }
      aria-invalid={!!error}
      {...props} />
  );
})
FormControl.displayName = "FormControl"

const FormDescription = React.forwardRef(({ className, ...props }, ref) => {
  const { formDescriptionId } = useFormField()

  return (
    <p
      ref={ref}
      id={formDescriptionId}
      className={cn("text-[0.8rem] text-muted-foreground", className)}
      {...props} />
  );
})
FormDescription.displayName = "FormDescription"

const FormMessage = React.forwardRef(({ className, children, ...props }, ref) => {
  const { error, formMessageId } = useFormField()
  const body = error ? String(error?.message ?? "") : children

  if (!body) {
    return null
  }

  return (
    <p
      ref={ref}
      id={formMessageId}
      className={cn("text-[0.8rem] font-medium text-destructive", className)}
      {...props}>
      {body}
    </p>
  );
})
FormMessage.displayName = "FormMessage"

export {
  useFormField,
  Form,
  FormItem,
  FormLabel,
  FormControl,
  FormDescription,
  FormMessage,
  FormField,
}

```

### src/components/ui/alert-dialog.jsx
```jsx
import * as React from "react"
import * as AlertDialogPrimitive from "@radix-ui/react-alert-dialog"

import { cn } from "@/lib/utils"
import { buttonVariants } from "@/components/ui/button"

const AlertDialog = AlertDialogPrimitive.Root

const AlertDialogTrigger = AlertDialogPrimitive.Trigger

const AlertDialogPortal = AlertDialogPrimitive.Portal

const AlertDialogOverlay = React.forwardRef(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Overlay
    className={cn(
      "fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
    ref={ref} />
))
AlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName

const AlertDialogContent = React.forwardRef(({ className, ...props }, ref) => (
  <AlertDialogPortal>
    <AlertDialogOverlay />
    <AlertDialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className
      )}
      {...props} />
  </AlertDialogPortal>
))
AlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName

const AlertDialogHeader = ({
  className,
  ...props
}) => (
  <div
    className={cn("flex flex-col space-y-2 text-center sm:text-left", className)}
    {...props} />
)
AlertDialogHeader.displayName = "AlertDialogHeader"

const AlertDialogFooter = ({
  className,
  ...props
}) => (
  <div
    className={cn("flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2", className)}
    {...props} />
)
AlertDialogFooter.displayName = "AlertDialogFooter"

const AlertDialogTitle = React.forwardRef(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Title ref={ref} className={cn("text-lg font-semibold", className)} {...props} />
))
AlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName

const AlertDialogDescription = React.forwardRef(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props} />
))
AlertDialogDescription.displayName =
  AlertDialogPrimitive.Description.displayName

const AlertDialogAction = React.forwardRef(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Action ref={ref} className={cn(buttonVariants(), className)} {...props} />
))
AlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName

const AlertDialogCancel = React.forwardRef(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Cancel
    ref={ref}
    className={cn(buttonVariants({ variant: "outline" }), "mt-2 sm:mt-0", className)}
    {...props} />
))
AlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName

export {
  AlertDialog,
  AlertDialogPortal,
  AlertDialogOverlay,
  AlertDialogTrigger,
  AlertDialogContent,
  AlertDialogHeader,
  AlertDialogFooter,
  AlertDialogTitle,
  AlertDialogDescription,
  AlertDialogAction,
  AlertDialogCancel,
}

```

### src/components/ui/accordion.jsx
```jsx
import * as React from "react"
import * as AccordionPrimitive from "@radix-ui/react-accordion"
import { ChevronDown } from "lucide-react"

import { cn } from "@/lib/utils"

const Accordion = AccordionPrimitive.Root

const AccordionItem = React.forwardRef(({ className, ...props }, ref) => (
  <AccordionPrimitive.Item ref={ref} className={cn("border-b", className)} {...props} />
))
AccordionItem.displayName = "AccordionItem"

const AccordionTrigger = React.forwardRef(({ className, children, ...props }, ref) => (
  <AccordionPrimitive.Header className="flex">
    <AccordionPrimitive.Trigger
      ref={ref}
      className={cn(
        "flex flex-1 items-center justify-between py-4 text-sm font-medium transition-all hover:underline text-left [&[data-state=open]>svg]:rotate-180",
        className
      )}
      {...props}>
      {children}
      <ChevronDown
        className="h-4 w-4 shrink-0 text-muted-foreground transition-transform duration-200" />
    </AccordionPrimitive.Trigger>
  </AccordionPrimitive.Header>
))
AccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName

const AccordionContent = React.forwardRef(({ className, children, ...props }, ref) => (
  <AccordionPrimitive.Content
    ref={ref}
    className="overflow-hidden text-sm data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down"
    {...props}>
    <div className={cn("pb-4 pt-0", className)}>{children}</div>
  </AccordionPrimitive.Content>
))
AccordionContent.displayName = AccordionPrimitive.Content.displayName

export { Accordion, AccordionItem, AccordionTrigger, AccordionContent }

```

### src/components/ui/aspect-ratio.jsx
```jsx
import * as AspectRatioPrimitive from "@radix-ui/react-aspect-ratio"

const AspectRatio = AspectRatioPrimitive.Root

export { AspectRatio }

```

### src/components/ui/resizable.jsx
```jsx
"use client"

import { GripVertical } from "lucide-react"
import * as ResizablePrimitive from "react-resizable-panels"

import { cn } from "@/lib/utils"

const ResizablePanelGroup = ({
  className,
  ...props
}) => (
  <ResizablePrimitive.PanelGroup
    className={cn(
      "flex h-full w-full data-[panel-group-direction=vertical]:flex-col",
      className
    )}
    {...props} />
)

const ResizablePanel = ResizablePrimitive.Panel

const ResizableHandle = ({
  withHandle,
  className,
  ...props
}) => (
  <ResizablePrimitive.PanelResizeHandle
    className={cn(
      "relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90",
      className
    )}
    {...props}>
    {withHandle && (
      <div
        className="z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border">
        <GripVertical className="h-2.5 w-2.5" />
      </div>
    )}
  </ResizablePrimitive.PanelResizeHandle>
)

export { ResizablePanelGroup, ResizablePanel, ResizableHandle }

```

### src/components/ui/slider.jsx
```jsx
import * as React from "react"
import * as SliderPrimitive from "@radix-ui/react-slider"

import { cn } from "@/lib/utils"

const Slider = React.forwardRef(({ className, ...props }, ref) => (
  <SliderPrimitive.Root
    ref={ref}
    className={cn("relative flex w-full touch-none select-none items-center", className)}
    {...props}>
    <SliderPrimitive.Track
      className="relative h-1.5 w-full grow overflow-hidden rounded-full bg-primary/20">
      <SliderPrimitive.Range className="absolute h-full bg-primary" />
    </SliderPrimitive.Track>
    <SliderPrimitive.Thumb
      className="block h-4 w-4 rounded-full border border-primary/50 bg-background shadow transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50" />
  </SliderPrimitive.Root>
))
Slider.displayName = SliderPrimitive.Root.displayName

export { Slider }

```

### src/components/CampaignList/CampaignList.jsx
```jsx
import { useCharityDonation } from "@/hooks/useCharityDonation";
import React, { useEffect, useState } from "react";
import axios from "axios";

const formatNumber = (value) => {
  return parseFloat(value).toLocaleString("vi-VN");
};

const CampaignList = () => {
  const { getCampaign, getCampaignCount, donateETH } = useCharityDonation();
  const [campaigns, setCampaigns] = useState([]);
  const [exchangeRate, setExchangeRate] = useState(0);

  const formatCampaign = (data, id) => ({
    id,
    creator: data[0],
    title: data[1],
    tokenAddress: data[2],
    goal: {
      wei: data[3].toString(),
      eth: formatNumber(Number(data[3]) / 1e18),
      vnd: formatNumber((Number(data[3]) / 1e18) * exchangeRate),
    },
    totalDonated: {
      wei: data[5].toString(),
      eth: formatNumber(Number(data[5]) / 1e18),
      vnd: formatNumber((Number(data[5]) / 1e18) * exchangeRate),
      progress: Math.min((Number(data[5]) / Number(data[3])) * 100, 100),
    },
    deadline: data[4],
    isClosed: data[6],
    isNoLimit: data[7],
  });

  useEffect(() => {
    const fetchExchangeRate = async () => {
      try {
        const response = await axios.get(
          "https://api.coingecko.com/api/v3/simple/price?ids=ethereum&vs_currencies=vnd"
        );
        setExchangeRate(response.data.ethereum.vnd);
      } catch (error) {
        console.error("Error fetching exchange rate:", error);
      }
    };

    const fetchCampaigns = async () => {
      await fetchExchangeRate();
      const count = await getCampaignCount();
      const list = [];
      for (let i = 0; i < count; i++) {
        const campaign = await getCampaign(i);
        list.push(formatCampaign(campaign, i));
      }
      setCampaigns(list);
    };
    fetchCampaigns();
  }, []);

  return (
    <div>
      <h1>Campaign List</h1>
      {campaigns.map((c) => (
        <div key={c.id}>
          <h2>{c.title}</h2>
          <p>
            Goal: {c.goal.eth} ETH (≈ {c.goal.vnd} VND)
          </p>
          <p>
            Progress: {c.totalDonated.eth} ETH / {c.goal.eth} ETH (
            {c.totalDonated.progress.toFixed(2)}%)
          </p>
          <div
            style={{
              width: "100%",
              height: "20px",
              backgroundColor: "#eee",
              borderRadius: "10px",
              overflow: "hidden",
            }}
          >
            <div
              style={{
                width: `${c.totalDonated.progress}%`,
                height: "100%",
                backgroundColor: "#4CAF50",
                transition: "width 0.5s ease-in-out",
              }}
            />
          </div>
          <button onClick={() => donateETH(c.id, 0.004)}>
            Donate 0.01 ETH
          </button>
        </div>
      ))}
    </div>
  );
};

export default CampaignList;

```

### src/components/CircleProgress/CircleProgress.jsx
```jsx
import React from "react";

const CircleProgress = ({ progress }) => {
  const radius = 25; // Reduced from 42
  const center = 30; // Reduced from 50

  return (
    <svg className="w-full h-full" viewBox="0 0 60 60">
      {" "}
      {/* Reduced from 100x100 */}
      {/* Background circle */}
      <circle
        className="text-muted stroke-current"
        strokeWidth="6" // Reduced from 8
        fill="transparent"
        r={radius}
        cx={center}
        cy={center}
      />
      {/* Progress circle */}
      <circle
        className="text-primary stroke-current"
        strokeWidth="6" // Reduced from 8
        strokeLinecap="round"
        fill="transparent"
        r={radius}
        cx={center}
        cy={center}
        style={{
          strokeDasharray: `${2 * Math.PI * radius}`,
          strokeDashoffset: `${2 * Math.PI * radius * (1 - progress / 100)}`,
          transform: "rotate(-90deg)",
          transformOrigin: "50% 50%",
        }}
      />
      {/* Percentage text */}
      <text
        x={center}
        y={center}
        className="text-xs font-bold" // Reduced from text-base
        dominantBaseline="middle"
        textAnchor="middle"
        fill="currentColor"
      >
        {Math.round(progress)}%
      </text>
    </svg>
  );
};

export default CircleProgress;

```

### src/components/Footer/Footer.jsx
```jsx
import React from "react";

const Footer = () => {
  return (
    <footer className="px-4 md:px-0">
      <div className="container grid grid-cols-2 md:grid-cols-4 gap-8 py-10">
        <div>
          <h4 className="text-lg font-semibold mb-3">{"Donate.title"}</h4>
          <div className="grid gap-3">
            <p className="text-sm text-muted-foreground">
              {"Donate.categories"}
            </p>
            <p className="text-sm text-muted-foreground">
              {"Donate.crisisRelief"}
            </p>
            <p className="text-sm text-muted-foreground">
              {"Donate.socialFunds"}
            </p>
            <p className="text-sm text-muted-foreground">
              {"Donate.supporterSpace"}
            </p>
          </div>
        </div>

        <div>
          <h4 className="text-lg font-semibold mb-3">{"Fundraise.title"}</h4>
          <div className="grid gap-3">
            <p className="text-sm text-muted-foreground">{"Fundraise.howTo"}</p>
            <p className="text-sm text-muted-foreground">
              {"Fundraise.fundraising"}
            </p>
            <p className="text-sm text-muted-foreground">{"Fundraise.team"}</p>
            <p className="text-sm text-muted-foreground">{"Fundraise.blog"}</p>
            <p className="text-sm text-muted-foreground">
              {"Fundraise.charity"}
            </p>
            <p className="text-sm text-muted-foreground">
              {"Fundraise.SignUp"}
            </p>
          </div>
        </div>

        <div>
          <h4 className="text-lg font-semibold mb-3">{"About.title"}</h4>
          <div className="grid gap-3">
            <p className="text-sm text-muted-foreground">{"About.how"}</p>
            <p className="text-sm text-muted-foreground">{"About.blog"}</p>
            <p className="text-sm text-muted-foreground">{"About.charity"}</p>
            <p className="text-sm text-muted-foreground">{"About.signUp"}</p>
            <p className="text-sm text-muted-foreground">{"About.newsroom"}</p>
            <p className="text-sm text-muted-foreground">{"About.careers"}</p>
          </div>
        </div>

        <div>
          <h4 className="text-lg font-semibold mb-3">Help Center</h4>
          <div className="grid gap-3">
            <p className="text-sm text-muted-foreground">{"About.how"}</p>
            <p className="text-sm text-muted-foreground">{"About.blog"}</p>
            <p className="text-sm text-muted-foreground">{"About.charity"}</p>
            <p className="text-sm text-muted-foreground">{"About.signUp"}</p>
            <p className="text-sm text-muted-foreground">{"About.newsroom"}</p>
            <p className="text-sm text-muted-foreground">{"About.careers"}</p>
          </div>
        </div>
      </div>
    </footer>
  );
};

export default Footer;

```

### src/components/Topic/TopicCard.jsx
```jsx
import { Button } from "@/components/ui/button";
import { ArrowRightIcon, ChevronLeft, ChevronRight } from "lucide-react";
import React from "react";
import * as motion from "motion/react-client";

const TopicCard = ({
  layout,
  image = "/Profiles_HP_Sm.png",
  title = "How to Help: Winter Storm Relief",
  description = "Winter storms have affected states across the country, leaving manywithout access to essentials. Donate to verified fundraisers now to help.",
}) => {
  if (layout === "horizontal") {
    return (
      <div className="grid grid-cols-2 w-full rounded-lg overflow-hidden">
        <div className="relative">
          <img
            src={image}
            className="w-full h-full aspect-video"
            alt="Profiles_HP_Sm"
          />
          <span className="absolute top-2 left-2 px-3 py-1 bg-blue-500 font-semibold text-sm opacity-80 rounded-full text-white">
            Urgent cause
          </span>
        </div>
        <div className="flex p-20 justify-center flex-col bg-background ">
          <h3 className="font-semibold text-xl mb-2">{title}</h3>
          <p className="text-muted-foreground">{description}</p>
          <motion.div whileTap={{ scale: 0.8 }} className="mt-8">
            <Button variant="ghost">
              Donate now <ChevronRight />
            </Button>
          </motion.div>
        </div>
      </div>
    );
  }

  return (
    <div>
      <div className="flex flex-col w-full rounded-lg overflow-hidden">
        <div className="relative">
          <img
            src={image}
            className="w-full h-full aspect-video"
            alt="Profiles_HP_Sm"
          />
          <span className="absolute top-2 left-2 px-3 py-1 bg-blue-500 font-semibold text-sm opacity-80 rounded-full text-white">
            Urgent cause
          </span>
        </div>
        <div className="flex p-4 justify-center flex-col bg-background ">
          <h3 className="font-semibold text-xl mb-2">{title}</h3>
          {/* <p className="text-muted-foreground">{description}</p> */}
          <motion.div whileTap={{ scale: 0.8 }} className="mt-4">
            <Button variant="ghost">
              Donate now <ChevronRight />
            </Button>
          </motion.div>
        </div>
      </div>
    </div>
  );
};

export default TopicCard;

```

### src/components/ShareModal/ShareModal.jsx
```jsx
import React from "react";
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Copy, Facebook, Link, Share } from "lucide-react";
import { toast } from "sonner";
import FacebookSvg from "../Icons/FacebookSvg";
import ZaloSvg from "../Icons/ZaloSvg";

const ShareModal = ({ campaign }) => {
  const shareUrl = window.location.href;

  const handleCopyLink = async () => {
    try {
      await navigator.clipboard.writeText(shareUrl);
      toast.success("Đã sao chép liên kết!");
    } catch (error) {
      toast.error("Không thể sao chép liên kết");
    }
  };

  const handleShareFacebook = () => {
    const url = `https://www.facebook.com/sharer/sharer.php?u=${encodeURIComponent(
      shareUrl
    )}`;
    window.open(url, "_blank");
  };

  const handleShareZalo = () => {
    const url = `https://zalo.me/share?u=${encodeURIComponent(shareUrl)}`;
    window.open(url, "_blank");
  };

  return (
    <Dialog>
      <DialogTrigger asChild>
        <Button variant="secondary" size="lg" className="text-lg">
          <Share className="mr-2" /> Chia sẻ
        </Button>
      </DialogTrigger>
      <DialogContent className="sm:max-w-md">
        <DialogHeader>
          <DialogTitle>Chia sẻ chiến dịch này</DialogTitle>
        </DialogHeader>
        <div className="flex items-center space-x-2 mt-4">
          <Input readOnly value={shareUrl} className="flex-1" />
          <Button variant="secondary" onClick={handleCopyLink}>
            <Copy className="h-4 w-4" />
          </Button>
        </div>
        <div className="flex flex-col gap-4 mt-6">
          <Button
            variant="outline"
            className="w-full justify-start"
            onClick={handleShareFacebook}
          >
            <FacebookSvg className="mr-2 h-8 w-8 text-blue-600" />
            Chia sẻ trên Facebook
          </Button>
          <Button
            variant="outline"
            className="w-full justify-start"
            onClick={handleShareZalo}
          >
            <ZaloSvg />
            Chia sẻ trên Zalo
          </Button>
        </div>
      </DialogContent>
    </Dialog>
  );
};

export default ShareModal;

```

### src/components/ReadMore/ReadMore.jsx
```jsx
import { useState } from "react";
import { Button } from "@/components/ui/button";
import { cn } from "@/lib/utils";
import DOMPurify from "dompurify";

export default function ReadMore({ text, maxLength = 300, className }) {
  const [isExpanded, setIsExpanded] = useState(false);

  // Sanitize HTML content
  const sanitizedHtml = DOMPurify.sanitize(text);

  // Function to truncate HTML string
  const truncateHtml = (html, length) => {
    const div = document.createElement("div");
    div.innerHTML = html;
    const text = div.textContent;
    if (text.length <= length) return html;

    let truncated = text.slice(0, length);
    return `<p>${truncated}...</p>`;
  };

  if (text.length <= maxLength) {
    return (
      <div
        className={className}
        dangerouslySetInnerHTML={{ __html: sanitizedHtml }}
      />
    );
  }

  const toggleReadMore = () => {
    setIsExpanded(!isExpanded);
  };

  return (
    <div className="space-y-2">
      <div
        className={cn("relative", !isExpanded && "max-h-40 overflow-hidden")}
      >
        <div
          className={cn("transition-all duration-300", className)}
          dangerouslySetInnerHTML={{
            __html: isExpanded
              ? sanitizedHtml
              : truncateHtml(sanitizedHtml, maxLength),
          }}
        />

        {!isExpanded && (
          <div className="absolute bottom-0 left-0 right-0 h-16 bg-gradient-to-t from-white to-transparent pointer-events-none"></div>
        )}
      </div>

      <Button
        variant="ghost"
        size="sm"
        onClick={toggleReadMore}
        className="text-blue-500 hover:text-blue-700 p-0 h-auto font-medium"
      >
        {isExpanded ? "Ẩn bớt" : "Xem thêm"}
      </Button>
    </div>
  );
}

```

### src/components/Card/Card.jsx
```jsx
import React from "react";
import { Link } from "react-router-dom";
import ProgressBar from "../ProgressBar/ProgressBar";
import { Badge } from "../ui/badge";
import { CampaignStatus } from "@/constants/status";
import { CheckCircle } from "lucide-react";
import { truncate } from "lodash";
const Card = ({ campaign, size, titleMaxLength }) => {
  const renderMedia = () => {
    if (campaign?.cover?.type === "VIDEO") {
      return (
        <video
          src={campaign?.cover?.url}
          className={`w-full h-56 object-cover ${
            size === "lg" ? "h-full" : "h-56 "
          }`}
          controls
          muted
        >
          <source src={campaign?.cover?.url} type="video/mp4" />
          Your browser does not support the video tag.
        </video>
      );
    }

    return (
      <img
        src={campaign?.cover?.url}
        alt={campaign?.title}
        className={`w-full h-56 object-cover ${
          size === "lg" ? "h-full" : "h-56 "
        }`}
      />
    );
  };
  return (
    <Link to={`/fund/${campaign?.id}`} className="flex flex-col">
      <div className="relative rounded-lg flex-1 overflow-hidden">
        {renderMedia()}
        <span className="absolute left-2 bottom-2 px-4 py-1 bg-slate-900 bg-opacity-80 text-white rounded-full">
          {campaign?._count?.donations} Đóng góp
        </span>
        <Badge
          variant={campaign?.status === "ACTIVE" ? "secondary" : "default"}
          className="absolute top-4 right-4 flex gap-2 items-center"
        >
          {campaign?.status === "FINISHED" && <CheckCircle size={18} />}
          {CampaignStatus[campaign?.status]}
        </Badge>
      </div>
      <div className="p-1">
        <h3 className="font-semibold leading-none py-2" title={campaign?.title}>
          {truncate(campaign?.title, { length: titleMaxLength ?? 40 })}
        </h3>
        <p className="text-sm text-muted-foreground  mb-2">
          Tạo bởi {campaign?.user?.name}
        </p>
        <ProgressBar
          value={Number(campaign?.totalDonated)}
          max={Number(campaign?.ethGoal)}
        />
      </div>
    </Link>
  );
};

export default Card;

```

### src/components/FundSkeleton/index.jsx
```jsx
import { Skeleton } from "@/components/ui/skeleton";
import { Separator } from "@radix-ui/react-context-menu";

// Add this component before the main Fund component
const FundSkeleton = () => {
  return (
    <div className="container py-6 md:py-10 px-4 md:px-6">
      {/* Title Skeleton */}
      <Skeleton className="h-8 md:h-10 w-3/4 mb-6" />

      <div className="grid grid-cols-1 md:grid-cols-3 gap-4 md:gap-6">
        <div className="col-span-1 md:col-span-2">
          {/* Main Image Skeleton */}
          <Skeleton className="w-full h-96 rounded-lg" />

          {/* User Info Skeleton */}
          <div className="flex gap-3 md:gap-4 items-center mt-4 pb-4">
            <Skeleton className="h-8 w-8 md:h-10 md:w-10 rounded-full" />
            <div className="space-y-2">
              <Skeleton className="h-4 w-48" />
              <Skeleton className="h-3 w-32" />
            </div>
          </div>

          <Separator />

          {/* Description Skeleton */}
          <div className="space-y-2 mt-4 md:mt-6">
            <Skeleton className="h-4 w-full" />
            <Skeleton className="h-4 w-full" />
            <Skeleton className="h-4 w-3/4" />
          </div>

          <Separator className="my-6 md:my-8" />

          {/* Image Gallery Skeleton */}
          <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
            {[...Array(4)].map((_, i) => (
              <Skeleton key={i} className="aspect-square rounded-md" />
            ))}
          </div>

          <Separator className="my-6 md:my-8" />

          {/* Comments Section Skeleton */}
          <div className="mt-6 md:mt-8">
            <Skeleton className="h-6 w-32 mb-4" />
            <div className="space-y-4">
              {[...Array(3)].map((_, i) => (
                <div key={i} className="flex gap-4">
                  <Skeleton className="h-10 w-10 rounded-full flex-shrink-0" />
                  <div className="flex-1 space-y-2">
                    <Skeleton className="h-4 w-32" />
                    <Skeleton className="h-4 w-full" />
                  </div>
                </div>
              ))}
            </div>
          </div>
        </div>

        {/* Fund Box Skeleton */}
        <div className="col-span-1 order-first md:order-none mb-4 md:mb-0">
          <div className="border rounded-lg p-4 space-y-4">
            <Skeleton className="h-6 w-3/4" />
            <Skeleton className="h-10 w-full" />
            <div className="space-y-2">
              <Skeleton className="h-4 w-full" />
              <Skeleton className="h-4 w-2/3" />
            </div>
            <Skeleton className="h-10 w-full rounded-full" />
          </div>
        </div>
      </div>
    </div>
  );
};

export default FundSkeleton;

```

### src/components/NotificationList/index.jsx
```jsx
import React from "react";
import { useNotification } from "../NotificationProvider";
import { Bell } from "lucide-react";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
  DropdownMenuSeparator,
} from "@/components/ui/dropdown-menu";
import { Button } from "@/components/ui/button";
import { cn } from "@/lib/utils";
import { NotificationType } from "@/constants";
import { Link } from "react-router-dom";

const NotificationList = () => {
  const {
    notifications,
    unreadCount,
    markAsReadNotification,
    markAllAsReadNotification,
  } = useNotification();

  return (
    <DropdownMenu>
      <DropdownMenuTrigger asChild>
        <div className="cursor-pointer relative transition-colors hover:bg-muted p-2 group">
          <Bell
            className={cn(
              "h-5 w-5",
              unreadCount > 0 && "animate-bell-shake text-primary"
            )}
          />
          {unreadCount > 0 && (
            <span className="absolute -top-1 -right-1 flex h-4 w-4 items-center justify-center rounded-full bg-red-500 text-[11px] text-white ring-2 ring-white">
              {unreadCount}
            </span>
          )}
        </div>
      </DropdownMenuTrigger>
      <DropdownMenuContent align="end" className="w-80">
        <div className="flex items-center justify-between px-4 py-2">
          <h3 className="font-semibold">Thông báo</h3>
          {unreadCount > 0 && (
            <Button
              variant="ghost"
              className="text-xs hover:text-primary transition-colors"
              onClick={markAllAsReadNotification}
            >
              Đánh dấu tất cả đã đọc
            </Button>
          )}
        </div>
        <DropdownMenuSeparator />
        <div className="max-h-[300px] overflow-y-auto">
          {notifications.length > 0 ? (
            notifications.map((notification) => (
              <DropdownMenuItem
                key={notification.id}
                onClick={() => markAsReadNotification(notification.id)}
                className={cn(
                  "flex flex-col items-start gap-1 p-4 cursor-pointer transition-colors hover:bg-muted",
                  !notification.isRead &&
                    "bg-blue-50 dark:bg-blue-950/30 relative pl-6"
                )}
              >
                {!notification.isRead && (
                  <div className="absolute left-2 top-1/2 -translate-y-1/2 w-2 h-2 rounded-full bg-blue-500" />
                )}
                <NotificationItem notify={notification} />
              </DropdownMenuItem>
            ))
          ) : (
            <div className="p-4 text-center text-sm text-muted-foreground">
              Không có thông báo nào
            </div>
          )}
        </div>
      </DropdownMenuContent>
    </DropdownMenu>
  );
};

export default NotificationList;

const NotificationItem = ({ notify }) => {
  switch (notify.type) {
    case NotificationType.COMMENT:
      return (
        <Link to={`/fund/${notify?.metadata?.campaignId}`}>
          <p className="text-sm">{notify.content}</p>

          <span className="text-xs text-muted-foreground">
            {new Date(notify.createdAt).toLocaleDateString("vi-VN", {
              hour: "2-digit",
              minute: "2-digit",
            })}
          </span>
        </Link>
      );
    case NotificationType.COMMENT_REPLY:
      return (
        <Link to={`/fund/${notify?.metadata?.campaignId}`}>
          <div
            className="text-sm"
            dangerouslySetInnerHTML={{ __html: notify.content }}
          />
          <span className="text-xs text-muted-foreground">
            {new Date(notify.createdAt).toLocaleDateString("vi-VN", {
              hour: "2-digit",
              minute: "2-digit",
            })}
          </span>
        </Link>
      );
    default:
      return (
        <div>
          <div
            className="text-sm"
            dangerouslySetInnerHTML={{ __html: notify.content }}
          />
          <span className="text-xs text-muted-foreground">
            {new Date(notify.createdAt).toLocaleDateString("vi-VN", {
              hour: "2-digit",
              minute: "2-digit",
            })}
          </span>
        </div>
      );
  }
};

```

### src/components/RemoteSVG/RemoteSVG.jsx
```jsx
import React, { useEffect, useState } from "react";

const RemoteSVG = ({ url }) => {
  const [svgContent, setSvgContent] = useState(null);

  useEffect(() => {
    fetch(url)
      .then((res) => res.text())
      .then(setSvgContent)
      .catch(console.error);
  }, [url]);

  return (
    <div
      className="w-12 h-12 overflow-hidden"
      dangerouslySetInnerHTML={{ __html: svgContent || "" }}
    />
  );
};

export default RemoteSVG;

```

### src/components/CampaignSkeleton/index.jsx
```jsx
import { Skeleton } from "@/components/ui/skeleton";

// Add CampaignSkeleton component
const CampaignSkeleton = () => {
  return (
    <div className="border rounded-lg overflow-hidden">
      <Skeleton className="w-full h-48" />
      <div className="p-4 space-y-4">
        <Skeleton className="h-6 w-3/4" />
        <Skeleton className="h-4 w-full" />
        <div className="space-y-2">
          <Skeleton className="h-2 w-full" />
          <Skeleton className="h-2 w-2/3" />
        </div>
        <div className="flex justify-between items-center">
          <Skeleton className="h-8 w-24" />
          <Skeleton className="h-8 w-24" />
        </div>
      </div>
    </div>
  );
};

export default CampaignSkeleton;

```

### src/components/LoadingPage/index.jsx
```jsx
const LoadingPage = () => (
  <div className="min-h-screen flex items-center justify-center">
    <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-primary"></div>
  </div>
);

export default LoadingPage;

```

### src/components/ListCampaign/index.jsx
```jsx
import React from "react";
import Card from "../Card/Card";
import { motion } from "framer-motion";

const ListCampaign = ({ campaigns }) => {
  const container = {
    hidden: { opacity: 0 },
    show: {
      opacity: 1,
      transition: {
        staggerChildren: 0.1,
      },
    },
  };

  const item = {
    hidden: {
      opacity: 0,
      y: 20,
    },
    show: {
      opacity: 1,
      y: 0,
      transition: {
        type: "spring",
        damping: 15,
        stiffness: 100,
      },
    },
  };

  return (
    <motion.div
      variants={container}
      initial="hidden"
      animate="show"
      className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6"
    >
      {campaigns.map((campaign) => (
        <motion.div key={campaign.id} variants={item}>
          <Card campaign={campaign} />
        </motion.div>
      ))}
    </motion.div>
  );
};

export default ListCampaign;

```

### src/components/FilterCampaign/index.jsx
```jsx
import React, { useState } from "react";
import {
  Select,
  SelectContent,
  SelectGroup,
  SelectItem,
  SelectLabel,
  SelectTrigger,
  SelectValue,
} from "../ui/select";
import { useCountry } from "@/hooks/useCountry";
import { useCategory } from "@/hooks/useCategory";
import { useFundraiseType } from "@/hooks/useFundraiseType";
import { Button } from "../ui/button";
import { Filter, FilterXIcon } from "lucide-react";

const FilterCampaign = ({ setFilters, onClearFilters, filters }) => {
  const { data: countries } = useCountry();
  const { data: categories, isLoading } = useCategory();
  const { data: fundraiseTypes } = useFundraiseType();

  const handleChangFilters = (key, value) => {
    setFilters((prev) => ({
      ...prev,
      [key]: value,
    }));
  };

  const handleClearFilters = () => {
    handleChangFilters("countryId", undefined);
    handleChangFilters("categoryId", undefined);
    handleChangFilters("fundraiseTypeId", undefined);

    onClearFilters();
  };

  return (
    <div className="pb-4 flex gap-1 items-center">
      <Button
        variant="outline"
        className="rounded-full flex items-center justify-center border border-black"
      >
        <Filter className="" />
        Lọc
      </Button>
      <Select
        value={filters.countryId}
        onValueChange={(value) => handleChangFilters("countryId", value)}
      >
        <SelectTrigger className="w-fit rounded-full border-1 border border-black">
          <SelectValue placeholder="Địa điểm" />
        </SelectTrigger>
        <SelectContent>
          <SelectGroup>
            {countries?.map((country) => (
              <SelectItem value={country.id} key={country.id}>
                {country.name}
              </SelectItem>
            ))}
          </SelectGroup>
        </SelectContent>
      </Select>
      <Select
        value={filters.categoryId}
        onValueChange={(value) => handleChangFilters("categoryId", value)}
      >
        <SelectTrigger className="w-fit rounded-full border-1 border border-black">
          <SelectValue placeholder="Danh mục" />
        </SelectTrigger>
        <SelectContent>
          <SelectGroup>
            {categories?.data?.map((category) => (
              <SelectItem value={category.id} key={category.id}>
                {category.name}
              </SelectItem>
            ))}
          </SelectGroup>
        </SelectContent>
      </Select>
      <Select
        value={filters.fundraiseTypeId}
        onValueChange={(value) => handleChangFilters("fundraiseTypeId}", value)}
      >
        <SelectTrigger className="w-fit rounded-full border-1 border border-black">
          <SelectValue placeholder="Loại quyên góp" />
        </SelectTrigger>
        <SelectContent>
          <SelectGroup>
            {fundraiseTypes?.map((fundraiseType) => (
              <SelectItem value={fundraiseType.id} key={fundraiseType.id}>
                {fundraiseType.name}
              </SelectItem>
            ))}
          </SelectGroup>
        </SelectContent>
      </Select>

      <Button
        variant="outline"
        className="rounded-full flex items-center justify-center border border-black"
        onClick={handleClearFilters}
      >
        <FilterXIcon className="" />
        Xóa bộ lọc
      </Button>
    </div>
  );
};

export default FilterCampaign;

```

### src/components/AnalysisResult/index.jsx
```jsx
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Skeleton } from "@/components/ui/skeleton";
import { Brain } from "lucide-react"; // Import thêm icon Brain

const AnalysisResult = ({ analysis, isLoading }) => {
  if (isLoading) {
    return (
      <Alert>
        <div className="space-y-3">
          <div className="flex items-center space-x-2">
            <Brain className="h-4 w-4 animate-pulse text-primary" />
            <AlertTitle className="font-medium">
              AI đang phân tích chiến dịch...
            </AlertTitle>
          </div>

          <AlertDescription className="space-y-2">
            <div className="flex items-center gap-2">
              <strong className="min-w-16">Tóm tắt:</strong>
              <Skeleton className="h-4 flex-1" />
            </div>

            <div className="flex items-center gap-2">
              <strong className="min-w-16">Đánh giá:</strong>
              <Skeleton className="h-4 flex-1" />
            </div>
          </AlertDescription>
        </div>
      </Alert>
    );
  }

  if (!analysis) return null;

  return (
    <Alert>
      <AlertTitle className="mb-2">Phân tích chiến dịch</AlertTitle>
      <AlertDescription className="space-y-2">
        <div className="flex gap-2">
          <strong className="min-w-16">Tóm tắt:</strong>
          <span>{analysis.summary}</span>
        </div>
        <div className="flex gap-2">
          <strong className="min-w-16">Đánh giá:</strong>
          <span>{analysis.analysis}</span>
        </div>
      </AlertDescription>
    </Alert>
  );
};

export default AnalysisResult;

```
