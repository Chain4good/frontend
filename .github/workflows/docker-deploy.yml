name: Deploy to VPS with Docker

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      
      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ secrets.DOCKER_USERNAME }}/charity-frontend
          tags: |
            type=raw,value=latest
            type=sha,format=short
      
      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Set up SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts
      
      - name: Deploy to VPS
        env:
          IMAGE_NAME: ${{ secrets.DOCKER_USERNAME }}/charity-frontend:latest
          CONTAINER_NAME: charity-frontend
          SSH_HOST: ${{ secrets.SSH_HOST }}
          SSH_USER: ${{ secrets.SSH_USERNAME }}
        run: |
          ssh $SSH_USER@$SSH_HOST << 'ENDSSH'
            # Pull the latest image
            docker pull ${{ env.IMAGE_NAME }}
            
            # Check if container exists and stop it
            if [ "$(docker ps -q -f name=${{ env.CONTAINER_NAME }})" ]; then
              docker stop ${{ env.CONTAINER_NAME }}
              docker rm ${{ env.CONTAINER_NAME }}
            fi
            
            # Run new container
            docker run -d \
              --name ${{ env.CONTAINER_NAME }} \
              --restart unless-stopped \
              -p 3000:3000 \
              ${{ env.IMAGE_NAME }}
              
            # Clean up old images (optional)
            docker image prune -af --filter "until=24h"
          ENDSSH
      
      - name: Cleanup SSH keys
        if: always()
        run: rm -rf ~/.ssh

